//增加了GG改数值，云端登录存本地，下载文件添加日期
//去除动画人物，可打开比如作精少女等游戏
//添加有效期的验证，加密函数见其他文件
//优化了一下存档互换的逻辑，以及商城一键购买后能继续购买，and云端商城0花购买的制霸存档
//添加了代码定位的功能，用于挑选帮改代码，先输入代码定位+指定数值，再输入帮改代码，定位下载代码
//4.3优化了一下商城已购的逻辑，此外网页版和安卓版区别就是有效期的验证，将验证有效期的函数注释掉就可以在安卓上运行
//新增剧情跳转功能，以及优化了获取全部剧情的函数
function SelfStorage() {
    this.setItem = function(t, e, i) {
        SAL_setStorage(gIndex + "/" + t, e, i)
    }
    ;
    this.getItem = function(t, e) {
        SAL_getStorage(gIndex + "/" + t, e)
    }
    ;
    this.removeItem = function(t, e) {
        SAL_removeStorage(gIndex + "/" + t, e)
    }
}
var SALlocalStorage = new SelfStorage;
var dx = 0;
var dw = 0;
const regex = /GG(\d+)to(\d+)/;
let matchesg;
const firstNumber = 0;
const secondNumber = 0;
let xx = 0;
let flagxx = 0;
let zb = 999999;
let slsc = 999999;
let gg = 0;
let cz = 0;
var fileContent;
let scsc = 0;
let content2 = "";
var dataArray = [];
let ylk = '';
let stringsArray = [];
let numbersArray = [];
let contentdh2 = [];
var uniqueMatchesArray2 = [];
var uniqueMatchesArray = [];

// 获取用户代理字符串
var userAgent = window.navigator.userAgent;

// 匹配操作系统信息的正则表达式
var osRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;

// 匹配结果
var platform;

if (osRegex.test(userAgent)) {
    // 如果匹配到移动设备平台信息
    platform = "移动设备";
} else if (/Windows|Macintosh|Linux|MacIntel|MacPPC|Mac68K/i.test(userAgent)) {
    // 如果匹配到桌面操作系统平台信息
    platform = "桌面设备";
} else {
    // 其他情况，可能是未知平台
    platform = "未知设备";
}

function extractNumbers(str) {
    matchesg = str.match(/-?\d+/g);
    if (matchesg && matchesg.length >= 2) {
        return [matchesg[0], matchesg[1]];
    } else {
        return [];
    }
}
function displayStories() {
    let stories = tv.data.stories.filter(story=>story && story.ID !== 0);

    let chunkSize = 10;
    // 设置每次显示的故事数量
    let chunks = [];

    // 分割数组为多个块
    for (let i = 0; i < stories.length; i += chunkSize) {
        chunks.push(stories.slice(i, i + chunkSize));
    }

    let currentIndex = 0;

    function showAlert() {
        let message = 'Available Stories:\n';
        chunks[currentIndex].forEach(function(story) {
            message += `Name: ${story.Name}, ID: ${story.ID}\n`;
        });

        alert(message);

        if (currentIndex < chunks.length - 1) {
            currentIndex++;
            // 继续显示下一块内容
            setTimeout(showAlert, 0);
        } else {
            // 当所有内容都显示完毕后，提示用户输入故事ID
            let storyID = prompt('Enter the ID of the story to view its events:');
            displayEvents(storyID);
        }
    }

    showAlert();
    // 显示第一块内容
}

function displayEvents(id) {
    const story = tv.data.stories.find(story=>story && story.ID === parseInt(id));
    if (!story) {
        alert('Story not found.');
        return;
    }
    let message = `Events for Story ID ${id}:\n`;
    story.events.forEach(function(event) {
        message += `Argv: ${event.Argv.join(", ")}\n`;
    });
    alert(message);
    downloadFile(message, tv.data.Headr.title + story.ID + story.Name + '剧情文件.txt');
}
// 存储数据的数组
function processFileContent(fileContent) {
    let content = '';
    content += `/****普通数值****/\n`;
    var pattern = /(?<![:：])\[(\d+)[：:](.*?)\]/g;

    var matches = [];
    var match;
    while ((match = pattern.exec(fileContent)) !== null) {
        const number = parseInt(match[1]);
        const value = match[2];
        matches.push({
            number,
            value
        });
    }

    uniqueMatchesArray2 = Array.from(new Set(matches.map(match=>match.number))).map(number=>matches.find(match=>match.number === number));

    uniqueMatchesArray2.sort((a,b)=>a.number - b.number);

    const sortedMatches2 = uniqueMatchesArray2.map(match=>`tv.system.vars.data[${match.number - 1}]=999999  //${match.value}`);
    sortedMatches2.forEach(match=>{
        content += match + '\n';
    }
    );

    content += `\n\n/****二周目数值****/\n`;

    var pattern2 = /(二周目数值.*?)\[(\d+)\：(.*?)\]/g;

    var matches2 = [];
    var match2;
    while ((match2 = pattern2.exec(fileContent)) !== null) {
        const number = parseInt(match2[2]);
        const value = match2[3];
        matches2.push({
            number,
            value
        });
    }

    uniqueMatchesArray = Array.from(new Set(matches2.map(match=>match.number))).map(number=>matches2.find(match=>match.number === number));

    uniqueMatchesArray.sort((a,b)=>a.number - b.number);

    const sortedMatches = uniqueMatchesArray.map(match=>`tv.system.varEx.data[${match.number - 1}]=999999  //${match.value}`);
    sortedMatches.forEach(match=>{
        content += match + '\n';
    }
    );
    return (content);
    //downloadFile(content, tv.data.Headr.title + ".txt");
}
// 获取所有数据并存储在数组中
function getAllLocalCloudData() {
    var operationFrame = new OperationFrame();

    if (Configuration.isH5) {
        // 获取H5环境下的所有数据
        // 通过GloableData.getInstance().savekey获取数据的前缀
        // 遍历所有可能的键值，调用OperationFrame.getLocalCloudData函数获取数据并存储在数组中
        for (var i = 0; i <= 90; i++) {
            var key = i.toString();
            operationFrame.getLocalCloudData(key, function(data) {
                if (data) {
                    dataArray[i] = JSON.stringify(data);
                }
            });
        }
    } else {
        // 获取非H5环境下的所有数据
        // 遍历所有可能的键值，调用OperationFrame.getLocalCloudData函数获取数据并存储在数组中
        for (var i = 0; i <= 90; i++) {
            var key = i.toString();
            SALlocalStorage.getItem("cloud|" + 0 + "|" + guid + "|" + key, function(data) {
                if (data) {
                    dataArray[i] = JSON.stringify(data);
                }
            });
        }
    }
    //console.log(dataArray); // 打印输出存储数据的数组
}
// 解密函数
function decryptDate(encryptedDate) {
    // 检查字符串是否为有效的base64编码
    if (!isValidBase64(encryptedDate)) {

        localStorage.setItem('encryptedDate', null);
        checkPasswordExpiration();
        //  document.body.innerHTML = '';// 示例代码：

    }

    // 假设这里是您的解密逻辑，可以根据加密字符串还原日期
    return new Date(atob(encryptedDate));
    // 解码base64字符串并转换为日期对象
}
// 检查字符串是否为有效的base64编码
function isValidBase64(str) {
    try {
        return btoa(atob(str)) == str;
    } catch (err) {
        return false;
    }
}

// 检查密码有效期的函数
function checkPasswordExpiration() {
    // 从数据库中获取存储的变量
    const encryptedDate = localStorage.getItem('encryptedDate');

    if (encryptedDate !== "null" && encryptedDate !== "") {
        // 解密得到日期
        const decryptedDate = decryptDate(encryptedDate);

        // 获取当前日期
        const currentDate = new Date().getTime();
        // 获取当前日期的时间戳（毫秒）

        // 解密日期的时间戳（毫秒）
        const decryptedDateTimestamp = decryptedDate.getTime();
        // 比较日期
        if (decryptedDateTimestamp < currentDate) {
            // 弹出输入框，让用户重新输入
            const userInput = prompt('请输入新的日期：');
            if (userInput == null) {
                document.body.innerHTML = '';
                // 示例代码：
            } else {

                // 更新数据库中的变量为新输入的数据

                localStorage.setItem('encryptedDate', userInput);

                // 再次解密用户输入的内容
                const decryptedUserInput = decryptDate(userInput);

                // 检查是否仍然早于当前日期
                if (decryptedUserInput < currentDate) {
                    // 将当前页面变成空白页面
                    document.body.innerHTML = '';
                    // 示例代码：
                }
            }
        } else {}
    } else {
        const inputPassword = prompt('请输入密码：');
        localStorage.setItem('encryptedDate', inputPassword);
        checkPasswordExpiration();
    }

}

// 更新密码有效期的函数
function updatePasswordExpiration() {
    const expirationTimestamp = encryptCurrentDateToModifiedTimestamp();
    // 获取当前时间并加密为时间戳
    localStorage.setItem('passwordExpirationTimestamp', expirationTimestamp);
    // 将加密后的时间戳保存到本地数据库
}

// 清空界面的函数
function clearScreen() {
    // 清空界面的逻辑，例如隐藏所有元素或显示空白界面
    document.innerHTML = '';
    // 示例代码：
}

// 显示内容的函数
function showContent() {// 显示内容的逻辑，例如显示主界面或特定元素
//document.getElementById('main-content').style.display = 'block';// 示例代码：
}

// 加密密码的函数
function encryptPassword(password) {
    const now = new Date();
    // 获取当前日期和时间
    const timestamp = now.getTime();
    // 获取当前时间戳（毫秒）
    const modifiedTimestamp = timestamp + 623 * 3;
    // 在时间戳上加上固定值
    return modifiedTimestamp;
    // 返回修改后的时间戳
}

// 解密密码的函数
function decryptPassword(encryptedPassword) {
    // 解密密码的逻辑，例如对加密的密码进行解码
    // 这里只是示例，您可以根据实际情况使用对应的解密算法
    const originalTimestamp = modifiedTimestamp - 623 * 3;
    // 将固定值从修改后的时间戳中减去
    const date = new Date(originalTimestamp);
    const year = date.getFullYear();
    const month = ('0' + (date.getMonth() + 1)).slice(-2);
    // 月份加1，并确保两位数显示
    const day = ('0' + date.getDate()).slice(-2);
    // 确保两位数显示
    return year + '-' + month + '-' + day;
    // 返回 'YYYY-MM-DD' 格式的当前日期
}

// 在程序运行时调用检查密码有效期函数以验证密码
//const inputPassword = prompt('请输入密码：');

// 存储指定键值的数据
function saveDataWithKey(dataIndex, keyIndex) {
    if (Configuration.isH5) {
        var i = GloableData.getInstance().savekey + keyIndex;
        SAL_setStorage(i, dataIndex);
    } else {
        SALlocalStorage.setItem("cloud|" + 0 + "|" + guid + "|" + keyIndex, dataArray[dataIndex]);
    }
}

function downloadFile(content, filename) {
    let now = new Date();
    let year = now.getFullYear();
    let month = now.getMonth() + 1;
    // 月份是从0开始计数的，所以要加1
    let day = now.getDate();

    content += (`\n//获取时间：${year}年${month}月${day}日\n\n`);
    var element = document.createElement("a");
    element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(content));
    element.setAttribute("download", filename);
    element.style.display = "none";
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
}
function gamebind() {
    var xhr = new XMLHttpRequest();

    xhr.open("GET", "https://dlcdn1.cgyouxi.com/shareres/" + gg.substring(0, 2) + "/" + gg, true);
    xhr.responseType = "arraybuffer";

    xhr.onload = function() {
        if (xhr.status === 200) {
            var arrayBuffer = xhr.response;
            fileContent = new TextDecoder("utf-8").decode(arrayBuffer);

        }
    }
    ;

    xhr.send();
}
function md5(c) {
    function u(t, e) {
        return t << e | t >>> 32 - e
    }

    function o(t, e) {
        var i, a, s, n, r;
        s = t & 2147483648;
        n = e & 2147483648;
        i = t & 1073741824;
        a = e & 1073741824;
        r = (t & 1073741823) + (e & 1073741823);
        if (i & a) {
            return r ^ 2147483648 ^ s ^ n
        }
        if (i | a) {
            if (r & 1073741824) {
                return r ^ 3221225472 ^ s ^ n
            } else {
                return r ^ 1073741824 ^ s ^ n
            }
        } else {
            return r ^ s ^ n
        }
    }

    function f(t, e, i) {
        return t & e | ~t & i
    }

    function d(t, e, i) {
        return t & i | e & ~i
    }

    function m(t, e, i) {
        return t ^ e ^ i
    }

    function g(t, e, i) {
        return e ^ (t | ~i)
    }

    function t(t, e, i, a, s, n, r) {
        t = o(t, o(o(f(e, i, a), s), r));
        return o(u(t, n), e)
    }

    function e(t, e, i, a, s, n, r) {
        t = o(t, o(o(d(e, i, a), s), r));
        return o(u(t, n), e)
    }

    function i(t, e, i, a, s, n, r) {
        t = o(t, o(o(m(e, i, a), s), r));
        return o(u(t, n), e)
    }

    function v(t, e, i, a, s, n, r) {
        t = o(t, o(o(g(e, i, a), s), r));
        return o(u(t, n), e)
    }

    function p(t) {
        var e;
        var i = t.length;
        var a = i + 8;
        var s = (a - a % 64) / 64;
        var n = (s + 1) * 16;
        var r = Array(n - 1);
        var o = 0;
        var h = 0;
        while (h < i) {
            e = (h - h % 4) / 4;
            o = h % 4 * 8;
            r[e] = r[e] | t.charCodeAt(h) << o;
            h++
        }
        e = (h - h % 4) / 4;
        o = h % 4 * 8;
        r[e] = r[e] | 128 << o;
        r[n - 2] = i << 3;
        r[n - 1] = i >>> 29;
        return r
    }

    function S(t) {
        var e = "", i = "", a, s;
        for (s = 0; s <= 3; s++) {
            a = t >>> s * 8 & 255;
            i = "0" + a.toString(16);
            e = e + i.substr(i.length - 2, 2)
        }
        return e
    }

    function I(t) {
        t = t.replace(/\r\n/g, "\n");
        var e = "";
        for (var i = 0; i < t.length; i++) {
            var a = t.charCodeAt(i);
            if (a < 128) {
                e += String.fromCharCode(a)
            } else if (a > 127 && a < 2048) {
                e += String.fromCharCode(a >> 6 | 192);
                e += String.fromCharCode(a & 63 | 128)
            } else {
                e += String.fromCharCode(a >> 12 | 224);
                e += String.fromCharCode(a >> 6 & 63 | 128);
                e += String.fromCharCode(a & 63 | 128)
            }
        }
        return e
    }
    var a = Array();
    var s, w, y, _, b, n, r, h, l;
    var T = 7
      , L = 12
      , A = 17
      , C = 22;
    var x = 5
      , D = 9
      , P = 14
      , B = 20;
    var M = 4
      , G = 11
      , E = 16
      , F = 23;
    var k = 6
      , V = 10
      , O = 15
      , R = 21;
    c = I(c);
    a = p(c);
    n = 1732584193;
    r = 4023233417;
    h = 2562383102;
    l = 271733878;
    for (s = 0; s < a.length; s += 16) {
        w = n;
        y = r;
        _ = h;
        b = l;
        n = t(n, r, h, l, a[s + 0], T, 3614090360);
        l = t(l, n, r, h, a[s + 1], L, 3905402710);
        h = t(h, l, n, r, a[s + 2], A, 606105819);
        r = t(r, h, l, n, a[s + 3], C, 3250441966);
        n = t(n, r, h, l, a[s + 4], T, 4118548399);
        l = t(l, n, r, h, a[s + 5], L, 1200080426);
        h = t(h, l, n, r, a[s + 6], A, 2821735955);
        r = t(r, h, l, n, a[s + 7], C, 4249261313);
        n = t(n, r, h, l, a[s + 8], T, 1770035416);
        l = t(l, n, r, h, a[s + 9], L, 2336552879);
        h = t(h, l, n, r, a[s + 10], A, 4294925233);
        r = t(r, h, l, n, a[s + 11], C, 2304563134);
        n = t(n, r, h, l, a[s + 12], T, 1804603682);
        l = t(l, n, r, h, a[s + 13], L, 4254626195);
        h = t(h, l, n, r, a[s + 14], A, 2792965006);
        r = t(r, h, l, n, a[s + 15], C, 1236535329);
        n = e(n, r, h, l, a[s + 1], x, 4129170786);
        l = e(l, n, r, h, a[s + 6], D, 3225465664);
        h = e(h, l, n, r, a[s + 11], P, 643717713);
        r = e(r, h, l, n, a[s + 0], B, 3921069994);
        n = e(n, r, h, l, a[s + 5], x, 3593408605);
        l = e(l, n, r, h, a[s + 10], D, 38016083);
        h = e(h, l, n, r, a[s + 15], P, 3634488961);
        r = e(r, h, l, n, a[s + 4], B, 3889429448);
        n = e(n, r, h, l, a[s + 9], x, 568446438);
        l = e(l, n, r, h, a[s + 14], D, 3275163606);
        h = e(h, l, n, r, a[s + 3], P, 4107603335);
        r = e(r, h, l, n, a[s + 8], B, 1163531501);
        n = e(n, r, h, l, a[s + 13], x, 2850285829);
        l = e(l, n, r, h, a[s + 2], D, 4243563512);
        h = e(h, l, n, r, a[s + 7], P, 1735328473);
        r = e(r, h, l, n, a[s + 12], B, 2368359562);
        n = i(n, r, h, l, a[s + 5], M, 4294588738);
        l = i(l, n, r, h, a[s + 8], G, 2272392833);
        h = i(h, l, n, r, a[s + 11], E, 1839030562);
        r = i(r, h, l, n, a[s + 14], F, 4259657740);
        n = i(n, r, h, l, a[s + 1], M, 2763975236);
        l = i(l, n, r, h, a[s + 4], G, 1272893353);
        h = i(h, l, n, r, a[s + 7], E, 4139469664);
        r = i(r, h, l, n, a[s + 10], F, 3200236656);
        n = i(n, r, h, l, a[s + 13], M, 681279174);
        l = i(l, n, r, h, a[s + 0], G, 3936430074);
        h = i(h, l, n, r, a[s + 3], E, 3572445317);
        r = i(r, h, l, n, a[s + 6], F, 76029189);
        n = i(n, r, h, l, a[s + 9], M, 3654602809);
        l = i(l, n, r, h, a[s + 12], G, 3873151461);
        h = i(h, l, n, r, a[s + 15], E, 530742520);
        r = i(r, h, l, n, a[s + 2], F, 3299628645);
        n = v(n, r, h, l, a[s + 0], k, 4096336452);
        l = v(l, n, r, h, a[s + 7], V, 1126891415);
        h = v(h, l, n, r, a[s + 14], O, 2878612391);
        r = v(r, h, l, n, a[s + 5], R, 4237533241);
        n = v(n, r, h, l, a[s + 12], k, 1700485571);
        l = v(l, n, r, h, a[s + 3], V, 2399980690);
        h = v(h, l, n, r, a[s + 10], O, 4293915773);
        r = v(r, h, l, n, a[s + 1], R, 2240044497);
        n = v(n, r, h, l, a[s + 8], k, 1873313359);
        l = v(l, n, r, h, a[s + 15], V, 4264355552);
        h = v(h, l, n, r, a[s + 6], O, 2734768916);
        r = v(r, h, l, n, a[s + 13], R, 1309151649);
        n = v(n, r, h, l, a[s + 4], k, 4149444226);
        l = v(l, n, r, h, a[s + 11], V, 3174756917);
        h = v(h, l, n, r, a[s + 2], O, 718787259);
        r = v(r, h, l, n, a[s + 9], R, 3951481745);
        n = o(n, w);
        r = o(r, y);
        h = o(h, _);
        l = o(l, b)
    }
    return (S(n) + S(r) + S(h) + S(l)).toLowerCase()
}
(function(i, a) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = a() : typeof define === "function" && define.amd ? define(a) : function() {
        var t = i.Base64;
        var e = a();
        e.noConflict = function() {
            i.Base64 = t;
            return e
        }
        ;
        if (i.Meteor) {
            Base64 = e
        }
        i.Base64 = e
    }()
}
)(typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this, function() {
    "use strict";
    var c = "3.7.2";
    var u = c;
    var f = typeof atob === "function";
    var d = typeof btoa === "function";
    var t = typeof Buffer === "function";
    var m = typeof TextDecoder === "function" ? new TextDecoder : undefined;
    var g = typeof TextEncoder === "function" ? new TextEncoder : undefined;
    var v = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var h = Array.prototype.slice.call(v);
    var r = function(t) {
        var i = {};
        t.forEach(function(t, e) {
            return i[t] = e
        });
        return i
    }(h);
    var p = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
    var o = String.fromCharCode.bind(String);
    var S = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : function(t, e) {
        if (e === void 0) {
            e = function(t) {
                return t
            }
        }
        return new Uint8Array(Array.prototype.slice.call(t, 0).map(e))
    }
    ;
    var I = function(t) {
        return t.replace(/=/g, "").replace(/[+\/]/g, function(t) {
            return t == "+" ? "-" : "_"
        })
    };
    var w = function(t) {
        return t.replace(/[^A-Za-z0-9\+\/]/g, "")
    };
    var y = function(t) {
        var e, i, a, s, n = "";
        var r = t.length % 3;
        for (var o = 0; o < t.length; ) {
            if ((i = t.charCodeAt(o++)) > 255 || (a = t.charCodeAt(o++)) > 255 || (s = t.charCodeAt(o++)) > 255)
                throw new TypeError("invalid character found");
            e = i << 16 | a << 8 | s;
            n += h[e >> 18 & 63] + h[e >> 12 & 63] + h[e >> 6 & 63] + h[e & 63]
        }
        return r ? n.slice(0, r - 3) + "===".substring(r) : n
    };
    var n = d ? function(t) {
        return btoa(t)
    }
    : t ? function(t) {
        return Buffer.from(t, "binary").toString("base64")
    }
    : y;
    var i = t ? function(t) {
        return Buffer.from(t).toString("base64")
    }
    : function(t) {
        var e = 4096;
        var i = [];
        for (var a = 0, s = t.length; a < s; a += e) {
            i.push(o.apply(null, t.subarray(a, a + e)))
        }
        return n(i.join(""))
    }
    ;
    var e = function(t, e) {
        if (e === void 0) {
            e = false
        }
        return e ? I(i(t)) : i(t)
    };
    var _ = function(t) {
        if (t.length < 2) {
            var e = t.charCodeAt(0);
            return e < 128 ? t : e < 2048 ? o(192 | e >>> 6) + o(128 | e & 63) : o(224 | e >>> 12 & 15) + o(128 | e >>> 6 & 63) + o(128 | e & 63)
        } else {
            var e = 65536 + (t.charCodeAt(0) - 55296) * 1024 + (t.charCodeAt(1) - 56320);
            return o(240 | e >>> 18 & 7) + o(128 | e >>> 12 & 63) + o(128 | e >>> 6 & 63) + o(128 | e & 63)
        }
    };
    var b = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var T = function(t) {
        return t.replace(b, _)
    };
    var L = t ? function(t) {
        return Buffer.from(t, "utf8").toString("base64")
    }
    : g ? function(t) {
        return i(g.encode(t))
    }
    : function(t) {
        return n(T(t))
    }
    ;
    var a = function(t, e) {
        if (e === void 0) {
            e = false
        }
        return e ? I(L(t)) : L(t)
    };
    var A = function(t) {
        return a(t, true)
    };
    var C = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
    var x = function(t) {
        switch (t.length) {
        case 4:
            var e = (7 & t.charCodeAt(0)) << 18 | (63 & t.charCodeAt(1)) << 12 | (63 & t.charCodeAt(2)) << 6 | 63 & t.charCodeAt(3)
              , i = e - 65536;
            return o((i >>> 10) + 55296) + o((i & 1023) + 56320);
        case 3:
            return o((15 & t.charCodeAt(0)) << 12 | (63 & t.charCodeAt(1)) << 6 | 63 & t.charCodeAt(2));
        default:
            return o((31 & t.charCodeAt(0)) << 6 | 63 & t.charCodeAt(1))
        }
    };
    var D = function(t) {
        return t.replace(C, x)
    };
    var P = function(t) {
        t = t.replace(/\s+/g, "");
        if (!p.test(t))
            throw new TypeError("malformed base64.");
        t += "==".slice(2 - (t.length & 3));
        var e, i = "", a, s;
        for (var n = 0; n < t.length; ) {
            e = r[t.charAt(n++)] << 18 | r[t.charAt(n++)] << 12 | (a = r[t.charAt(n++)]) << 6 | (s = r[t.charAt(n++)]);
            i += a === 64 ? o(e >> 16 & 255) : s === 64 ? o(e >> 16 & 255, e >> 8 & 255) : o(e >> 16 & 255, e >> 8 & 255, e & 255)
        }
        return i
    };
    var s = f ? function(t) {
        return atob(w(t))
    }
    : t ? function(t) {
        return Buffer.from(t, "base64").toString("binary")
    }
    : P;
    var B = t ? function(t) {
        return S(Buffer.from(t, "base64"))
    }
    : function(t) {
        return S(s(t), function(t) {
            return t.charCodeAt(0)
        })
    }
    ;
    var M = function(t) {
        return B(E(t))
    };
    var G = t ? function(t) {
        return Buffer.from(t, "base64").toString("utf8")
    }
    : m ? function(t) {
        return m.decode(B(t))
    }
    : function(t) {
        return D(s(t))
    }
    ;
    var E = function(t) {
        return w(t.replace(/[-_]/g, function(t) {
            return t == "-" ? "+" : "/"
        }))
    };
    var F = function(t) {
        return G(E(t))
    };
    var k = function(t) {
        if (typeof t !== "string")
            return false;
        var e = t.replace(/\s+/g, "").replace(/={0,2}$/, "");
        return !/[^\s0-9a-zA-Z\+/]/.test(e) || !/[^\s0-9a-zA-Z\-_]/.test(e)
    };
    var V = function(t) {
        return {
            value: t,
            enumerable: false,
            writable: true,
            configurable: true
        }
    };
    var O = function() {
        var t = function(t, e) {
            return Object.defineProperty(String.prototype, t, V(e))
        };
        t("fromBase64", function() {
            return F(this)
        });
        t("toBase64", function(t) {
            return a(this, t)
        });
        t("toBase64URI", function() {
            return a(this, true)
        });
        t("toBase64URL", function() {
            return a(this, true)
        });
        t("toUint8Array", function() {
            return M(this)
        })
    };
    var R = function() {
        var t = function(t, e) {
            return Object.defineProperty(Uint8Array.prototype, t, V(e))
        };
        t("toBase64", function(t) {
            return e(this, t)
        });
        t("toBase64URI", function() {
            return e(this, true)
        });
        t("toBase64URL", function() {
            return e(this, true)
        })
    };
    var N = function() {
        O();
        R()
    };
    var l = {
        version: c,
        VERSION: u,
        atob: s,
        atobPolyfill: P,
        btoa: n,
        btoaPolyfill: y,
        fromBase64: F,
        toBase64: a,
        encode: a,
        encodeURI: A,
        encodeURL: A,
        utob: T,
        btou: D,
        decode: F,
        isValid: k,
        fromUint8Array: e,
        toUint8Array: M,
        extendString: O,
        extendUint8Array: R,
        extendBuiltins: N
    };
    l.Base64 = {};
    Object.keys(l).forEach(function(t) {
        return l.Base64[t] = l[t]
    });
    return l
});
var __extends = this && this.__extends || function() {
    var a = function(t, e) {
        a = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var i in e)
                if (Object.prototype.hasOwnProperty.call(e, i))
                    t[i] = e[i]
        }
        ;
        return a(t, e)
    };
    return function(t, e) {
        if (typeof e !== "function" && e !== null)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        a(t, e);

        function i() {
            this.constructor = t
        }
        t.prototype = e === null ? Object.create(e) : (i.prototype = e.prototype,
        new i)
    }
}();
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";

function int2char(t) {
    return BI_RM.charAt(t)
}

function op_and(t, e) {
    return t & e
}

function op_or(t, e) {
    return t | e
}

function op_xor(t, e) {
    return t ^ e
}

function op_andnot(t, e) {
    return t & ~e
}

function lbit(t) {
    if (t == 0) {
        return -1
    }
    var e = 0;
    if ((t & 65535) == 0) {
        t >>= 16;
        e += 16
    }
    if ((t & 255) == 0) {
        t >>= 8;
        e += 8
    }
    if ((t & 15) == 0) {
        t >>= 4;
        e += 4
    }
    if ((t & 3) == 0) {
        t >>= 2;
        e += 2
    }
    if ((t & 1) == 0) {
        ++e
    }
    return e
}

function cbit(t) {
    var e = 0;
    while (t != 0) {
        t &= t - 1;
        ++e
    }
    return e
}
var decoder;
var Base64Self = {
    decode: function(t) {
        var e;
        if (decoder === undefined) {
            var i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var a = "= \f\n\r\t \u2028\u2029";
            decoder = Object.create(null);
            for (e = 0; e < 64; ++e) {
                decoder[i.charAt(e)] = e
            }
            decoder["-"] = 62;
            decoder["_"] = 63;
            for (e = 0; e < a.length; ++e) {
                decoder[a.charAt(e)] = -1
            }
        }
        var s = [];
        var n = 0;
        var r = 0;
        for (e = 0; e < t.length; ++e) {
            var o = t.charAt(e);
            if (o == "=") {
                break
            }
            o = decoder[o];
            if (o == -1) {
                continue
            }
            if (o === undefined) {
                throw new Error("Illegal character at offset " + e)
            }
            n |= o;
            if (++r >= 4) {
                s[s.length] = n >> 16;
                s[s.length] = n >> 8 & 255;
                s[s.length] = n & 255;
                n = 0;
                r = 0
            } else {
                n <<= 6
            }
        }
        switch (r) {
        case 1:
            throw new Error("Base64Self encoding incomplete: at least 2 bits missing");
        case 2:
            s[s.length] = n >> 10;
            break;
        case 3:
            s[s.length] = n >> 16;
            s[s.length] = n >> 8 & 255;
            break
        }
        return s
    },
    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,
    unarmor: function(t) {
        var e = Base64Self.re.exec(t);
        if (e) {
            if (e[1]) {
                t = e[1]
            } else if (e[2]) {
                t = e[2]
            } else {
                throw new Error("RegExp out of sync")
            }
        }
        return Base64Self.decode(t)
    }
};
var max = 1e13;
var Int10 = function() {
    function t(t) {
        this.buf = [+t || 0]
    }
    t.prototype.mulAdd = function(t, e) {
        var i = this.buf;
        var a = i.length;
        var s;
        var n;
        for (s = 0; s < a; ++s) {
            n = i[s] * t + e;
            if (n < max) {
                e = 0
            } else {
                e = 0 | n / max;
                n -= e * max
            }
            i[s] = n
        }
        if (e > 0) {
            i[s] = e
        }
    }
    ;
    t.prototype.sub = function(t) {
        var e = this.buf;
        var i = e.length;
        var a;
        var s;
        for (a = 0; a < i; ++a) {
            s = e[a] - t;
            if (s < 0) {
                s += max;
                t = 1
            } else {
                t = 0
            }
            e[a] = s
        }
        while (e[e.length - 1] === 0) {
            e.pop()
        }
    }
    ;
    t.prototype.toString = function(t) {
        if ((t || 10) != 10) {
            throw new Error("only base 10 is supported")
        }
        var e = this.buf;
        var i = e[e.length - 1].toString();
        for (var a = e.length - 2; a >= 0; --a) {
            i += (max + e[a]).toString().substring(1)
        }
        return i
    }
    ;
    t.prototype.valueOf = function() {
        var t = this.buf;
        var e = 0;
        for (var i = t.length - 1; i >= 0; --i) {
            e = e * max + t[i]
        }
        return e
    }
    ;
    t.prototype.simplify = function() {
        var t = this.buf;
        return t.length == 1 ? t[0] : this
    }
    ;
    return t
}();
var ellipsis = "…";
var reTimeS = /^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;
var reTimeL = /^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;

function stringCut(t, e) {
    if (t.length > e) {
        t = t.substring(0, e) + ellipsis
    }
    return t
}
var Stream = function() {
    function i(t, e) {
        this.hexDigits = "0123456789ABCDEF";
        if (t instanceof i) {
            this.enc = t.enc;
            this.pos = t.pos
        } else {
            this.enc = t;
            this.pos = e
        }
    }
    i.prototype.get = function(t) {
        if (t === undefined) {
            t = this.pos++
        }
        if (t >= this.enc.length) {
            throw new Error("Requesting byte offset " + t + " on a stream of length " + this.enc.length)
        }
        return "string" === typeof this.enc ? this.enc.charCodeAt(t) : this.enc[t]
    }
    ;
    i.prototype.hexByte = function(t) {
        return this.hexDigits.charAt(t >> 4 & 15) + this.hexDigits.charAt(t & 15)
    }
    ;
    i.prototype.hexDump = function(t, e, i) {
        var a = "";
        for (var s = t; s < e; ++s) {
            a += this.hexByte(this.get(s));
            if (i !== true) {
                switch (s & 15) {
                case 7:
                    a += "  ";
                    break;
                case 15:
                    a += "\n";
                    break;
                default:
                    a += " "
                }
            }
        }
        return a
    }
    ;
    i.prototype.isASCII = function(t, e) {
        for (var i = t; i < e; ++i) {
            var a = this.get(i);
            if (a < 32 || a > 176) {
                return false
            }
        }
        return true
    }
    ;
    i.prototype.parseStringISO = function(t, e) {
        var i = "";
        for (var a = t; a < e; ++a) {
            i += String.fromCharCode(this.get(a))
        }
        return i
    }
    ;
    i.prototype.parseStringUTF = function(t, e) {
        var i = "";
        for (var a = t; a < e; ) {
            var s = this.get(a++);
            if (s < 128) {
                i += String.fromCharCode(s)
            } else if (s > 191 && s < 224) {
                i += String.fromCharCode((s & 31) << 6 | this.get(a++) & 63)
            } else {
                i += String.fromCharCode((s & 15) << 12 | (this.get(a++) & 63) << 6 | this.get(a++) & 63)
            }
        }
        return i
    }
    ;
    i.prototype.parseStringBMP = function(t, e) {
        var i = "";
        var a;
        var s;
        for (var n = t; n < e; ) {
            a = this.get(n++);
            s = this.get(n++);
            i += String.fromCharCode(a << 8 | s)
        }
        return i
    }
    ;
    i.prototype.parseTime = function(t, e, i) {
        var a = this.parseStringISO(t, e);
        var s = (i ? reTimeS : reTimeL).exec(a);
        if (!s) {
            return "Unrecognized time: " + a
        }
        if (i) {
            s[1] = +s[1];
            s[1] += +s[1] < 70 ? 2e3 : 1900
        }
        a = s[1] + "-" + s[2] + "-" + s[3] + " " + s[4];
        if (s[5]) {
            a += ":" + s[5];
            if (s[6]) {
                a += ":" + s[6];
                if (s[7]) {
                    a += "." + s[7]
                }
            }
        }
        if (s[8]) {
            a += " UTC";
            if (s[8] != "Z") {
                a += s[8];
                if (s[9]) {
                    a += ":" + s[9]
                }
            }
        }
        return a
    }
    ;
    i.prototype.parseInteger = function(t, e) {
        var i = this.get(t);
        var a = i > 127;
        var s = a ? 255 : 0;
        var n;
        var r = "";
        while (i == s && ++t < e) {
            i = this.get(t)
        }
        n = e - t;
        if (n === 0) {
            return a ? -1 : 0
        }
        if (n > 4) {
            r = i;
            n <<= 3;
            while (((+r ^ s) & 128) == 0) {
                r = +r << 1;
                --n
            }
            r = "(" + n + " bit)\n"
        }
        if (a) {
            i = i - 256
        }
        var o = new Int10(i);
        for (var h = t + 1; h < e; ++h) {
            o.mulAdd(256, this.get(h))
        }
        return r + o.toString()
    }
    ;
    i.prototype.parseBitString = function(t, e, i) {
        var a = this.get(t);
        var s = (e - t - 1 << 3) - a;
        var n = "(" + s + " bit)\n";
        var r = "";
        for (var o = t + 1; o < e; ++o) {
            var h = this.get(o);
            var c = o == e - 1 ? a : 0;
            for (var l = 7; l >= c; --l) {
                r += h >> l & 1 ? "1" : "0"
            }
            if (r.length > i) {
                return n + stringCut(r, i)
            }
        }
        return n + r
    }
    ;
    i.prototype.parseOctetString = function(t, e, i) {
        if (this.isASCII(t, e)) {
            return stringCut(this.parseStringISO(t, e), i)
        }
        var a = e - t;
        var s = "(" + a + " byte)\n";
        i /= 2;
        if (a > i) {
            e = t + i
        }
        for (var n = t; n < e; ++n) {
            s += this.hexByte(this.get(n))
        }
        if (a > i) {
            s += ellipsis
        }
        return s
    }
    ;
    i.prototype.parseOID = function(t, e, i) {
        var a = "";
        var s = new Int10;
        var n = 0;
        for (var r = t; r < e; ++r) {
            var o = this.get(r);
            s.mulAdd(128, o & 127);
            n += 7;
            if (!(o & 128)) {
                if (a === "") {
                    s = s.simplify();
                    if (s instanceof Int10) {
                        s.sub(80);
                        a = "2." + s.toString()
                    } else {
                        var h = s < 80 ? s < 40 ? 0 : 1 : 2;
                        a = h + "." + (s - h * 40)
                    }
                } else {
                    a += "." + s.toString()
                }
                if (a.length > i) {
                    return stringCut(a, i)
                }
                s = new Int10;
                n = 0
            }
        }
        if (n > 0) {
            a += ".incomplete"
        }
        return a
    }
    ;
    return i
}();
var ASN1 = function() {
    function c(t, e, i, a, s) {
        if (!(a instanceof ASN1Tag)) {
            throw new Error("Invalid tag value.")
        }
        this.stream = t;
        this.header = e;
        this.length = i;
        this.tag = a;
        this.sub = s
    }
    c.prototype.typeName = function() {
        switch (this.tag.tagClass) {
        case 0:
            switch (this.tag.tagNumber) {
            case 0:
                return "EOC";
            case 1:
                return "BOOLEAN";
            case 2:
                return "INTEGER";
            case 3:
                return "BIT_STRING";
            case 4:
                return "OCTET_STRING";
            case 5:
                return "NULL";
            case 6:
                return "OBJECT_IDENTIFIER";
            case 7:
                return "ObjectDescriptor";
            case 8:
                return "EXTERNAL";
            case 9:
                return "REAL";
            case 10:
                return "ENUMERATED";
            case 11:
                return "EMBEDDED_PDV";
            case 12:
                return "UTF8String";
            case 16:
                return "SEQUENCE";
            case 17:
                return "SET";
            case 18:
                return "NumericString";
            case 19:
                return "PrintableString";
            case 20:
                return "TeletexString";
            case 21:
                return "VideotexString";
            case 22:
                return "IA5String";
            case 23:
                return "UTCTime";
            case 24:
                return "GeneralizedTime";
            case 25:
                return "GraphicString";
            case 26:
                return "VisibleString";
            case 27:
                return "GeneralString";
            case 28:
                return "UniversalString";
            case 30:
                return "BMPString"
            }
            return "Universal_" + this.tag.tagNumber.toString();
        case 1:
            return "Application_" + this.tag.tagNumber.toString();
        case 2:
            return "[" + this.tag.tagNumber.toString() + "]";
        case 3:
            return "Private_" + this.tag.tagNumber.toString()
        }
    }
    ;
    c.prototype.content = function(t) {
        if (this.tag === undefined) {
            return null
        }
        if (t === undefined) {
            t = Infinity
        }
        var e = this.posContent();
        var i = Math.abs(this.length);
        if (!this.tag.isUniversal()) {
            if (this.sub !== null) {
                return "(" + this.sub.length + " elem)"
            }
            return this.stream.parseOctetString(e, e + i, t)
        }
        switch (this.tag.tagNumber) {
        case 1:
            return this.stream.get(e) === 0 ? "false" : "true";
        case 2:
            return this.stream.parseInteger(e, e + i);
        case 3:
            return this.sub ? "(" + this.sub.length + " elem)" : this.stream.parseBitString(e, e + i, t);
        case 4:
            return this.sub ? "(" + this.sub.length + " elem)" : this.stream.parseOctetString(e, e + i, t);
        case 6:
            return this.stream.parseOID(e, e + i, t);
        case 16:
        case 17:
            if (this.sub !== null) {
                return "(" + this.sub.length + " elem)"
            } else {
                return "(no elem)"
            }
        case 12:
            return stringCut(this.stream.parseStringUTF(e, e + i), t);
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 26:
            return stringCut(this.stream.parseStringISO(e, e + i), t);
        case 30:
            return stringCut(this.stream.parseStringBMP(e, e + i), t);
        case 23:
        case 24:
            return this.stream.parseTime(e, e + i, this.tag.tagNumber == 23)
        }
        return null
    }
    ;
    c.prototype.toString = function() {
        return this.typeName() + "@" + this.stream.pos + "[header:" + this.header + ",length:" + this.length + ",sub:" + (this.sub === null ? "null" : this.sub.length) + "]"
    }
    ;
    c.prototype.toPrettyString = function(t) {
        if (t === undefined) {
            t = ""
        }
        var e = t + this.typeName() + " @" + this.stream.pos;
        if (this.length >= 0) {
            e += "+"
        }
        e += this.length;
        if (this.tag.tagConstructed) {
            e += " (constructed)"
        } else if (this.tag.isUniversal() && (this.tag.tagNumber == 3 || this.tag.tagNumber == 4) && this.sub !== null) {
            e += " (encapsulates)"
        }
        e += "\n";
        if (this.sub !== null) {
            t += "  ";
            for (var i = 0, a = this.sub.length; i < a; ++i) {
                e += this.sub[i].toPrettyString(t)
            }
        }
        return e
    }
    ;
    c.prototype.posStart = function() {
        return this.stream.pos
    }
    ;
    c.prototype.posContent = function() {
        return this.stream.pos + this.header
    }
    ;
    c.prototype.posEnd = function() {
        return this.stream.pos + this.header + Math.abs(this.length)
    }
    ;
    c.prototype.toHexString = function() {
        return this.stream.hexDump(this.posStart(), this.posEnd(), true)
    }
    ;
    c.decodeLength = function(t) {
        var e = t.get();
        var i = e & 127;
        if (i == e) {
            return i
        }
        if (i > 6) {
            throw new Error("Length over 48 bits not supported at position " + (t.pos - 1))
        }
        if (i === 0) {
            return null
        }
        e = 0;
        for (var a = 0; a < i; ++a) {
            e = e * 256 + t.get()
        }
        return e
    }
    ;
    c.prototype.getHexStringValue = function() {
        var t = this.toHexString();
        var e = this.header * 2;
        var i = this.length * 2;
        return t.substr(e, i)
    }
    ;
    c.decode = function(t) {
        var a;
        if (!(t instanceof Stream)) {
            a = new Stream(t,0)
        } else {
            a = t
        }
        var e = new Stream(a);
        var i = new ASN1Tag(a);
        var s = c.decodeLength(a);
        var n = a.pos;
        var r = n - e.pos;
        var o = null;
        var h = function() {
            var t = [];
            if (s !== null) {
                var e = n + s;
                while (a.pos < e) {
                    t[t.length] = c.decode(a)
                }
                if (a.pos != e) {
                    throw new Error("Content size is not correct for container starting at offset " + n)
                }
            } else {
                try {
                    for (; ; ) {
                        var i = c.decode(a);
                        if (i.tag.isEOC()) {
                            break
                        }
                        t[t.length] = i
                    }
                    s = n - a.pos
                } catch (t) {
                    throw new Error("Exception while decoding undefined length content: " + t)
                }
            }
            return t
        };
        if (i.tagConstructed) {
            o = h()
        } else if (i.isUniversal() && (i.tagNumber == 3 || i.tagNumber == 4)) {
            try {
                if (i.tagNumber == 3) {
                    if (a.get() != 0) {
                        throw new Error("BIT STRINGs with unused bits cannot encapsulate.")
                    }
                }
                o = h();
                for (var l = 0; l < o.length; ++l) {
                    if (o[l].tag.isEOC()) {
                        throw new Error("EOC is not supposed to be actual content.")
                    }
                }
            } catch (t) {
                o = null
            }
        }
        if (o === null) {
            if (s === null) {
                throw new Error("We can't skip over an invalid tag with undefined length at offset " + n)
            }
            a.pos = n + Math.abs(s)
        }
        return new c(e,r,s,i,o)
    }
    ;
    return c
}();
var ASN1Tag = function() {
    function t(t) {
        var e = t.get();
        this.tagClass = e >> 6;
        this.tagConstructed = (e & 32) !== 0;
        this.tagNumber = e & 31;
        if (this.tagNumber == 31) {
            var i = new Int10;
            do {
                e = t.get();
                i.mulAdd(128, e & 127)
            } while (e & 128);
            this.tagNumber = i.simplify()
        }
    }
    t.prototype.isUniversal = function() {
        return this.tagClass === 0
    }
    ;
    t.prototype.isEOC = function() {
        return this.tagClass === 0 && this.tagNumber === 0
    }
    ;
    return t
}();
var decoder;
var Hex = {
    decode: function(t) {
        var e;
        if (decoder === undefined) {
            var i = "0123456789ABCDEF";
            var a = " \f\n\r\t \u2028\u2029";
            decoder = {};
            for (e = 0; e < 16; ++e) {
                decoder[i.charAt(e)] = e
            }
            i = i.toLowerCase();
            for (e = 10; e < 16; ++e) {
                decoder[i.charAt(e)] = e
            }
            for (e = 0; e < a.length; ++e) {
                decoder[a.charAt(e)] = -1
            }
        }
        var s = [];
        var n = 0;
        var r = 0;
        for (e = 0; e < t.length; ++e) {
            var o = t.charAt(e);
            if (o == "=") {
                break
            }
            o = decoder[o];
            if (o == -1) {
                continue
            }
            if (o === undefined) {
                throw new Error("Illegal character at offset " + e)
            }
            n |= o;
            if (++r >= 2) {
                s[s.length] = n;
                n = 0;
                r = 0
            } else {
                n <<= 4
            }
        }
        if (r) {
            throw new Error("Hex encoding incomplete: 4 bits missing")
        }
        return s
    }
};
var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var b64pad = "=";

function hex2b64(t) {
    var e;
    var i;
    var a = "";
    for (e = 0; e + 3 <= t.length; e += 3) {
        i = parseInt(t.substring(e, e + 3), 16);
        a += b64map.charAt(i >> 6) + b64map.charAt(i & 63)
    }
    if (e + 1 == t.length) {
        i = parseInt(t.substring(e, e + 1), 16);
        a += b64map.charAt(i << 2)
    } else if (e + 2 == t.length) {
        i = parseInt(t.substring(e, e + 2), 16);
        a += b64map.charAt(i >> 2) + b64map.charAt((i & 3) << 4)
    }
    while ((a.length & 3) > 0) {
        a += b64pad
    }
    return a
}

function b64tohex(t) {
    var e = "";
    var i;
    var a = 0;
    var s = 0;
    for (i = 0; i < t.length; ++i) {
        if (t.charAt(i) == b64pad) {
            break
        }
        var n = b64map.indexOf(t.charAt(i));
        if (n < 0) {
            continue
        }
        if (a == 0) {
            e += int2char(n >> 2);
            s = n & 3;
            a = 1
        } else if (a == 1) {
            e += int2char(s << 2 | n >> 4);
            s = n & 15;
            a = 2
        } else if (a == 2) {
            e += int2char(s);
            e += int2char(n >> 2);
            s = n & 3;
            a = 3
        } else {
            e += int2char(s << 2 | n >> 4);
            e += int2char(n & 15);
            a = 0
        }
    }
    if (a == 1) {
        e += int2char(s << 2)
    }
    return e
}

function b64toBA(t) {
    var e = b64tohex(t);
    var i;
    var a = [];
    for (i = 0; 2 * i < e.length; ++i) {
        a[i] = parseInt(e.substring(2 * i, 2 * i + 2), 16)
    }
    return a
}
var Arcfour = function() {
    function t() {
        this.i = 0;
        this.j = 0;
        this.S = []
    }
    t.prototype.init = function(t) {
        var e;
        var i;
        var a;
        for (e = 0; e < 256; ++e) {
            this.S[e] = e
        }
        i = 0;
        for (e = 0; e < 256; ++e) {
            i = i + this.S[e] + t[e % t.length] & 255;
            a = this.S[e];
            this.S[e] = this.S[i];
            this.S[i] = a
        }
        this.i = 0;
        this.j = 0
    }
    ;
    t.prototype.next = function() {
        var t;
        this.i = this.i + 1 & 255;
        this.j = this.j + this.S[this.i] & 255;
        t = this.S[this.i];
        this.S[this.i] = this.S[this.j];
        this.S[this.j] = t;
        return this.S[t + this.S[this.i] & 255]
    }
    ;
    return t
}();

function prng_newstate() {
    return new Arcfour
}
var rng_psize = 256;
var rng_state;
var rng_pool = null;
var rng_pptr;
if (rng_pool == null) {
    rng_pool = [];
    rng_pptr = 0;
    var t = void 0;
    var z = new Uint32Array(256);
    for (t = 0; t < 256; ++t) {
        rng_pool[rng_pptr++] = Math.floor(Math.random() * 256) & 255
    }
}

function rng_get_byte() {
    if (rng_state == null) {
        rng_state = prng_newstate();
        while (rng_pptr < rng_psize) {
            var t = Math.floor(65536 * Math.random());
            rng_pool[rng_pptr++] = t & 255
        }
        rng_state.init(rng_pool);
        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
            rng_pool[rng_pptr] = 0
        }
        rng_pptr = 0
    }
    return rng_state.next()
}
var SecureRandom = function() {
    function t() {}
    t.prototype.nextBytes = function(t) {
        for (var e = 0; e < t.length; ++e) {
            t[e] = rng_get_byte()
        }
    }
    ;
    return t
}();
var dbits;
var canary = 0xdeadbeefcafe;
var j_lm = (canary & 16777215) == 15715070;
var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
var BigInteger = function() {
    function I(t, e, i) {
        if (t != null) {
            if ("number" == typeof t) {
                this.fromNumber(t, e, i)
            } else if (e == null && "string" != typeof t) {
                this.fromString(t, 256)
            } else {
                this.fromString(t, e)
            }
        }
    }
    I.prototype.toString = function(t) {
        if (this.s < 0) {
            return "-" + this.negate().toString(t)
        }
        var e;
        if (t == 16) {
            e = 4
        } else if (t == 8) {
            e = 3
        } else if (t == 2) {
            e = 1
        } else if (t == 32) {
            e = 5
        } else if (t == 4) {
            e = 2
        } else {
            return this.toRadix(t)
        }
        var i = (1 << e) - 1;
        var a;
        var s = false;
        var n = "";
        var r = this.t;
        var o = this.DB - r * this.DB % e;
        if (r-- > 0) {
            if (o < this.DB && (a = this[r] >> o) > 0) {
                s = true;
                n = int2char(a)
            }
            while (r >= 0) {
                if (o < e) {
                    a = (this[r] & (1 << o) - 1) << e - o;
                    a |= this[--r] >> (o += this.DB - e)
                } else {
                    a = this[r] >> (o -= e) & i;
                    if (o <= 0) {
                        o += this.DB;
                        --r
                    }
                }
                if (a > 0) {
                    s = true
                }
                if (s) {
                    n += int2char(a)
                }
            }
        }
        return s ? n : "0"
    }
    ;
    I.prototype.negate = function() {
        var t = nbi();
        I.ZERO.subTo(this, t);
        return t
    }
    ;
    I.prototype.abs = function() {
        return this.s < 0 ? this.negate() : this
    }
    ;
    I.prototype.compareTo = function(t) {
        var e = this.s - t.s;
        if (e != 0) {
            return e
        }
        var i = this.t;
        e = i - t.t;
        if (e != 0) {
            return this.s < 0 ? -e : e
        }
        while (--i >= 0) {
            if ((e = this[i] - t[i]) != 0) {
                return e
            }
        }
        return 0
    }
    ;
    I.prototype.bitLength = function() {
        if (this.t <= 0) {
            return 0
        }
        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM)
    }
    ;
    I.prototype.mod = function(t) {
        var e = nbi();
        this.abs().divRemTo(t, null, e);
        if (this.s < 0 && e.compareTo(I.ZERO) > 0) {
            t.subTo(e, e)
        }
        return e
    }
    ;
    I.prototype.modPowInt = function(t, e) {
        var i;
        if (t < 256 || e.isEven()) {
            i = new Classic(e)
        } else {
            i = new Montgomery(e)
        }
        return this.exp(t, i)
    }
    ;
    I.prototype.clone = function() {
        var t = nbi();
        this.copyTo(t);
        return t
    }
    ;
    I.prototype.intValue = function() {
        if (this.s < 0) {
            if (this.t == 1) {
                return this[0] - this.DV
            } else if (this.t == 0) {
                return -1
            }
        } else if (this.t == 1) {
            return this[0]
        } else if (this.t == 0) {
            return 0
        }
        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0]
    }
    ;
    I.prototype.byteValue = function() {
        return this.t == 0 ? this.s : this[0] << 24 >> 24
    }
    ;
    I.prototype.shortValue = function() {
        return this.t == 0 ? this.s : this[0] << 16 >> 16
    }
    ;
    I.prototype.signum = function() {
        if (this.s < 0) {
            return -1
        } else if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
            return 0
        } else {
            return 1
        }
    }
    ;
    I.prototype.toByteArray = function() {
        var t = this.t;
        var e = [];
        e[0] = this.s;
        var i = this.DB - t * this.DB % 8;
        var a;
        var s = 0;
        if (t-- > 0) {
            if (i < this.DB && (a = this[t] >> i) != (this.s & this.DM) >> i) {
                e[s++] = a | this.s << this.DB - i
            }
            while (t >= 0) {
                if (i < 8) {
                    a = (this[t] & (1 << i) - 1) << 8 - i;
                    a |= this[--t] >> (i += this.DB - 8)
                } else {
                    a = this[t] >> (i -= 8) & 255;
                    if (i <= 0) {
                        i += this.DB;
                        --t
                    }
                }
                if ((a & 128) != 0) {
                    a |= -256
                }
                if (s == 0 && (this.s & 128) != (a & 128)) {
                    ++s
                }
                if (s > 0 || a != this.s) {
                    e[s++] = a
                }
            }
        }
        return e
    }
    ;
    I.prototype.equals = function(t) {
        return this.compareTo(t) == 0
    }
    ;
    I.prototype.min = function(t) {
        return this.compareTo(t) < 0 ? this : t
    }
    ;
    I.prototype.max = function(t) {
        return this.compareTo(t) > 0 ? this : t
    }
    ;
    I.prototype.and = function(t) {
        var e = nbi();
        this.bitwiseTo(t, op_and, e);
        return e
    }
    ;
    I.prototype.or = function(t) {
        var e = nbi();
        this.bitwiseTo(t, op_or, e);
        return e
    }
    ;
    I.prototype.xor = function(t) {
        var e = nbi();
        this.bitwiseTo(t, op_xor, e);
        return e
    }
    ;
    I.prototype.andNot = function(t) {
        var e = nbi();
        this.bitwiseTo(t, op_andnot, e);
        return e
    }
    ;
    I.prototype.not = function() {
        var t = nbi();
        for (var e = 0; e < this.t; ++e) {
            t[e] = this.DM & ~this[e]
        }
        t.t = this.t;
        t.s = ~this.s;
        return t
    }
    ;
    I.prototype.shiftLeft = function(t) {
        var e = nbi();
        if (t < 0) {
            this.rShiftTo(-t, e)
        } else {
            this.lShiftTo(t, e)
        }
        return e
    }
    ;
    I.prototype.shiftRight = function(t) {
        var e = nbi();
        if (t < 0) {
            this.lShiftTo(-t, e)
        } else {
            this.rShiftTo(t, e)
        }
        return e
    }
    ;
    I.prototype.getLowestSetBit = function() {
        for (var t = 0; t < this.t; ++t) {
            if (this[t] != 0) {
                return t * this.DB + lbit(this[t])
            }
        }
        if (this.s < 0) {
            return this.t * this.DB
        }
        return -1
    }
    ;
    I.prototype.bitCount = function() {
        var t = 0;
        var e = this.s & this.DM;
        for (var i = 0; i < this.t; ++i) {
            t += cbit(this[i] ^ e)
        }
        return t
    }
    ;
    I.prototype.testBit = function(t) {
        var e = Math.floor(t / this.DB);
        if (e >= this.t) {
            return this.s != 0
        }
        return (this[e] & 1 << t % this.DB) != 0
    }
    ;
    I.prototype.setBit = function(t) {
        return this.changeBit(t, op_or)
    }
    ;
    I.prototype.clearBit = function(t) {
        return this.changeBit(t, op_andnot)
    }
    ;
    I.prototype.flipBit = function(t) {
        return this.changeBit(t, op_xor)
    }
    ;
    I.prototype.add = function(t) {
        var e = nbi();
        this.addTo(t, e);
        return e
    }
    ;
    I.prototype.subtract = function(t) {
        var e = nbi();
        this.subTo(t, e);
        return e
    }
    ;
    I.prototype.multiply = function(t) {
        var e = nbi();
        this.multiplyTo(t, e);
        return e
    }
    ;
    I.prototype.divide = function(t) {
        var e = nbi();
        this.divRemTo(t, e, null);
        return e
    }
    ;
    I.prototype.remainder = function(t) {
        var e = nbi();
        this.divRemTo(t, null, e);
        return e
    }
    ;
    I.prototype.divideAndRemainder = function(t) {
        var e = nbi();
        var i = nbi();
        this.divRemTo(t, e, i);
        return [e, i]
    }
    ;
    I.prototype.modPow = function(t, c) {
        var e = t.bitLength();
        var i;
        var a = nbv(1);
        var s;
        if (e <= 0) {
            return a
        } else if (e < 18) {
            i = 1
        } else if (e < 48) {
            i = 3
        } else if (e < 144) {
            i = 4
        } else if (e < 768) {
            i = 5
        } else {
            i = 6
        }
        if (e < 8) {
            s = new Classic(c)
        } else if (c.isEven()) {
            s = new Barrett(c)
        } else {
            s = new Montgomery(c)
        }
        var n = [];
        var r = 3;
        var u = i - 1;
        var f = (1 << i) - 1;
        n[1] = s.convert(this);
        if (i > 1) {
            var d = nbi();
            s.sqrTo(n[1], d);
            while (r <= f) {
                n[r] = nbi();
                s.mulTo(d, n[r - 2], n[r]);
                r += 2
            }
        }
        var o = t.t - 1;
        var h;
        var m = true;
        var l = nbi();
        var g;
        e = nbits(t[o]) - 1;
        while (o >= 0) {
            if (e >= u) {
                h = t[o] >> e - u & f
            } else {
                h = (t[o] & (1 << e + 1) - 1) << u - e;
                if (o > 0) {
                    h |= t[o - 1] >> this.DB + e - u
                }
            }
            r = i;
            while ((h & 1) == 0) {
                h >>= 1;
                --r
            }
            if ((e -= r) < 0) {
                e += this.DB;
                --o
            }
            if (m) {
                n[h].copyTo(a);
                m = false
            } else {
                while (r > 1) {
                    s.sqrTo(a, l);
                    s.sqrTo(l, a);
                    r -= 2
                }
                if (r > 0) {
                    s.sqrTo(a, l)
                } else {
                    g = a;
                    a = l;
                    l = g
                }
                s.mulTo(l, n[h], a)
            }
            while (o >= 0 && (t[o] & 1 << e) == 0) {
                s.sqrTo(a, l);
                g = a;
                a = l;
                l = g;
                if (--e < 0) {
                    e = this.DB - 1;
                    --o
                }
            }
        }
        return s.revert(a)
    }
    ;
    I.prototype.modInverse = function(t) {
        var e = t.isEven();
        if (this.isEven() && e || t.signum() == 0) {
            return I.ZERO
        }
        var i = t.clone();
        var a = this.clone();
        var s = nbv(1);
        var n = nbv(0);
        var r = nbv(0);
        var o = nbv(1);
        while (i.signum() != 0) {
            while (i.isEven()) {
                i.rShiftTo(1, i);
                if (e) {
                    if (!s.isEven() || !n.isEven()) {
                        s.addTo(this, s);
                        n.subTo(t, n)
                    }
                    s.rShiftTo(1, s)
                } else if (!n.isEven()) {
                    n.subTo(t, n)
                }
                n.rShiftTo(1, n)
            }
            while (a.isEven()) {
                a.rShiftTo(1, a);
                if (e) {
                    if (!r.isEven() || !o.isEven()) {
                        r.addTo(this, r);
                        o.subTo(t, o)
                    }
                    r.rShiftTo(1, r)
                } else if (!o.isEven()) {
                    o.subTo(t, o)
                }
                o.rShiftTo(1, o)
            }
            if (i.compareTo(a) >= 0) {
                i.subTo(a, i);
                if (e) {
                    s.subTo(r, s)
                }
                n.subTo(o, n)
            } else {
                a.subTo(i, a);
                if (e) {
                    r.subTo(s, r)
                }
                o.subTo(n, o)
            }
        }
        if (a.compareTo(I.ONE) != 0) {
            return I.ZERO
        }
        if (o.compareTo(t) >= 0) {
            return o.subtract(t)
        }
        if (o.signum() < 0) {
            o.addTo(t, o)
        } else {
            return o
        }
        if (o.signum() < 0) {
            return o.add(t)
        } else {
            return o
        }
    }
    ;
    I.prototype.pow = function(t) {
        return this.exp(t, new NullExp)
    }
    ;
    I.prototype.gcd = function(t) {
        var e = this.s < 0 ? this.negate() : this.clone();
        var i = t.s < 0 ? t.negate() : t.clone();
        if (e.compareTo(i) < 0) {
            var a = e;
            e = i;
            i = a
        }
        var s = e.getLowestSetBit();
        var n = i.getLowestSetBit();
        if (n < 0) {
            return e
        }
        if (s < n) {
            n = s
        }
        if (n > 0) {
            e.rShiftTo(n, e);
            i.rShiftTo(n, i)
        }
        while (e.signum() > 0) {
            if ((s = e.getLowestSetBit()) > 0) {
                e.rShiftTo(s, e)
            }
            if ((s = i.getLowestSetBit()) > 0) {
                i.rShiftTo(s, i)
            }
            if (e.compareTo(i) >= 0) {
                e.subTo(i, e);
                e.rShiftTo(1, e)
            } else {
                i.subTo(e, i);
                i.rShiftTo(1, i)
            }
        }
        if (n > 0) {
            i.lShiftTo(n, i)
        }
        return i
    }
    ;
    I.prototype.isProbablePrime = function(t) {
        var e;
        var i = this.abs();
        if (i.t == 1 && i[0] <= lowprimes[lowprimes.length - 1]) {
            for (e = 0; e < lowprimes.length; ++e) {
                if (i[0] == lowprimes[e]) {
                    return true
                }
            }
            return false
        }
        if (i.isEven()) {
            return false
        }
        e = 1;
        while (e < lowprimes.length) {
            var a = lowprimes[e];
            var s = e + 1;
            while (s < lowprimes.length && a < lplim) {
                a *= lowprimes[s++]
            }
            a = i.modInt(a);
            while (e < s) {
                if (a % lowprimes[e++] == 0) {
                    return false
                }
            }
        }
        return i.millerRabin(t)
    }
    ;
    I.prototype.copyTo = function(t) {
        for (var e = this.t - 1; e >= 0; --e) {
            t[e] = this[e]
        }
        t.t = this.t;
        t.s = this.s
    }
    ;
    I.prototype.fromInt = function(t) {
        this.t = 1;
        this.s = t < 0 ? -1 : 0;
        if (t > 0) {
            this[0] = t
        } else if (t < -1) {
            this[0] = t + this.DV
        } else {
            this.t = 0
        }
    }
    ;
    I.prototype.fromString = function(t, e) {
        var i;
        if (e == 16) {
            i = 4
        } else if (e == 8) {
            i = 3
        } else if (e == 256) {
            i = 8
        } else if (e == 2) {
            i = 1
        } else if (e == 32) {
            i = 5
        } else if (e == 4) {
            i = 2
        } else {
            this.fromRadix(t, e);
            return
        }
        this.t = 0;
        this.s = 0;
        var a = t.length;
        var s = false;
        var n = 0;
        while (--a >= 0) {
            var r = i == 8 ? +t[a] & 255 : intAt(t, a);
            if (r < 0) {
                if (t.charAt(a) == "-") {
                    s = true
                }
                continue
            }
            s = false;
            if (n == 0) {
                this[this.t++] = r
            } else if (n + i > this.DB) {
                this[this.t - 1] |= (r & (1 << this.DB - n) - 1) << n;
                this[this.t++] = r >> this.DB - n
            } else {
                this[this.t - 1] |= r << n
            }
            n += i;
            if (n >= this.DB) {
                n -= this.DB
            }
        }
        if (i == 8 && (+t[0] & 128) != 0) {
            this.s = -1;
            if (n > 0) {
                this[this.t - 1] |= (1 << this.DB - n) - 1 << n
            }
        }
        this.clamp();
        if (s) {
            I.ZERO.subTo(this, this)
        }
    }
    ;
    I.prototype.clamp = function() {
        var t = this.s & this.DM;
        while (this.t > 0 && this[this.t - 1] == t) {
            --this.t
        }
    }
    ;
    I.prototype.dlShiftTo = function(t, e) {
        var i;
        for (i = this.t - 1; i >= 0; --i) {
            e[i + t] = this[i]
        }
        for (i = t - 1; i >= 0; --i) {
            e[i] = 0
        }
        e.t = this.t + t;
        e.s = this.s
    }
    ;
    I.prototype.drShiftTo = function(t, e) {
        for (var i = t; i < this.t; ++i) {
            e[i - t] = this[i]
        }
        e.t = Math.max(this.t - t, 0);
        e.s = this.s
    }
    ;
    I.prototype.lShiftTo = function(t, e) {
        var i = t % this.DB;
        var a = this.DB - i;
        var s = (1 << a) - 1;
        var n = Math.floor(t / this.DB);
        var r = this.s << i & this.DM;
        for (var o = this.t - 1; o >= 0; --o) {
            e[o + n + 1] = this[o] >> a | r;
            r = (this[o] & s) << i
        }
        for (var o = n - 1; o >= 0; --o) {
            e[o] = 0
        }
        e[n] = r;
        e.t = this.t + n + 1;
        e.s = this.s;
        e.clamp()
    }
    ;
    I.prototype.rShiftTo = function(t, e) {
        e.s = this.s;
        var i = Math.floor(t / this.DB);
        if (i >= this.t) {
            e.t = 0;
            return
        }
        var a = t % this.DB;
        var s = this.DB - a;
        var n = (1 << a) - 1;
        e[0] = this[i] >> a;
        for (var r = i + 1; r < this.t; ++r) {
            e[r - i - 1] |= (this[r] & n) << s;
            e[r - i] = this[r] >> a
        }
        if (a > 0) {
            e[this.t - i - 1] |= (this.s & n) << s
        }
        e.t = this.t - i;
        e.clamp()
    }
    ;
    I.prototype.subTo = function(t, e) {
        var i = 0;
        var a = 0;
        var s = Math.min(t.t, this.t);
        while (i < s) {
            a += this[i] - t[i];
            e[i++] = a & this.DM;
            a >>= this.DB
        }
        if (t.t < this.t) {
            a -= t.s;
            while (i < this.t) {
                a += this[i];
                e[i++] = a & this.DM;
                a >>= this.DB
            }
            a += this.s
        } else {
            a += this.s;
            while (i < t.t) {
                a -= t[i];
                e[i++] = a & this.DM;
                a >>= this.DB
            }
            a -= t.s
        }
        e.s = a < 0 ? -1 : 0;
        if (a < -1) {
            e[i++] = this.DV + a
        } else if (a > 0) {
            e[i++] = a
        }
        e.t = i;
        e.clamp()
    }
    ;
    I.prototype.multiplyTo = function(t, e) {
        var i = this.abs();
        var a = t.abs();
        var s = i.t;
        e.t = s + a.t;
        while (--s >= 0) {
            e[s] = 0
        }
        for (s = 0; s < a.t; ++s) {
            e[s + i.t] = i.am(0, a[s], e, s, 0, i.t)
        }
        e.s = 0;
        e.clamp();
        if (this.s != t.s) {
            I.ZERO.subTo(e, e)
        }
    }
    ;
    I.prototype.squareTo = function(t) {
        var e = this.abs();
        var i = t.t = 2 * e.t;
        while (--i >= 0) {
            t[i] = 0
        }
        for (i = 0; i < e.t - 1; ++i) {
            var a = e.am(i, e[i], t, 2 * i, 0, 1);
            if ((t[i + e.t] += e.am(i + 1, 2 * e[i], t, 2 * i + 1, a, e.t - i - 1)) >= e.DV) {
                t[i + e.t] -= e.DV;
                t[i + e.t + 1] = 1
            }
        }
        if (t.t > 0) {
            t[t.t - 1] += e.am(i, e[i], t, 2 * i, 0, 1)
        }
        t.s = 0;
        t.clamp()
    }
    ;
    I.prototype.divRemTo = function(c, t, e) {
        var i = c.abs();
        if (i.t <= 0) {
            return
        }
        var a = this.abs();
        if (a.t < i.t) {
            if (t != null) {
                t.fromInt(0)
            }
            if (e != null) {
                this.copyTo(e)
            }
            return
        }
        if (e == null) {
            e = nbi()
        }
        var s = nbi();
        var u = this.s;
        var f = c.s;
        var n = this.DB - nbits(i[i.t - 1]);
        if (n > 0) {
            i.lShiftTo(n, s);
            a.lShiftTo(n, e)
        } else {
            i.copyTo(s);
            a.copyTo(e)
        }
        var r = s.t;
        var d = s[r - 1];
        if (d == 0) {
            return
        }
        var m = d * (1 << this.F1) + (r > 1 ? s[r - 2] >> this.F2 : 0);
        var g = this.FV / m;
        var v = (1 << this.F1) / m;
        var p = 1 << this.F2;
        var o = e.t;
        var h = o - r;
        var l = t == null ? nbi() : t;
        s.dlShiftTo(h, l);
        if (e.compareTo(l) >= 0) {
            e[e.t++] = 1;
            e.subTo(l, e)
        }
        I.ONE.dlShiftTo(r, l);
        l.subTo(s, s);
        while (s.t < r) {
            s[s.t++] = 0
        }
        while (--h >= 0) {
            var S = e[--o] == d ? this.DM : Math.floor(e[o] * g + (e[o - 1] + p) * v);
            if ((e[o] += s.am(0, S, e, h, 0, r)) < S) {
                s.dlShiftTo(h, l);
                e.subTo(l, e);
                while (e[o] < --S) {
                    e.subTo(l, e)
                }
            }
        }
        if (t != null) {
            e.drShiftTo(r, t);
            if (u != f) {
                I.ZERO.subTo(t, t)
            }
        }
        e.t = r;
        e.clamp();
        if (n > 0) {
            e.rShiftTo(n, e)
        }
        if (u < 0) {
            I.ZERO.subTo(e, e)
        }
    }
    ;
    I.prototype.invDigit = function() {
        if (this.t < 1) {
            return 0
        }
        var t = this[0];
        if ((t & 1) == 0) {
            return 0
        }
        var e = t & 3;
        e = e * (2 - (t & 15) * e) & 15;
        e = e * (2 - (t & 255) * e) & 255;
        e = e * (2 - ((t & 65535) * e & 65535)) & 65535;
        e = e * (2 - t * e % this.DV) % this.DV;
        return e > 0 ? this.DV - e : -e
    }
    ;
    I.prototype.isEven = function() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0
    }
    ;
    I.prototype.exp = function(t, e) {
        if (t > 4294967295 || t < 1) {
            return I.ONE
        }
        var i = nbi();
        var a = nbi();
        var s = e.convert(this);
        var n = nbits(t) - 1;
        s.copyTo(i);
        while (--n >= 0) {
            e.sqrTo(i, a);
            if ((t & 1 << n) > 0) {
                e.mulTo(a, s, i)
            } else {
                var r = i;
                i = a;
                a = r
            }
        }
        return e.revert(i)
    }
    ;
    I.prototype.chunkSize = function(t) {
        return Math.floor(Math.LN2 * this.DB / Math.log(t))
    }
    ;
    I.prototype.toRadix = function(t) {
        if (t == null) {
            t = 10
        }
        if (this.signum() == 0 || t < 2 || t > 36) {
            return "0"
        }
        var e = this.chunkSize(t);
        var i = Math.pow(t, e);
        var a = nbv(i);
        var s = nbi();
        var n = nbi();
        var r = "";
        this.divRemTo(a, s, n);
        while (s.signum() > 0) {
            r = (i + n.intValue()).toString(t).substr(1) + r;
            s.divRemTo(a, s, n)
        }
        return n.intValue().toString(t) + r
    }
    ;
    I.prototype.fromRadix = function(t, e) {
        this.fromInt(0);
        if (e == null) {
            e = 10
        }
        var i = this.chunkSize(e);
        var a = Math.pow(e, i);
        var s = false;
        var n = 0;
        var r = 0;
        for (var o = 0; o < t.length; ++o) {
            var h = intAt(t, o);
            if (h < 0) {
                if (t.charAt(o) == "-" && this.signum() == 0) {
                    s = true
                }
                continue
            }
            r = e * r + h;
            if (++n >= i) {
                this.dMultiply(a);
                this.dAddOffset(r, 0);
                n = 0;
                r = 0
            }
        }
        if (n > 0) {
            this.dMultiply(Math.pow(e, n));
            this.dAddOffset(r, 0)
        }
        if (s) {
            I.ZERO.subTo(this, this)
        }
    }
    ;
    I.prototype.fromNumber = function(t, e, i) {
        if ("number" == typeof e) {
            if (t < 2) {
                this.fromInt(1)
            } else {
                this.fromNumber(t, i);
                if (!this.testBit(t - 1)) {
                    this.bitwiseTo(I.ONE.shiftLeft(t - 1), op_or, this)
                }
                if (this.isEven()) {
                    this.dAddOffset(1, 0)
                }
                while (!this.isProbablePrime(e)) {
                    this.dAddOffset(2, 0);
                    if (this.bitLength() > t) {
                        this.subTo(I.ONE.shiftLeft(t - 1), this)
                    }
                }
            }
        } else {
            var a = [];
            var s = t & 7;
            a.length = (t >> 3) + 1;
            e.nextBytes(a);
            if (s > 0) {
                a[0] &= (1 << s) - 1
            } else {
                a[0] = 0
            }
            this.fromString(a, 256)
        }
    }
    ;
    I.prototype.bitwiseTo = function(t, e, i) {
        var a;
        var s;
        var n = Math.min(t.t, this.t);
        for (a = 0; a < n; ++a) {
            i[a] = e(this[a], t[a])
        }
        if (t.t < this.t) {
            s = t.s & this.DM;
            for (a = n; a < this.t; ++a) {
                i[a] = e(this[a], s)
            }
            i.t = this.t
        } else {
            s = this.s & this.DM;
            for (a = n; a < t.t; ++a) {
                i[a] = e(s, t[a])
            }
            i.t = t.t
        }
        i.s = e(this.s, t.s);
        i.clamp()
    }
    ;
    I.prototype.changeBit = function(t, e) {
        var i = I.ONE.shiftLeft(t);
        this.bitwiseTo(i, e, i);
        return i
    }
    ;
    I.prototype.addTo = function(t, e) {
        var i = 0;
        var a = 0;
        var s = Math.min(t.t, this.t);
        while (i < s) {
            a += this[i] + t[i];
            e[i++] = a & this.DM;
            a >>= this.DB
        }
        if (t.t < this.t) {
            a += t.s;
            while (i < this.t) {
                a += this[i];
                e[i++] = a & this.DM;
                a >>= this.DB
            }
            a += this.s
        } else {
            a += this.s;
            while (i < t.t) {
                a += t[i];
                e[i++] = a & this.DM;
                a >>= this.DB
            }
            a += t.s
        }
        e.s = a < 0 ? -1 : 0;
        if (a > 0) {
            e[i++] = a
        } else if (a < -1) {
            e[i++] = this.DV + a
        }
        e.t = i;
        e.clamp()
    }
    ;
    I.prototype.dMultiply = function(t) {
        this[this.t] = this.am(0, t - 1, this, 0, 0, this.t);
        ++this.t;
        this.clamp()
    }
    ;
    I.prototype.dAddOffset = function(t, e) {
        if (t == 0) {
            return
        }
        while (this.t <= e) {
            this[this.t++] = 0
        }
        this[e] += t;
        while (this[e] >= this.DV) {
            this[e] -= this.DV;
            if (++e >= this.t) {
                this[this.t++] = 0
            }
            ++this[e]
        }
    }
    ;
    I.prototype.multiplyLowerTo = function(t, e, i) {
        var a = Math.min(this.t + t.t, e);
        i.s = 0;
        i.t = a;
        while (a > 0) {
            i[--a] = 0
        }
        for (var s = i.t - this.t; a < s; ++a) {
            i[a + this.t] = this.am(0, t[a], i, a, 0, this.t)
        }
        for (var s = Math.min(t.t, e); a < s; ++a) {
            this.am(0, t[a], i, a, 0, e - a)
        }
        i.clamp()
    }
    ;
    I.prototype.multiplyUpperTo = function(t, e, i) {
        --e;
        var a = i.t = this.t + t.t - e;
        i.s = 0;
        while (--a >= 0) {
            i[a] = 0
        }
        for (a = Math.max(e - this.t, 0); a < t.t; ++a) {
            i[this.t + a - e] = this.am(e - a, t[a], i, 0, 0, this.t + a - e)
        }
        i.clamp();
        i.drShiftTo(1, i)
    }
    ;
    I.prototype.modInt = function(t) {
        if (t <= 0) {
            return 0
        }
        var e = this.DV % t;
        var i = this.s < 0 ? t - 1 : 0;
        if (this.t > 0) {
            if (e == 0) {
                i = this[0] % t
            } else {
                for (var a = this.t - 1; a >= 0; --a) {
                    i = (e * i + this[a]) % t
                }
            }
        }
        return i
    }
    ;
    I.prototype.millerRabin = function(t) {
        var e = this.subtract(I.ONE);
        var i = e.getLowestSetBit();
        if (i <= 0) {
            return false
        }
        var a = e.shiftRight(i);
        t = t + 1 >> 1;
        if (t > lowprimes.length) {
            t = lowprimes.length
        }
        var s = nbi();
        for (var n = 0; n < t; ++n) {
            s.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
            var r = s.modPow(a, this);
            if (r.compareTo(I.ONE) != 0 && r.compareTo(e) != 0) {
                var o = 1;
                while (o++ < i && r.compareTo(e) != 0) {
                    r = r.modPowInt(2, this);
                    if (r.compareTo(I.ONE) == 0) {
                        return false
                    }
                }
                if (r.compareTo(e) != 0) {
                    return false
                }
            }
        }
        return true
    }
    ;
    I.prototype.square = function() {
        var t = nbi();
        this.squareTo(t);
        return t
    }
    ;
    I.prototype.gcda = function(t, e) {
        var i = this.s < 0 ? this.negate() : this.clone();
        var a = t.s < 0 ? t.negate() : t.clone();
        if (i.compareTo(a) < 0) {
            var s = i;
            i = a;
            a = s
        }
        var n = i.getLowestSetBit();
        var r = a.getLowestSetBit();
        if (r < 0) {
            e(i);
            return
        }
        if (n < r) {
            r = n
        }
        if (r > 0) {
            i.rShiftTo(r, i);
            a.rShiftTo(r, a)
        }
        var o = function() {
            if ((n = i.getLowestSetBit()) > 0) {
                i.rShiftTo(n, i)
            }
            if ((n = a.getLowestSetBit()) > 0) {
                a.rShiftTo(n, a)
            }
            if (i.compareTo(a) >= 0) {
                i.subTo(a, i);
                i.rShiftTo(1, i)
            } else {
                a.subTo(i, a);
                a.rShiftTo(1, a)
            }
            if (!(i.signum() > 0)) {
                if (r > 0) {
                    a.lShiftTo(r, a)
                }
                setTimeout(function() {
                    e(a)
                }, 0)
            } else {
                setTimeout(o, 0)
            }
        };
        setTimeout(o, 10)
    }
    ;
    I.prototype.fromNumberAsync = function(t, e, i, a) {
        if ("number" == typeof e) {
            if (t < 2) {
                this.fromInt(1)
            } else {
                this.fromNumber(t, i);
                if (!this.testBit(t - 1)) {
                    this.bitwiseTo(I.ONE.shiftLeft(t - 1), op_or, this)
                }
                if (this.isEven()) {
                    this.dAddOffset(1, 0)
                }
                var s = this;
                var n = function() {
                    s.dAddOffset(2, 0);
                    if (s.bitLength() > t) {
                        s.subTo(I.ONE.shiftLeft(t - 1), s)
                    }
                    if (s.isProbablePrime(e)) {
                        setTimeout(function() {
                            a()
                        }, 0)
                    } else {
                        setTimeout(n, 0)
                    }
                };
                setTimeout(n, 0)
            }
        } else {
            var r = [];
            var o = t & 7;
            r.length = (t >> 3) + 1;
            e.nextBytes(r);
            if (o > 0) {
                r[0] &= (1 << o) - 1
            } else {
                r[0] = 0
            }
            this.fromString(r, 256)
        }
    }
    ;
    return I
}();
var NullExp = function() {
    function t() {}
    t.prototype.convert = function(t) {
        return t
    }
    ;
    t.prototype.revert = function(t) {
        return t
    }
    ;
    t.prototype.mulTo = function(t, e, i) {
        t.multiplyTo(e, i)
    }
    ;
    t.prototype.sqrTo = function(t, e) {
        t.squareTo(e)
    }
    ;
    return t
}();
var Classic = function() {
    function t(t) {
        this.m = t
    }
    t.prototype.convert = function(t) {
        if (t.s < 0 || t.compareTo(this.m) >= 0) {
            return t.mod(this.m)
        } else {
            return t
        }
    }
    ;
    t.prototype.revert = function(t) {
        return t
    }
    ;
    t.prototype.reduce = function(t) {
        t.divRemTo(this.m, null, t)
    }
    ;
    t.prototype.mulTo = function(t, e, i) {
        t.multiplyTo(e, i);
        this.reduce(i)
    }
    ;
    t.prototype.sqrTo = function(t, e) {
        t.squareTo(e);
        this.reduce(e)
    }
    ;
    return t
}();
var Montgomery = function() {
    function t(t) {
        this.m = t;
        this.mp = t.invDigit();
        this.mpl = this.mp & 32767;
        this.mph = this.mp >> 15;
        this.um = (1 << t.DB - 15) - 1;
        this.mt2 = 2 * t.t
    }
    t.prototype.convert = function(t) {
        var e = nbi();
        t.abs().dlShiftTo(this.m.t, e);
        e.divRemTo(this.m, null, e);
        if (t.s < 0 && e.compareTo(BigInteger.ZERO) > 0) {
            this.m.subTo(e, e)
        }
        return e
    }
    ;
    t.prototype.revert = function(t) {
        var e = nbi();
        t.copyTo(e);
        this.reduce(e);
        return e
    }
    ;
    t.prototype.reduce = function(t) {
        while (t.t <= this.mt2) {
            t[t.t++] = 0
        }
        for (var e = 0; e < this.m.t; ++e) {
            var i = t[e] & 32767;
            var a = i * this.mpl + ((i * this.mph + (t[e] >> 15) * this.mpl & this.um) << 15) & t.DM;
            i = e + this.m.t;
            t[i] += this.m.am(0, a, t, e, 0, this.m.t);
            while (t[i] >= t.DV) {
                t[i] -= t.DV;
                t[++i]++
            }
        }
        t.clamp();
        t.drShiftTo(this.m.t, t);
        if (t.compareTo(this.m) >= 0) {
            t.subTo(this.m, t)
        }
    }
    ;
    t.prototype.mulTo = function(t, e, i) {
        t.multiplyTo(e, i);
        this.reduce(i)
    }
    ;
    t.prototype.sqrTo = function(t, e) {
        t.squareTo(e);
        this.reduce(e)
    }
    ;
    return t
}();
var Barrett = function() {
    function t(t) {
        this.m = t;
        this.r2 = nbi();
        this.q3 = nbi();
        BigInteger.ONE.dlShiftTo(2 * t.t, this.r2);
        this.mu = this.r2.divide(t)
    }
    t.prototype.convert = function(t) {
        if (t.s < 0 || t.t > 2 * this.m.t) {
            return t.mod(this.m)
        } else if (t.compareTo(this.m) < 0) {
            return t
        } else {
            var e = nbi();
            t.copyTo(e);
            this.reduce(e);
            return e
        }
    }
    ;
    t.prototype.revert = function(t) {
        return t
    }
    ;
    t.prototype.reduce = function(t) {
        t.drShiftTo(this.m.t - 1, this.r2);
        if (t.t > this.m.t + 1) {
            t.t = this.m.t + 1;
            t.clamp()
        }
        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
        while (t.compareTo(this.r2) < 0) {
            t.dAddOffset(1, this.m.t + 1)
        }
        t.subTo(this.r2, t);
        while (t.compareTo(this.m) >= 0) {
            t.subTo(this.m, t)
        }
    }
    ;
    t.prototype.mulTo = function(t, e, i) {
        t.multiplyTo(e, i);
        this.reduce(i)
    }
    ;
    t.prototype.sqrTo = function(t, e) {
        t.squareTo(e);
        this.reduce(e)
    }
    ;
    return t
}();

function nbi() {
    return new BigInteger(null)
}

function parseBigInt(t, e) {
    return new BigInteger(t,e)
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = function c(t, e, i, a, s, u) {
        var n = e & 32767;
        var r = e >> 15;
        while (--u >= 0) {
            var o = this[t] & 32767;
            var h = this[t++] >> 15;
            var l = r * o + h * n;
            o = n * o + ((l & 32767) << 15) + i[a] + (s & 1073741823);
            s = (o >>> 30) + (l >>> 15) + r * h + (s >>> 30);
            i[a++] = o & 1073741823
        }
        return s
    }
    ;
    dbits = 30
} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = function t(e, i, a, s, n, r) {
        while (--r >= 0) {
            var o = i * this[e++] + a[s] + n;
            n = Math.floor(o / 67108864);
            a[s++] = o & 67108863
        }
        return n
    }
    ;
    dbits = 26
} else {
    BigInteger.prototype.am = function c(t, e, i, a, s, u) {
        var n = e & 16383;
        var r = e >> 14;
        while (--u >= 0) {
            var o = this[t] & 16383;
            var h = this[t++] >> 14;
            var l = r * o + h * n;
            o = n * o + ((l & 16383) << 14) + i[a] + s;
            s = (o >> 28) + (l >> 14) + r * h;
            i[a++] = o & 268435455
        }
        return s
    }
    ;
    dbits = 28
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RC = [];
var rr;
var vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv) {
    BI_RC[rr++] = vv
}
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv
}
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv
}

function intAt(t, e) {
    var i = BI_RC[t.charCodeAt(e)];
    return i == null ? -1 : i
}

function nbv(t) {
    var e = nbi();
    e.fromInt(t);
    return e
}

function nbits(t) {
    var e = 1;
    var i;
    if ((i = t >>> 16) != 0) {
        t = i;
        e += 16
    }
    if ((i = t >> 8) != 0) {
        t = i;
        e += 8
    }
    if ((i = t >> 4) != 0) {
        t = i;
        e += 4
    }
    if ((i = t >> 2) != 0) {
        t = i;
        e += 2
    }
    if ((i = t >> 1) != 0) {
        t = i;
        e += 1
    }
    return e
}
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

function pkcs1pad1(t, e) {
    if (e < t.length + 22) {
        console.error("Message too long for RSA");
        return null
    }
    var i = e - t.length - 6;
    var a = "";
    for (var s = 0; s < i; s += 2) {
        a += "ff"
    }
    var n = "0001" + a + "00" + t;
    return parseBigInt(n, 16)
}

function pkcs1pad2(t, e) {
    if (e < t.length + 11) {
        console.error("Message too long for RSA");
        return null
    }
    var i = [];
    var a = t.length - 1;
    while (a >= 0 && e > 0) {
        var s = t.charCodeAt(a--);
        if (s < 128) {
            i[--e] = s
        } else if (s > 127 && s < 2048) {
            i[--e] = s & 63 | 128;
            i[--e] = s >> 6 | 192
        } else {
            i[--e] = s & 63 | 128;
            i[--e] = s >> 6 & 63 | 128;
            i[--e] = s >> 12 | 224
        }
    }
    i[--e] = 0;
    var n = new SecureRandom;
    var r = [];
    while (e > 2) {
        r[0] = 0;
        while (r[0] == 0) {
            n.nextBytes(r)
        }
        i[--e] = r[0]
    }
    i[--e] = 2;
    i[--e] = 0;
    return new BigInteger(i)
}
var RSAKey = function() {
    function t() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null
    }
    t.prototype.doPublic = function(t) {
        return t.modPowInt(this.e, this.n)
    }
    ;
    t.prototype.doPrivate = function(t) {
        if (this.p == null || this.q == null) {
            return t.modPow(this.d, this.n)
        }
        var e = t.mod(this.p).modPow(this.dmp1, this.p);
        var i = t.mod(this.q).modPow(this.dmq1, this.q);
        while (e.compareTo(i) < 0) {
            e = e.add(this.p)
        }
        return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)
    }
    ;
    t.prototype.setPublic = function(t, e) {
        if (t != null && e != null && t.length > 0 && e.length > 0) {
            this.n = parseBigInt(t, 16);
            this.e = parseInt(e, 16)
        } else {
            console.error("Invalid RSA public key")
        }
    }
    ;
    t.prototype.encrypt = function(t) {
        var e = this.n.bitLength() + 7 >> 3;
        var i = pkcs1pad2(t, e);
        if (i == null) {
            return null
        }
        var a = this.doPublic(i);
        if (a == null) {
            return null
        }
        var s = a.toString(16);
        var n = s.length;
        for (var r = 0; r < e * 2 - n; r++) {
            s = "0" + s
        }
        return s
    }
    ;
    t.prototype.setPrivate = function(t, e, i) {
        if (t != null && e != null && t.length > 0 && e.length > 0) {
            this.n = parseBigInt(t, 16);
            this.e = parseInt(e, 16);
            this.d = parseBigInt(i, 16)
        } else {
            console.error("Invalid RSA private key")
        }
    }
    ;
    t.prototype.setPrivateEx = function(t, e, i, a, s, n, r, o) {
        if (t != null && e != null && t.length > 0 && e.length > 0) {
            this.n = parseBigInt(t, 16);
            this.e = parseInt(e, 16);
            this.d = parseBigInt(i, 16);
            this.p = parseBigInt(a, 16);
            this.q = parseBigInt(s, 16);
            this.dmp1 = parseBigInt(n, 16);
            this.dmq1 = parseBigInt(r, 16);
            this.coeff = parseBigInt(o, 16)
        } else {
            console.error("Invalid RSA private key")
        }
    }
    ;
    t.prototype.generate = function(t, e) {
        var i = new SecureRandom;
        var a = t >> 1;
        this.e = parseInt(e, 16);
        var s = new BigInteger(e,16);
        for (; ; ) {
            for (; ; ) {
                this.p = new BigInteger(t - a,1,i);
                if (this.p.subtract(BigInteger.ONE).gcd(s).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {
                    break
                }
            }
            for (; ; ) {
                this.q = new BigInteger(a,1,i);
                if (this.q.subtract(BigInteger.ONE).gcd(s).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {
                    break
                }
            }
            if (this.p.compareTo(this.q) <= 0) {
                var n = this.p;
                this.p = this.q;
                this.q = n
            }
            var r = this.p.subtract(BigInteger.ONE);
            var o = this.q.subtract(BigInteger.ONE);
            var h = r.multiply(o);
            if (h.gcd(s).compareTo(BigInteger.ONE) == 0) {
                this.n = this.p.multiply(this.q);
                this.d = s.modInverse(h);
                this.dmp1 = this.d.mod(r);
                this.dmq1 = this.d.mod(o);
                this.coeff = this.q.modInverse(this.p);
                break
            }
        }
    }
    ;
    t.prototype.decrypt = function(t) {
        var e = parseBigInt(t, 16);
        var i = this.doPrivate(e);
        if (i == null) {
            return null
        }
        return pkcs1unpad2(i, this.n.bitLength() + 7 >> 3)
    }
    ;
    t.prototype.generateAsync = function(t, e, s) {
        var n = new SecureRandom;
        var r = t >> 1;
        this.e = parseInt(e, 16);
        var o = new BigInteger(e,16);
        var h = this;
        var l = function() {
            var e = function() {
                if (h.p.compareTo(h.q) <= 0) {
                    var t = h.p;
                    h.p = h.q;
                    h.q = t
                }
                var e = h.p.subtract(BigInteger.ONE);
                var i = h.q.subtract(BigInteger.ONE);
                var a = e.multiply(i);
                if (a.gcd(o).compareTo(BigInteger.ONE) == 0) {
                    h.n = h.p.multiply(h.q);
                    h.d = o.modInverse(a);
                    h.dmp1 = h.d.mod(e);
                    h.dmq1 = h.d.mod(i);
                    h.coeff = h.q.modInverse(h.p);
                    setTimeout(function() {
                        s()
                    }, 0)
                } else {
                    setTimeout(l, 0)
                }
            };
            var i = function() {
                h.q = nbi();
                h.q.fromNumberAsync(r, 1, n, function() {
                    h.q.subtract(BigInteger.ONE).gcda(o, function(t) {
                        if (t.compareTo(BigInteger.ONE) == 0 && h.q.isProbablePrime(10)) {
                            setTimeout(e, 0)
                        } else {
                            setTimeout(i, 0)
                        }
                    })
                })
            };
            var a = function() {
                h.p = nbi();
                h.p.fromNumberAsync(t - r, 1, n, function() {
                    h.p.subtract(BigInteger.ONE).gcda(o, function(t) {
                        if (t.compareTo(BigInteger.ONE) == 0 && h.p.isProbablePrime(10)) {
                            setTimeout(i, 0)
                        } else {
                            setTimeout(a, 0)
                        }
                    })
                })
            };
            setTimeout(a, 0)
        };
        setTimeout(l, 0)
    }
    ;
    t.prototype.sign = function(t, e, i) {
        var a = getDigestHeader(i);
        var s = a + e(t).toString();
        var n = pkcs1pad1(s, this.n.bitLength() / 4);
        if (n == null) {
            return null
        }
        var r = this.doPrivate(n);
        if (r == null) {
            return null
        }
        var o = r.toString(16);
        if ((o.length & 1) == 0) {
            return o
        } else {
            return "0" + o
        }
    }
    ;
    t.prototype.verify = function(t, e, i) {
        var a = parseBigInt(e, 16);
        var s = this.doPublic(a);
        if (s == null) {
            return null
        }
        var n = s.toString(16).replace(/^1f+00/, "");
        var r = removeDigestHeader(n);
        return r == i(t).toString()
    }
    ;
    return t
}();

function pkcs1unpad2(t, e) {
    var i = t.toByteArray();
    var a = 0;
    while (a < i.length && i[a] == 0) {
        ++a
    }
    if (i.length - a != e - 1 || i[a] != 2) {
        return null
    }
    ++a;
    while (i[a] != 0) {
        if (++a >= i.length) {
            return null
        }
    }
    var s = "";
    while (++a < i.length) {
        var n = i[a] & 255;
        if (n < 128) {
            s += String.fromCharCode(n)
        } else if (n > 191 && n < 224) {
            s += String.fromCharCode((n & 31) << 6 | i[a + 1] & 63);
            ++a
        } else {
            s += String.fromCharCode((n & 15) << 12 | (i[a + 1] & 63) << 6 | i[a + 2] & 63);
            a += 2
        }
    }
    return s
}
var DIGEST_HEADERS = {
    md2: "3020300c06082a864886f70d020205000410",
    md5: "3020300c06082a864886f70d020505000410",
    sha1: "3021300906052b0e03021a05000414",
    sha224: "302d300d06096086480165030402040500041c",
    sha256: "3031300d060960864801650304020105000420",
    sha384: "3041300d060960864801650304020205000430",
    sha512: "3051300d060960864801650304020305000440",
    ripemd160: "3021300906052b2403020105000414"
};

function getDigestHeader(t) {
    return DIGEST_HEADERS[t] || ""
}

function removeDigestHeader(t) {
    for (var e in DIGEST_HEADERS) {
        if (DIGEST_HEADERS.hasOwnProperty(e)) {
            var i = DIGEST_HEADERS[e];
            var a = i.length;
            if (t.substr(0, a) == i) {
                return t.substr(a)
            }
        }
    }
    return t
}
var JSEncryptRSAKey = function(i) {
    __extends(a, i);

    function a(t) {
        var e = i.call(this) || this;
        if (t) {
            if (typeof t === "string") {
                e.parseKey(t)
            } else if (a.hasPrivateKeyProperty(t) || a.hasPublicKeyProperty(t)) {
                e.parsePropertiesFrom(t)
            }
        }
        return e
    }
    a.prototype.parseKey = function(t) {
        try {
            var e = 0;
            var i = 0;
            var a = /^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/;
            var s = a.test(t) ? Hex.decode(t) : Base64Self.unarmor(t);
            var n = ASN1.decode(s);
            if (n.sub.length === 3) {
                n = n.sub[2].sub[0]
            }
            if (n.sub.length === 9) {
                e = n.sub[1].getHexStringValue();
                this.n = parseBigInt(e, 16);
                i = n.sub[2].getHexStringValue();
                this.e = parseInt(i, 16);
                var r = n.sub[3].getHexStringValue();
                this.d = parseBigInt(r, 16);
                var o = n.sub[4].getHexStringValue();
                this.p = parseBigInt(o, 16);
                var h = n.sub[5].getHexStringValue();
                this.q = parseBigInt(h, 16);
                var c = n.sub[6].getHexStringValue();
                this.dmp1 = parseBigInt(c, 16);
                var u = n.sub[7].getHexStringValue();
                this.dmq1 = parseBigInt(u, 16);
                var f = n.sub[8].getHexStringValue();
                this.coeff = parseBigInt(f, 16)
            } else if (n.sub.length === 2) {
                var d = n.sub[1];
                var l = d.sub[0];
                e = l.sub[0].getHexStringValue();
                this.n = parseBigInt(e, 16);
                i = l.sub[1].getHexStringValue();
                this.e = parseInt(i, 16)
            } else {
                return false
            }
            return true
        } catch (t) {
            return false
        }
    }
    ;
    a.prototype.getPrivateBaseKey = function() {
        var t = {
            array: [new KJUR.asn1.DERInteger({
                int: 0
            }), new KJUR.asn1.DERInteger({
                bigint: this.n
            }), new KJUR.asn1.DERInteger({
                int: this.e
            }), new KJUR.asn1.DERInteger({
                bigint: this.d
            }), new KJUR.asn1.DERInteger({
                bigint: this.p
            }), new KJUR.asn1.DERInteger({
                bigint: this.q
            }), new KJUR.asn1.DERInteger({
                bigint: this.dmp1
            }), new KJUR.asn1.DERInteger({
                bigint: this.dmq1
            }), new KJUR.asn1.DERInteger({
                bigint: this.coeff
            })]
        };
        var e = new KJUR.asn1.DERSequence(t);
        return e.getEncodedHex()
    }
    ;
    a.prototype.getPrivateBaseKeyB64 = function() {
        return hex2b64(this.getPrivateBaseKey())
    }
    ;
    a.prototype.getPublicBaseKey = function() {
        var t = new KJUR.asn1.DERSequence({
            array: [new KJUR.asn1.DERObjectIdentifier({
                oid: "1.2.840.113549.1.1.1"
            }), new KJUR.asn1.DERNull]
        });
        var e = new KJUR.asn1.DERSequence({
            array: [new KJUR.asn1.DERInteger({
                bigint: this.n
            }), new KJUR.asn1.DERInteger({
                int: this.e
            })]
        });
        var i = new KJUR.asn1.DERBitString({
            hex: "00" + e.getEncodedHex()
        });
        var a = new KJUR.asn1.DERSequence({
            array: [t, i]
        });
        return a.getEncodedHex()
    }
    ;
    a.prototype.getPublicBaseKeyB64 = function() {
        return hex2b64(this.getPublicBaseKey())
    }
    ;
    a.wordwrap = function(t, e) {
        e = e || 64;
        if (!t) {
            return t
        }
        var i = "(.{1," + e + "})( +|$\n?)|(.{1," + e + "})";
        return t.match(RegExp(i, "g")).join("\n")
    }
    ;
    a.prototype.getPrivateKey = function() {
        var t = "-----BEGIN RSA PRIVATE KEY-----\n";
        t += a.wordwrap(this.getPrivateBaseKeyB64()) + "\n";
        t += "-----END RSA PRIVATE KEY-----";
        return t
    }
    ;
    a.prototype.getPublicKey = function() {
        var t = "-----BEGIN PUBLIC KEY-----\n";
        t += a.wordwrap(this.getPublicBaseKeyB64()) + "\n";
        t += "-----END PUBLIC KEY-----";
        return t
    }
    ;
    a.hasPublicKeyProperty = function(t) {
        t = t || {};
        return t.hasOwnProperty("n") && t.hasOwnProperty("e")
    }
    ;
    a.hasPrivateKeyProperty = function(t) {
        t = t || {};
        return t.hasOwnProperty("n") && t.hasOwnProperty("e") && t.hasOwnProperty("d") && t.hasOwnProperty("p") && t.hasOwnProperty("q") && t.hasOwnProperty("dmp1") && t.hasOwnProperty("dmq1") && t.hasOwnProperty("coeff")
    }
    ;
    a.prototype.parsePropertiesFrom = function(t) {
        this.n = t.n;
        this.e = t.e;
        if (t.hasOwnProperty("d")) {
            this.d = t.d;
            this.p = t.p;
            this.q = t.q;
            this.dmp1 = t.dmp1;
            this.dmq1 = t.dmq1;
            this.coeff = t.coeff
        }
    }
    ;
    return a
}(RSAKey);
var JSEncrypt = function() {
    function t(t) {
        if (t === void 0) {
            t = {}
        }
        t = t || {};
        this.default_key_size = t.default_key_size ? parseInt(t.default_key_size, 10) : 1024;
        this.default_public_exponent = t.default_public_exponent || "010001";
        this.log = t.log || false;
        this.key = null
    }
    t.prototype.setKey = function(t) {
        if (this.log && this.key) {
            console.warn("A key was already set, overriding existing.")
        }
        this.key = new JSEncryptRSAKey(t)
    }
    ;
    t.prototype.setPrivateKey = function(t) {
        this.setKey(t)
    }
    ;
    t.prototype.setPublicKey = function(t) {
        this.setKey(t)
    }
    ;
    t.prototype.decrypt = function(t) {
        try {
            return this.getKey().decrypt(b64tohex(t))
        } catch (t) {
            return false
        }
    }
    ;
    t.prototype.encrypt = function(t) {
        try {
            return hex2b64(this.getKey().encrypt(t))
        } catch (t) {
            return false
        }
    }
    ;
    t.prototype.sign = function(t, e, i) {
        try {
            return hex2b64(this.getKey().sign(t, e, i))
        } catch (t) {
            return false
        }
    }
    ;
    t.prototype.verify = function(t, e, i) {
        try {
            return this.getKey().verify(t, b64tohex(e), i)
        } catch (t) {
            return false
        }
    }
    ;
    t.prototype.getKey = function(t) {
        if (!this.key) {
            this.key = new JSEncryptRSAKey;
            if (t && {}.toString.call(t) === "[object Function]") {
                this.key.generateAsync(this.default_key_size, this.default_public_exponent, t);
                return
            }
            this.key.generate(this.default_key_size, this.default_public_exponent)
        }
        return this.key
    }
    ;
    t.prototype.getPrivateKey = function() {
        return this.getKey().getPrivateKey()
    }
    ;
    t.prototype.getPrivateKeyB64 = function() {
        return this.getKey().getPrivateBaseKeyB64()
    }
    ;
    t.prototype.getPublicKey = function() {
        return this.getKey().getPublicKey()
    }
    ;
    t.prototype.getPublicKeyB64 = function() {
        return this.getKey().getPublicBaseKeyB64()
    }
    ;
    t.version = "3.2.1";
    return t
}();
var PROTOCOL = SAL_getHTTPProtocol();
var M_IMG_SERVER_URL_V2 = PROTOCOL + "//c1.cgyouxi.com/website/hfplayer/v3/bin/res/";
var autoSaveMaskPath = M_IMG_SERVER_URL_V2 + "autoSave/mask.png";
var autoSaveBgPath = M_IMG_SERVER_URL_V2 + "autoSave/autobg.png";
var autoSaveJxPath = M_IMG_SERVER_URL_V2 + "autoSave/autojx.png";
var autoSaveKsPath = M_IMG_SERVER_URL_V2 + "autoSave/autoks.png";
var addictionPreventionTitleBgPath = M_IMG_SERVER_URL_V2 + "autoSave/addictionTitleBg.png";
var addictionPreventionContentBgPath = M_IMG_SERVER_URL_V2 + "autoSave/addictionContentBg.png";
var adCountDownBG = M_IMG_SERVER_URL_V2 + "adList/adCountDown.png";
var cloudMark = M_IMG_SERVER_URL_V2 + "cloud/mark.png";
var timeMallMark = M_IMG_SERVER_URL_V2 + "cloud/timeShopTip.png";
var timeMallMarkBig = M_IMG_SERVER_URL_V2 + "cloud/timeShopTipBig.png";
var commonMessageBg = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageBg.png";
var commonMessageAloneBtn = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageAloneBtn.png";
var commonMessageLeftBtn = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageLeftBtn.png";
var commonMessageRightBtn = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageRightBtn.png";
var commonMessageSuccenBg = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageSuccen.png";
var commonMessageLine = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageLine.png";
var commonMessageIcon = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageIocn.png";
var TRAIL_READING_BUTTON_W_FIRST = M_IMG_SERVER_URL_V2 + "newSysmenu/button_w_first.png";
var TRAIL_READING_BUTTON_W_LAST = M_IMG_SERVER_URL_V2 + "newSysmenu/button_w_last.png";
var TRAIL_READING_BUTTON_T_FIRST = M_IMG_SERVER_URL_V2 + "newSysmenu/button_t_first.png";
var TRAIL_READING_BUTTON_T_LAST = M_IMG_SERVER_URL_V2 + "newSysmenu/button_t_last.png";
var TRAIL_READING_BUUTON_CANCEL = M_IMG_SERVER_URL_V2 + "newSysmenu/button_x_1.png";
var TRAIL_READING_BUUTON_QUESTION_MARK = M_IMG_SERVER_URL_V2 + "newSysmenu/question_mark.png";
var timeMallTipBg = M_IMG_SERVER_URL_V2 + "timeMall/timeTipBg.png";
var timeMallTiptIcon = M_IMG_SERVER_URL_V2 + "timeMall/timeTipIcon.png";
var snowPath = M_IMG_SERVER_URL_V2 + "weather/snow.png";
var localSave = M_IMG_SERVER_URL_V2 + "cloud/lChange_web.png";
var localSaveFocus = M_IMG_SERVER_URL_V2 + "cloud/lChange1_web.png";
var cloudSave = M_IMG_SERVER_URL_V2 + "cloud/cChange_web.png";
var cloudSaveFocus = M_IMG_SERVER_URL_V2 + "cloud/cChange1_web.png";
var flowerForSave = M_IMG_SERVER_URL_V2 + "orgMenuBtn/commen/oflowerIcon.png";
var saveGuideLocal = "";
var saveGuideCloud = "";
var SHOP_LOCK_BG = "";
var SHOP_LOCK_HP_ICON = M_IMG_SERVER_URL_V2 + "hpLock/h_hlock_icon.png";
var SHOP_LOCK_STORY_ICON = M_IMG_SERVER_URL_V2 + "hpLock/h_slock_icon.png";
var SHOP_LOCK_SAVE = M_IMG_SERVER_URL_V2 + "hpLock/save.png";
var SHOP_LOCK_SAVE_ACTIVE = M_IMG_SERVER_URL_V2 + "hpLock/saveActive.png";
var SHOP_LOCK_PURCHASE = M_IMG_SERVER_URL_V2 + "hpLock/purchase.png";
var SHOP_LOCK_PURCHASE_ACTIVE = M_IMG_SERVER_URL_V2 + "hpLock/purchaseActive.png";
var SHOP_LOCK_CLOSE = M_IMG_SERVER_URL_V2 + "hpLock/close.png";
var SHOP_FAIL_ICON = M_IMG_SERVER_URL_V2 + "hpLock/payfail.png";
var LIMIT_FREE_URL = M_IMG_SERVER_URL_V2 + "webfree";
var LIMIT_FREE_TIME_BG = "";
var LIMIT_FREE_TIME_CLOSE_BTN = "";
var LIMIT_FREE_TIME_OPEN_BTN = "";
var LIMIT_FREE_TIME_POINT = "";
var LIMIT_FREE_NUMBER = "";
var LIMIT_FREE_BTN_BUY = "";
var LIMIT_FREE_BTN_BUY_ACTIVE = "";
var LIMIT_FREE_ANIM_CLOCK = "";
var LIMIT_FREE_ANIM_CLOCK1 = "";
var LIMIT_FREE_OVER_BG = "";
var LIMIT_FREE_BTN_EXIT = "";
var LIMIT_FREE_BTN_EXIT_ACTIVE = "";
var LIMIT_FREE_BTN_SAVE = "";
var LIMIT_FREE_BTN_SAVE_ACTIVE = "";
var LIMIT_FREE_FLOWER = "";
var chatVoiceLeft = M_IMG_SERVER_URL_V2 + "chat/left-20.png";
var chatVoiceRight = M_IMG_SERVER_URL_V2 + "chat/right-20.png";
var chatHeadBaseMap = M_IMG_SERVER_URL_V2 + "chat/headBaseMap.png";
var hpErrorIcon = M_IMG_SERVER_URL_V2 + "hpLock/error.png";
var hpMsgTipBg = M_IMG_SERVER_URL_V2 + "hpLock/msg_tip_bg.png";
var logoPath = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_web.png";
var logoPathAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3.png";
var logoPathFocus = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_web_pitch.png";
var logoPathFocusAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_pitch.png";
var logoPathLimit = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_web_Limit.png";
var logoPathFocusAndroidLimit = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_Limit.png";
var menuPath = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2_web.png";
var menuPathAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2.png";
var menuPathFocus = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2_web_pitch.png";
var menuPathFocusAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2_pitch.png";
var rewardIconURL = M_IMG_SERVER_URL_V2 + "common/welfareBtn.png";
var exitIconURL = M_IMG_SERVER_URL_V2 + "common/exit.png";
var sysmenuOpenMenu = M_IMG_SERVER_URL_V2 + "newSysmenu/open_menu.png";
var sysmenuCloseMenu = M_IMG_SERVER_URL_V2 + "newSysmenu/close_menu.png";
var mobileMenuPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_menu.png";
var mobileMenuPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/game_menu_pitch.png";
var mobileLogoPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu.png";
var mobileLogoPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu_pitch.png";
var mobileLogoPathLimit = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu_limit.png";
var mobileCollectPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_collect.png";
var mobileCollectPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_collect_pitch.png";
var mobileSendPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_send.png";
var mobileSendPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_send_pitch.png";
var mobileSharePath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_share.png";
var mobileSharePathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_share_pitch.png";
var mobileEvaluatePath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_evaluate.png";
var mobileEvaluatePathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_evaluate_pitch.png";
var rechargeBg = M_IMG_SERVER_URL_V2 + "recharge/rechargeBg.png";
var rechargeClose = M_IMG_SERVER_URL_V2 + "recharge/rechargeClose.png";
var rechargeBtn = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtn.png";
var rechargeBtnFocus = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtnFocus.png";
var rechargeFlowerIcon = M_IMG_SERVER_URL_V2 + "recharge/rechargeFlowerIcon.png";
var shareBg = M_IMG_SERVER_URL_V2 + "share/shareBg.png";
var shareImage = M_IMG_SERVER_URL_V2 + "share/shareImage.png";
var shareTopTip = M_IMG_SERVER_URL_V2 + "share/shareTopTip.png";
var shareSure = M_IMG_SERVER_URL_V2 + "share/shareSure.png";
var shareClose = M_IMG_SERVER_URL_V2 + "share/shareClose.png";
var shareIconURL1 = M_IMG_SERVER_URL_V2 + "share/shareIconURL1.png";
var splashBG = M_IMG_SERVER_URL_V2 + "newLoading/bg.png";
var splashLoading = M_IMG_SERVER_URL_V2 + "newLoading/";
var logoCGURL = "";
var LOGO_URL = "";
var ROTATE_LOADING_URL = M_IMG_SERVER_URL_V2 + "common/ROTATE_LOADING_URL.png";
var speedUpIcon0 = M_IMG_SERVER_URL_V2 + "speedfast/fast0.png";
var speedUpIcon1 = M_IMG_SERVER_URL_V2 + "speedfast/fast1.png";
var speedUpIcon2 = M_IMG_SERVER_URL_V2 + "speedfast/fast2.png";
var speedUpIcon3 = M_IMG_SERVER_URL_V2 + "speedfast/fast3.png";
var speedUpIcon4 = M_IMG_SERVER_URL_V2 + "speedfast/fast4.png";
var speedUpIcon5 = M_IMG_SERVER_URL_V2 + "speedfast/fast5.png";
var speedUpIcon6 = M_IMG_SERVER_URL_V2 + "speedfast/fast6.png";
var speedUpIcon7 = M_IMG_SERVER_URL_V2 + "speedfast/fast7.png";
var speedUpIcon8 = M_IMG_SERVER_URL_V2 + "speedfast/fast8.png";
var rewardClose = M_IMG_SERVER_URL_V2 + "reward/rewardClose.png";
var rewardFlower1 = M_IMG_SERVER_URL_V2 + "reward/rewardFlower1.png";
var rewardFlower2 = M_IMG_SERVER_URL_V2 + "reward/rewardFlower2.png";
var rewardFlower3 = M_IMG_SERVER_URL_V2 + "reward/rewardFlower3.png";
var rewardItemBGAlreadyGot = M_IMG_SERVER_URL_V2 + "reward/rewardItemBGAlreadyGot.png";
var rewardBtnAlreadyGot = M_IMG_SERVER_URL_V2 + "reward/rewardBtnAlreadyGot.png";
var rewardItemBGCanBeGet = M_IMG_SERVER_URL_V2 + "reward/rewardItemBGCanBeGet.png";
var rewardBtnCanBeGet = M_IMG_SERVER_URL_V2 + "reward/rewardBtnCanBeGet.png";
var rewardBtnCannotBeGet = M_IMG_SERVER_URL_V2 + "reward/rewardBtnCannotBeGet.png";
var rechargeBgURL = M_IMG_SERVER_URL_V2 + "recharge/rechargeBgURL.png";
var rechargeBtnURL = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtnURL.png";
var rechargePriceURL = M_IMG_SERVER_URL_V2 + "recharge/rechargePriceURL.png";
var rechargeSelectedPriceURL = M_IMG_SERVER_URL_V2 + "recharge/rechargeSelectedPriceURL.png";
var rechargeBtnClose = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtnClose.png";
var investigateImages940_540 = M_IMG_SERVER_URL_V2 + "investigate/investigate960x540.jpg";
var investigateImages540_940 = M_IMG_SERVER_URL_V2 + "investigate/investigate540x960.jpg";
var investigateImages1280_720 = M_IMG_SERVER_URL_V2 + "investigate/investigate1280x720.jpg";
var wanziIcon = PROTOCOL + "//c1.cgyouxi.com/website/hfplayer/v3/bin/wanMan/res/mall/wanziIcon.png";
var wmMallOpenMenu = M_IMG_SERVER_URL_V2 + "mall/open.png";
var wmMallCloseMenu = M_IMG_SERVER_URL_V2 + "mall/close.png";
var wmMallSwitchWZMenu = M_IMG_SERVER_URL_V2 + "mall/wzIcon.png";
var wmMallSwitchXHMenu = M_IMG_SERVER_URL_V2 + "mall/xhIcon.png";
var limitFreeView_Bg = M_IMG_SERVER_URL_V2 + "limitFreeView/bg.png";
var limitFreeView_type1 = M_IMG_SERVER_URL_V2 + "limitFreeView/type1.png";
var limitFreeView_type2 = M_IMG_SERVER_URL_V2 + "limitFreeView/type2.png";
var limitFreeView_type3 = M_IMG_SERVER_URL_V2 + "limitFreeView/type3.png";
var limitFreeView_type4 = M_IMG_SERVER_URL_V2 + "limitFreeView/type4.png";
var limitFreeView_type5 = M_IMG_SERVER_URL_V2 + "limitFreeView/type5.png";
var limitFreeView_choice = M_IMG_SERVER_URL_V2 + "limitFreeView/choice.png";
var limitFreeView_close = M_IMG_SERVER_URL_V2 + "limitFreeView/closeBtn.png";
var limitFreeView_tj = M_IMG_SERVER_URL_V2 + "limitFreeView/tj.png";

function initWanManURL() {
    M_IMG_SERVER_URL_V2 = PROTOCOL + "//c1.cgyouxi.com/website/hfplayer/v3/bin/wanMan/res/";
    LIMIT_FREE_URL = M_IMG_SERVER_URL_V2 + "res/webfree";
    setClientTypeUrlByV2()
}

function initCGSJURL() {
    M_IMG_SERVER_URL_V2 = PROTOCOL + "//c1.cgyouxi.com/website/hfplayer/v3/bin/cgWorld/res/";
    setClientTypeUrlByV2()
}

function initLimitFreeURL() {
    LIMIT_FREE_TIME_BG = M_IMG_SERVER_URL_V2 + "webfree/newTimeBack.png";
    LIMIT_FREE_TIME_CLOSE_BTN = M_IMG_SERVER_URL_V2 + "webfree/timeCloseBtn.png";
    LIMIT_FREE_TIME_OPEN_BTN = M_IMG_SERVER_URL_V2 + "webfree/timeOpenBtn.png";
    LIMIT_FREE_TIME_POINT = M_IMG_SERVER_URL_V2 + "webfree/timePoint.png";
    LIMIT_FREE_NUMBER = LIMIT_FREE_URL + "numberPic.png";
    LIMIT_FREE_BTN_BUY = LIMIT_FREE_URL + "buyBtn.png";
    LIMIT_FREE_BTN_BUY_ACTIVE = LIMIT_FREE_URL + "buyBtn1.png";
    LIMIT_FREE_ANIM_CLOCK = LIMIT_FREE_URL + "clock.png";
    LIMIT_FREE_ANIM_CLOCK1 = LIMIT_FREE_URL + "clock1.png";
    LIMIT_FREE_OVER_BG = LIMIT_FREE_URL + "overBack.png";
    LIMIT_FREE_BTN_EXIT = LIMIT_FREE_URL + "overBtn.png";
    LIMIT_FREE_BTN_EXIT_ACTIVE = LIMIT_FREE_URL + "overBtn1.png";
    LIMIT_FREE_BTN_SAVE = LIMIT_FREE_URL + "saveBtn.png";
    LIMIT_FREE_BTN_SAVE_ACTIVE = LIMIT_FREE_URL + "saveBtn1.png";
    LIMIT_FREE_FLOWER = LIMIT_FREE_URL + "flower.png"
}

function initGameFitURL() {
    LOGO_URL = M_IMG_SERVER_URL_V2 + "logo/" + gGameWidth + "x" + gGameHeight + ".jpg";
    logoCGURL = M_IMG_SERVER_URL_V2 + "videoCG/" + gGameWidth + "x" + gGameHeight + ".mp4";
    saveGuideCloud = M_IMG_SERVER_URL_V2 + "cloud/" + gGameWidth + "_" + gGameHeight + "_pc_cloud.png";
    saveGuideLocal = M_IMG_SERVER_URL_V2 + "cloud/" + gGameWidth + "_" + gGameHeight + "_pc_local.png";
    if (gGameWidth > gGameHeight) {
        SHOP_LOCK_BG = M_IMG_SERVER_URL_V2 + "hpLock/h_hpbg.png";
        LIMIT_FREE_URL += "/"
    } else {
        SHOP_LOCK_BG = M_IMG_SERVER_URL_V2 + "hpLock/s_hpbg.png";
        LIMIT_FREE_URL += "v/"
    }
    initLimitFreeURL()
}

function initFantasyURL() {
    mobileLogoPath = M_IMG_SERVER_URL_V2 + "fantasy/mobile_game_menu.png";
    mobileLogoPathFocus = M_IMG_SERVER_URL_V2 + "fantasy/mobile_game_menu_pitch.png";
    logoPath = M_IMG_SERVER_URL_V2 + "fantasy/mobile_game_menu.png";
    logoPathAndroid = M_IMG_SERVER_URL_V2 + "fantasy/mobile_game_menu.png";
    logoPathFocus = M_IMG_SERVER_URL_V2 + "fantasy/mobile_game_menu_pitch.png";
    logoPathFocusAndroid = M_IMG_SERVER_URL_V2 + "fantasy/mobile_game_menu_pitch.png";
    LOGO_URL = M_IMG_SERVER_URL_V2 + "fantasy/" + gGameWidth + "x" + gGameHeight + ".jpg"
}

function setClientTypeUrlByV2() {
    autoSaveMaskPath = M_IMG_SERVER_URL_V2 + "autoSave/mask.png";
    autoSaveBgPath = M_IMG_SERVER_URL_V2 + "autoSave/autobg.png";
    autoSaveJxPath = M_IMG_SERVER_URL_V2 + "autoSave/autojx.png";
    autoSaveKsPath = M_IMG_SERVER_URL_V2 + "autoSave/autoks.png";
    addictionPreventionTitleBgPath = M_IMG_SERVER_URL_V2 + "autoSave/addictionTitleBg.png";
    addictionPreventionContentBgPath = M_IMG_SERVER_URL_V2 + "autoSave/addictionContentBg.png";
    adCountDownBG = M_IMG_SERVER_URL_V2 + "adList/adCountDown.png";
    cloudMark = M_IMG_SERVER_URL_V2 + "cloud/mark.png";
    timeMallMark = M_IMG_SERVER_URL_V2 + "cloud/timeShopTip.png";
    timeMallMarkBig = M_IMG_SERVER_URL_V2 + "cloud/timeShopTipBig.png";
    commonMessageBg = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageBg.png";
    commonMessageAloneBtn = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageAloneBtn.png";
    commonMessageLeftBtn = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageLeftBtn.png";
    commonMessageRightBtn = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageRightBtn.png";
    commonMessageSuccenBg = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageSuccen.png";
    commonMessageLine = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageLine.png";
    commonMessageIcon = M_IMG_SERVER_URL_V2 + "commonMessage/commonMessageIocn.png";
    timeMallTipBg = M_IMG_SERVER_URL_V2 + "timeMall/timeTipBg.png";
    timeMallTiptIcon = M_IMG_SERVER_URL_V2 + "timeMall/timeTipIcon.png";
    snowPath = M_IMG_SERVER_URL_V2 + "weather/snow.png";
    localSave = M_IMG_SERVER_URL_V2 + "cloud/lChange_web.png";
    localSaveFocus = M_IMG_SERVER_URL_V2 + "cloud/lChange1_web.png";
    cloudSave = M_IMG_SERVER_URL_V2 + "cloud/cChange_web.png";
    cloudSaveFocus = M_IMG_SERVER_URL_V2 + "cloud/cChange1_web.png";
    flowerForSave = M_IMG_SERVER_URL_V2 + "orgMenuBtn/commen/oflowerIcon.png";
    SHOP_LOCK_HP_ICON = M_IMG_SERVER_URL_V2 + "hpLock/h_hlock_icon.png";
    SHOP_LOCK_STORY_ICON = M_IMG_SERVER_URL_V2 + "hpLock/h_slock_icon.png";
    SHOP_LOCK_SAVE = M_IMG_SERVER_URL_V2 + "hpLock/save.png";
    SHOP_LOCK_SAVE_ACTIVE = M_IMG_SERVER_URL_V2 + "hpLock/saveActive.png";
    SHOP_LOCK_PURCHASE = M_IMG_SERVER_URL_V2 + "hpLock/purchase.png";
    SHOP_LOCK_PURCHASE_ACTIVE = M_IMG_SERVER_URL_V2 + "hpLock/purchaseActive.png";
    SHOP_LOCK_CLOSE = M_IMG_SERVER_URL_V2 + "hpLock/close.png";
    SHOP_FAIL_ICON = M_IMG_SERVER_URL_V2 + "hpLock/payfail.png";
    LIMIT_FREE_URL = M_IMG_SERVER_URL_V2 + "webfree";
    chatVoiceLeft = M_IMG_SERVER_URL_V2 + "chat/left-20.png";
    chatVoiceRight = M_IMG_SERVER_URL_V2 + "chat/right-20.png";
    chatHeadBaseMap = M_IMG_SERVER_URL_V2 + "chat/headBaseMap.png";
    hpErrorIcon = M_IMG_SERVER_URL_V2 + "hpLock/error.png";
    hpMsgTipBg = M_IMG_SERVER_URL_V2 + "hpLock/msg_tip_bg.png";
    logoPath = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_web.png";
    logoPathAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3.png";
    logoPathFocus = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_web_pitch.png";
    logoPathFocusAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_pitch.png";
    logoPathLimit = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_web_Limit.png";
    logoPathFocusAndroidLimit = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu3_Limit.png";
    menuPath = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2_web.png";
    menuPathAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2.png";
    menuPathFocus = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2_web_pitch.png";
    menuPathFocusAndroid = M_IMG_SERVER_URL_V2 + "sysmenu/game_menu2_pitch.png";
    rewardIconURL = M_IMG_SERVER_URL_V2 + "common/welfareBtn.png";
    exitIconURL = M_IMG_SERVER_URL_V2 + "common/exit.png";
    sysmenuOpenMenu = M_IMG_SERVER_URL_V2 + "newSysmenu/open_menu.png";
    sysmenuCloseMenu = M_IMG_SERVER_URL_V2 + "newSysmenu/close_menu.png";
    mobileMenuPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_menu.png";
    mobileMenuPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/game_menu_pitch.png";
    mobileLogoPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu.png";
    mobileLogoPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu_pitch.png";
    mobileCollectPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_collect.png";
    mobileCollectPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_collect_pitch.png";
    mobileSendPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_send.png";
    mobileSendPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_send_pitch.png";
    mobileSharePath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_share.png";
    mobileSharePathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_share_pitch.png";
    mobileEvaluatePath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_evaluate.png";
    mobileEvaluatePathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_evaluate_pitch.png";
    rechargeBg = M_IMG_SERVER_URL_V2 + "recharge/rechargeBg.png";
    rechargeClose = M_IMG_SERVER_URL_V2 + "recharge/rechargeClose.png";
    rechargeBtn = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtn.png";
    rechargeBtnFocus = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtnFocus.png";
    rechargeFlowerIcon = M_IMG_SERVER_URL_V2 + "recharge/rechargeFlowerIcon.png";
    shareBg = M_IMG_SERVER_URL_V2 + "share/shareBg.png";
    shareImage = M_IMG_SERVER_URL_V2 + "share/shareImage.png";
    shareTopTip = M_IMG_SERVER_URL_V2 + "share/shareTopTip.png";
    shareSure = M_IMG_SERVER_URL_V2 + "share/shareSure.png";
    shareClose = M_IMG_SERVER_URL_V2 + "share/shareClose.png";
    shareIconURL1 = M_IMG_SERVER_URL_V2 + "share/shareIconURL1.png";
    splashBG = M_IMG_SERVER_URL_V2 + "newLoading/bg.png";
    splashLoading = M_IMG_SERVER_URL_V2 + "newLoading/";
    ROTATE_LOADING_URL = M_IMG_SERVER_URL_V2 + "common/ROTATE_LOADING_URL.png";
    speedUpIcon0 = M_IMG_SERVER_URL_V2 + "speedfast/fast0.png";
    speedUpIcon1 = M_IMG_SERVER_URL_V2 + "speedfast/fast1.png";
    speedUpIcon2 = M_IMG_SERVER_URL_V2 + "speedfast/fast2.png";
    speedUpIcon3 = M_IMG_SERVER_URL_V2 + "speedfast/fast3.png";
    speedUpIcon4 = M_IMG_SERVER_URL_V2 + "speedfast/fast4.png";
    speedUpIcon5 = M_IMG_SERVER_URL_V2 + "speedfast/fast5.png";
    speedUpIcon6 = M_IMG_SERVER_URL_V2 + "speedfast/fast6.png";
    speedUpIcon7 = M_IMG_SERVER_URL_V2 + "speedfast/fast7.png";
    speedUpIcon8 = M_IMG_SERVER_URL_V2 + "speedfast/fast8.png";
    rewardClose = M_IMG_SERVER_URL_V2 + "reward/rewardClose.png";
    rewardFlower1 = M_IMG_SERVER_URL_V2 + "reward/rewardFlower1.png";
    rewardFlower2 = M_IMG_SERVER_URL_V2 + "reward/rewardFlower2.png";
    rewardFlower3 = M_IMG_SERVER_URL_V2 + "reward/rewardFlower3.png";
    rewardItemBGAlreadyGot = M_IMG_SERVER_URL_V2 + "reward/rewardItemBGAlreadyGot.png";
    rewardBtnAlreadyGot = M_IMG_SERVER_URL_V2 + "reward/rewardBtnAlreadyGot.png";
    rewardItemBGCanBeGet = M_IMG_SERVER_URL_V2 + "reward/rewardItemBGCanBeGet.png";
    rewardBtnCanBeGet = M_IMG_SERVER_URL_V2 + "reward/rewardBtnCanBeGet.png";
    rewardBtnCannotBeGet = M_IMG_SERVER_URL_V2 + "reward/rewardBtnCannotBeGet.png";
    rechargeBgURL = M_IMG_SERVER_URL_V2 + "recharge/rechargeBgURL.png";
    rechargeBtnURL = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtnURL.png";
    rechargePriceURL = M_IMG_SERVER_URL_V2 + "recharge/rechargePriceURL.png";
    rechargeSelectedPriceURL = M_IMG_SERVER_URL_V2 + "recharge/rechargeSelectedPriceURL.png";
    rechargeBtnClose = M_IMG_SERVER_URL_V2 + "recharge/rechargeBtnClose.png";
    investigateImages940_540 = M_IMG_SERVER_URL_V2 + "investigate/investigate960x540.jpg";
    investigateImages540_940 = M_IMG_SERVER_URL_V2 + "investigate/investigate540x960.jpg";
    investigateImages1280_720 = M_IMG_SERVER_URL_V2 + "investigate/investigate1280x720.jpg";
    wmMallOpenMenu = M_IMG_SERVER_URL_V2 + "mall/open.png";
    wmMallCloseMenu = M_IMG_SERVER_URL_V2 + "mall/close.png";
    wmMallSwitchWZMenu = M_IMG_SERVER_URL_V2 + "mall/wzIcon.png";
    wmMallSwitchXHMenu = M_IMG_SERVER_URL_V2 + "mall/xhIcon.png";
    initGameFitURL()
}

function WebConfig(t) {
    if (!t) {
        t = ""
    }
    var e = PROTOCOL + "//" + t;
    var i = e + "www.66rpg.com/";
    var a = e + "iapi.66rpg.com/";
    var s = e + "cg.66rpg.com/";
    var c = "cgv2.66rpg.com";
    var n = e + "c.66rpg.com/";
    var r = e + "m.66rpg.com/";
    var u = PROTOCOL + "//testcdn.66rpg.com/";
    var f = PROTOCOL + "//wmodcdn.cgyouxi.com/";
    var o = e + "miniapi.dreamwanman.com/";
    var h = n + "cloud/v2/index/";
    var l = n + "collect/v1/index/";
    this.initAllUrl = function() {
        if (GloableData.getInstance().isMobile()) {
            this.M_RESOURCE_SERVER_URL = PROTOCOL + "//wcdn1.cgyouxi.com/";
            this.GET_LIGHT_STATUS = a + "LightText/V2/Lighttext/get_status";
            this.GAT_AD_List = a + "tool/v1/game/new_get_game_ad_list";
            this.GET_OSS_TEMP_TOKEN = a + "Oss/V1/OssAuth/get_archive_temp_auth";
            if (testPath) {
                this.M_RESOURCE_SERVER_URL = u
            }
        } else {
            this.M_RESOURCE_SERVER_URL = PROTOCOL + "//dlcdn1.cgyouxi.com/";
            this.GET_LIGHT_STATUS = i + "ajax/LightText/get_status";
            this.GAT_AD_List = i + "ajax/ad/new_get_game_ad_list.json";
            this.GET_OSS_TEMP_TOKEN = i + "ajax/OssAuth/getArchiveTempAuth";
            if (testPath) {
                this.M_RESOURCE_SERVER_URL = u
            }
        }
        if (t) {
            this.OWEB_LOG = s + "api/oweb_log.php"
        } else {
            this.OWEB_LOG = PROTOCOL + "//" + c + "/api/oweb_log.php"
        }
        this.WMOD_RES_SERVER_URL = f;
        this.CDN_SRC_URL = this.M_RESOURCE_SERVER_URL + "shareres/";
        this.MAP_BIN_URL = s + "api/v2/oapi_map.php";
        this.GAME_GET_GAME_INFO = i + "ajax/game/get_game_info";
        this.GAME_SYSTEM_TIME = i + "api/tool";
        this.GET_USER_HAVE_ALL_PROP_NUM = i + "PropShop/engine/v4/user/getUserHaveAllPropNum";
        if (clientType == 3) {
            this.GET_USER_HAVE_ALL_PROP_NUM = e + "oapi.66rpg.com/versionPack/v1/buy/get_prop_info"
        }
        this.GET_MALL_BUY_ITEM_ORDER_V2 = i + "PropShop/engine/v2/PropOrder/createBuyOrder";
        this.UP_TIME_MALL_RECORD_LOG = i + "PropShop/engine/v2/record/record_log";
        this.GET_MY_MONEY = i + "PropShop/engine/v4/user/getMyAccountMoney";
        if (clientType == 3 || clientType == 6) {
            this.GET_MY_MONEY = e + "oapi.66rpg.com/goods/v1/public/get_total_flower"
        }
        this.GET_GOODS_LIST = i + "PropShop/engine/v4/Game/get_goods_list";
        this.GET_WELFARE_LIST = i + "PropShop/engine/v4/Game/get_attr_list_new";
        this.GET_FLOWER_PROP_STATUS = i + "propShop/V2/UserEngine/get_flower_prop_status";
        this.FLOWER_GAME_ALL_FLOWER_NEW = i + "PropShop/engine/v4/user/game_flower_by_me";
        this.CLOUD_LOAD = h + "cloud_load";
        this.CLOUD_SAVE = h + "cloud_save";
        this.CLOUD_LOAD_EX = h + "cloud_load_ex";
        this.CLOUD_SAVE_EX = h + "cloud_save_ex";
        this.CLOUD_DELETE = h + "cloud_del_by_gear";
        this.GET_XYX_GAME_INFO = a + "tool/v1/game/get_xyx_game_info";
        this.GET_LITTLE_GAME_SHARE = a + "LittleGame/v1/LittleGame/get_little_game_share";
        this.GET_UID_BY_TOKEN = a + "user/v2/user/user_info";
        this.GET_WX_XYX_MALL_INFO = a + "wxMiniGame/v1/wxMiniGame/game_purchase_info";
        this.GET_ADDICTION_PREVENTION_TIME = l + "addiction_prevention_time";
        this.GET_ADDICTION_PREVENTION_IDENTIFY = r + "home/name_identify";
        this.GET_ADDICTION_PREVENTION_IDENTIFY_PC = i + "home/name_identify";
        this.GET_WANMAN_ADDICTION_PREVENTION_IDENTIFY = r + "home/wm_realname.html";
        this.GET_WORLD_ADDICTION_PREVENTION_IDENTIFY = r + "home/org_realname.html";
        this.GET_USER_CHECK_REFUND = i + "ajax/Game/check_refund_flower";
        this.UP_GAME_GET_KEY = l + "getkey";
        this.UP_GAME_RUN_TIME = l + "runtime";
        this.GET_ENGINE_BLOCK_SWITCH = a + "Game/v1/EngineNoAuth/engine_online_global_off";
        this.GET_INVESTIGATE_IMAGE = n + "investigate/v1/investigate/get_investigate_image";
        this.GET_FONT_SKETCH = e + "cg.66rpg.com/interapi/project/v1/image/font_sketch";
        this.GET_FONT_BLACK_WORDS = e + "iapi.66rpg.com/tool/v1/tool/get_content_black_words";
        this.GET_TRY_PLAY_INFO = i + "ajax/TryPlay/get_try_play_info";
        this.GET_TRY_PLAY_NUM = i + "ajax/TryPlay/get_try_play_num";
        this.GET_RESET_TRY_PLAY = i + "ajax/TryPlay/reset_try_play";
        this.GET_BOX_TRY_PLAY_INFO = a + "TryPlay/V1/TryPlay/get_try_play_info";
        this.GET_BOX_TRY_PLAY_NUM = a + "TryPlay/V1/TryPlay/get_try_play_num";
        this.GET_BOX_RESET_TRY_PLAY = a + "TryPlay/V1/TryPlay/reset_try_play";
        this.UPLOAD_LOG = PROTOCOL + "//report.66rpg.com/report/v1/index/bdlog";
        this.GET_LIMIT_FREE_STATUS = i + "ajax/gameLimitFree/get_limit_free_status.json";
        this.GET_APP_LIMIT_FREE_STATUS = a + "limitFree/v1/game/get_limit_free_status";
        this.GET_LIMIT_FREE_EXPERIENCE_STATUS = i + "ajax/gameLimitFree/get_free_experience_status.json";
        this.GET_LIMIT_FREE_COUPON_LIST = i + "ajax/gameLimitFree/get_limit_free_coupon_list.json";
        this.GET_LIMIT_FREE_EXCHANGE_GAME = i + "ajax/gameLimitFree/exchange_game.json"
    }
    ;
    this.initAllUrl();
    this.initWanManApi = function() {
        i = e + "www.dreamwanman.com/";
        a = e + "iapi.dreamwanman.com/";
        s = e + "cg.dreamwanman.com/";
        c = "cg.dreamwanman.com/";
        n = e + "c.dreamwanman.com/";
        r = e + "m.dreamwanman.com/";
        l = n + "collect/v1/index/";
        h = n + "cloud/v2/index/";
        this.initAllUrl();
        this.GET_ADDICTION_PREVENTION_TIME = n + "wanman/v1/index/addiction_prevention_time";
        this.UP_GAME_RUN_TIME = n + "wanman/v1/index/runtime";
        this.FLOWER_GAME_ALL_FLOWER_NEW = o + "propShop/V2/UserEngine/game_wz_by_me";
        this.GET_MY_MONEY = o + "propShop/V2/UserEngine/getMyAccountMoney";
        this.GET_USER_HAVE_ALL_PROP_NUM = o + "propShop/V2/UserEngine/getUserHaveAllPropNum";
        this.GET_FLOWER_PROP_STATUS = o + "propShop/V2/UserEngine/get_flower_prop_status";
        this.GET_GOODS_LIST = o + "propShop/V2/GameEngine/get_goods_list";
        this.GET_WELFARE_LIST = o + "propShop/V2/GameEngine/get_attr_list_new";
        this.GET_MALL_BUY_ITEM_ORDER_V2 = o + "propShop/V1/gameEngine/createBuyOrder";
        this.GET_BOX_TRY_PLAY_INFO = o + "TryPlay/V1/TryPlay/get_try_play_info";
        this.GET_BOX_TRY_PLAY_NUM = o + "TryPlay/V1/TryPlay/get_try_play_num";
        this.GET_BOX_RESET_TRY_PLAY = o + "TryPlay/V1/TryPlay/reset_try_play"
    }
}

function Config() {
    this.enablePurchase = true;
    this.speedUpDelay = 3;
    this.isGetFlowerAd = false;
    this.isCanShare = false;
    this.isAddMallValue = false;
    this.isTT = false;
    this.isH5 = true;
    this.isWX = false;
    this.isXyxAdVideo = false;
    this.isQQ = false;
    this.isIOS = false;
    this.enableADVideoUnlockSave = false;
    this.enableCloudSave = true;
    this.enableCapture = true
}
var Configuration = new Config;
var gloableStaticData = new GloableStaticData;

function GloableStaticData() {
    this.GET_SERVER_TIME = "GET_SERVER_TIME";
    this.DRAW_TALK_SPEED = [1, 3, 6, 9, 12];
    this.DRAW_SPEED_TYPE_LOW = -1;
    this.DRAW_SPEED_TYPE_CENTER = 0;
    this.DRAW_SPEED_TYPE_FAST = 1;
    this.DRAW_TALK_SPEED_TYPE_SHOW_ALL = -10001;
    this.DRAW_TALK_SPEED_TYPE_SHOW_LINE = -10002;
    this.FIRET_HPLOCK_VIEW = "FIRET_HPLOCK_VIEW";
    this.MALL_STORY_TYPE = 1;
    this.MALL_VAR_TYPE = 2;
    this.MALL_GIFT_TYPE = 3;
    this.MALL_GIFT_ITEM_ID = 1;
    this.UPDATE_MALL_FLOWER = -1;
    this.UPDATE_MALL_ALL_ITEM = -2;
    this.USER_GAME_SETING_INFO = "userGameSetingInfo";
    this.SHOW_SAVE_GUIDE_TYPE_1 = "local_have_data";
    this.SHOW_SAVE_GUIDE_TYPE_2 = "first_open_save_view";
    this.SHOW_SAVE_GUIDE_TYPE_3 = "local_have_data_login";
    this.SELECT_SAVE_TYPE_LOCAL = "1";
    this.SELECT_SAVE_TYPE_CLOUD = "2";
    this.BUY_ITEM_RESULT_STATUS_SUCCESS = 1;
    this.BUY_ITEM_RESULT_STATUS_FAIL = 2
}
var Tips = ["橙娘正在努力加载作品ing...", "橙娘正在打开作品，请耐心等待~", "优质内容即将呈现，请耐心等待~", "宝藏作品正被挖掘中...", "橙娘正在翻页中...", "好作品需要时间打磨，请稍候...", "正在奋笔疾书中...", "作者正在码字中，请耐心等待~", "橙娘加速口诀：嘛咪嘛咪哄", "橙娘进入最后冲刺啦！", "和橙娘一起阅读吧~", "遇到心仪的作品记得收藏哦", "关注作者，观看更多优质作品", "长按作品可快速翻页哦~", "每天都有不同限免作品呈上哦~", "橙娘小tips：遇到喜欢的角色，不要忘记对Ta表白哦~", "橙娘小tips：作品出现选择分支时记得添加书签哦~", "橙娘小tips：通过作品简介可以快速了解作品哦~", "橙娘小tips：作品可以下载到本地随时阅读哦~", "成为作品投资人，享受丰厚回报~", "书库中有更多优质作品等你发现~", "作者创作不易，为喜欢的作品献上小花花吧~", "分享作品得野花，解锁后续精彩内容哦~", "阅读作品可以领取活跃奖励哦~", "排行榜都是橙娘整理的宝藏作品呢~"];
var setWanManTips = function t() {
    Tips = ["正在努力加载作品ing...", "进度条百米冲刺中...", "恭喜发现宝藏作品", "视觉盛宴即将来袭", "一起享受丸漫时光~", "精彩剧情马上开始！", "这次又会是什么新的故事呢？", "作者努力码字中...", "精彩作品即将呈现"]
};
var freeTips = "您已可免费体验剧情，更多游戏礼包，请下载幻光APP";

function Dictionary() {
    this.keys = [];
    this.values = [];
    this.set = function(t, e) {
        this[t] = e;
        var i = this.keys.indexOf(t);
        if (i === -1) {
            this.keys.push(t);
            this.values.push(e)
        } else {
            this.keys[i] = t;
            this.values[i] = e
        }
    }
    ;
    this.remove = function(t) {
        var e = this.keys.indexOf(t, 0);
        this.keys.splice(e, 1);
        this.values.splice(e, 1);
        delete this[t]
    }
    ;
    this.clear = function() {
        var t = this.keys.length;
        for (var e = 0; e < t; e++) {
            var i = this.keys[e];
            delete this[i]
        }
        this.keys = [];
        this.values = []
    }
    ;
    this.get = function(t) {
        return this[t + ""]
    }
    ;
    this.fristValue = function() {
        if (this.keys[0]) {
            return this[this.keys[0] + ""]
        }
        return null
    }
    ;
    this.length = function() {
        return this.keys.length
    }
}

function WelfareGetData() {
    this.singDate = 0;
    this.singDay = 0;
    this.flowerDate = 0;
    this.flowerId = 0;
    this.singId = 0;
    this.weekList = [];
    this.newId = 0;
    this.weekDate = 0;
    this.weekDateTime = 0
}

function SaveTimeMallData() {
    this.data = new Dictionary;
    this.addItem = function(t, e) {
        if (this.data.get(t)) {
            e += this.data.get(t)
        }
        this.data.set(t, e)
    }
    ;
    this.getData = function() {
        var t = [];
        var e = tv.gameTimeMall.goodList.goods;
        for (var i = 0; i < e.length; i++) {
            var a = this.data.get(e[i].itemId);
            if (a) {
                var s = {
                    id: e[i].itemId,
                    count: a
                };
                t.push(s)
            }
        }
        return t
    }
    ;
    this.setData = function(t) {
        this.data.clear();
        for (var e = 0; e < t.length; e++) {
            this.addItem(t[e].id, t[e].count)
        }
    }
}
var GloableData = function() {
    function u() {
        this.autoRun = false;
        this.quickRun = false;
        this.mark = "";
        this.pos = 0;
        this.isCloud = false;
        this.flowerMallHua = 0;
        this.isFreeLimit = false;
        this.isWXmini = false;
        this.isWXOrg = false;
        this.isLightVIP = false;
        this.isLightDay = false;
        this.isFreeTime = 0;
        this.freeLimitType = 0;
        this.isFreeLimitStatus = 0;
        this.isHPTip = false;
        this.trialReadingStatus = -1;
        this.trialReadingTime = -1;
        this.rebate = 0;
        this.talkSpeedType = gloableStaticData.DRAW_SPEED_TYPE_CENTER;
        this.wmodList = new Dictionary;
        this.wmodStoryGroup = new Dictionary;
        this.wmodStory = null;
        this.wmodUseType = "";
        this.openEncrypt = false;
        this.isTimeMallGoods = 0;
        this.isSwitchPrice = false;
        this.welfareGetData = new WelfareGetData;
        this.back_flower_flag = 0;
        this.have_back_flower_flag = 0;
        this.savekey = "";
        this.gameInfo = {};
        this.userData = {};
        this.isAgreeAgreement = false;
        this.useTimeMallBuyItem = new SaveTimeMallData;
        this.mallBuyItem = new Dictionary;
        this.timeMallBuyItem = new Dictionary;
        this.encryptor = new JSEncrypt;
        this.publicKey = "-----BEGIN PUBLIC KEY-----\n" + "MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBgb8ErKBB8U46IblJydeyS\n" + "ayCOTsTHVJ5qMqKpLriN6FgDOFAeSkNJI7aQ95bOgoxY4bu6HY4QN5MS9AaWoL8a\n" + "omZnPSKC67eD/sdSz2gddk2r9jXTDyOEf9QPiHsdmQF5wAipsWoCjBNeFmmZTDTg\n" + "3RlDcjRDZ6zPj6LJrWmXnRKAN3vUJrzUMYMlVJhx8xgROyUAh1MK7vFexyQCaUut\n" + "8eV+lyT9pAgQ7OTVCPDTfAWgb5rsUonKERbwmSPqdxjLjqz+xIWnBLWA1X42tJxJ\n" + "613sBypXSglv2Gogcyonc6FO8EmRv5U48cw4MK6XN+Nls3wCmlMLoXn3dxLANpJ7\n" + "AgMBAAE=\n" + "-----END PUBLIC KEY-----";
        this.encryptor.setPublicKey(this.publicKey);
        this.getRandomStringWithUID = function() {
            var t = "abacdefghjklmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789";
            var e = "";
            for (var i = 0; i < 18; i++) {
                e += t.charAt(Math.floor(Math.random() * 52))
            }
            return this.userData.uid + "_" + gIndex + "_" + e + "_" + parseInt(Date.now() / 1000)
        }
        ;
        this.xor_string = function(t, e) {
            var i = "";
            for (var a = 0; a < t.length; a++) {
                i += String.fromCharCode(t.charCodeAt(a) ^ e.charCodeAt(a % e.length))
            }
            return i
        }
        ;
        this.refreshUserFlower = function(t) {
            this.userData.freshFlower = parseInt(t.fresh_flower_num);
            this.userData.wildFlower = parseFloat(t.wild_flower_num) / 100;
            this.userData.tempFlower = parseInt(t.tanhua_flower_num);
            this.userData.realFlower = this.userData.freshFlower + this.userData.wildFlower;
            this.userData.totalFlower = this.userData.realFlower + this.userData.tempFlower;
            this.userData.haveWZ = parseInt(t.wz_num);
            this.userData.dumpling_num = parseInt(t.dumpling_num) / 100;
            this.userData.allWZ = parseInt(t.sum)
        }
        ;
        this.getFlowerByMe = function(e) {
            var t = mallProxy.sendObj("");
            var i = function(t) {
                if (t && t.status == 1) {
                    this.refreshUserFlower(t.data)
                }
                e && e(t)
            }
            .bind(this);
            this.openEncrypt = true;
            serverAjax.sendGetAjaxJSON(webConfig.FLOWER_GAME_ALL_FLOWER_NEW, i, null, t)
        }
        ;
        this.getMallAllItemsErrorCallBack = function() {
            if (tv.scene.closeView) {
                // // hintMessage.setHint("商城信息获取失败！");
                sLoading.hideMask();
                if (tv.scene instanceof SGameNewMall) {
                    tv.scene.dispose()
                } else {
                    tv.scene.closeView()
                }
            }
        }
        ;
        this.loadTimeMallAllItems = function() {
            var n = this;
            var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var t = function t(e) {
                if (e && e.status == 1) {
                    var i = e.data;
                    for (var a = 0; a < i.length; a++) {
                        var s = {
                            id: i[a].goods_id,
                            count: i[a].using_num
                        };
                        n.timeMallBuyItem.set(i[a].goods_id, s)
                    }
                    n.timeMallSort();
                    r && r()
                } else {
                    r && r()
                }
            };
            if (Configuration.isH5) {
                var e = mallProxy.sendObj("");
                e.shop_type = 1;
                this.openEncrypt = true;
                serverAjax.sendGetAjaxJSON(webConfig.GET_USER_HAVE_ALL_PROP_NUM, t, this.getMallAllItemsErrorCallBack, e)
            }
            if (localProjectPath) {
                t({
                    status: 1,
                    data: []
                })
            }
        }
        ;
        this.aesDecrypt = function(t) {
            t = t.replaceAll(/-/g, "+");
            t = t.replaceAll(/_/g, "/");
            t = t.replaceAll(/!/g, "=");
            var e = CryptoJS.enc.Utf8.parse("ONV0vC4Qq4IPeONp");
            var i = CryptoJS.enc.Utf8.parse("9640657729945861");
            var a = CryptoJS.AES.decrypt(t, e, {
                iv: i,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });
            var s = a.toString(CryptoJS.enc.Utf8);
            return JSON.parse(s)
        }
        ;
        this.timeMallSort = function() {
            var t = tv.gameTimeMall.goodList.goods;
            for (var e = 0; e < t.length - 1; e++) {
                for (var i = 0; i < t.length - 1 - e; i++) {
                    var a = t[i];
                    var s = t[i + 1];
                    if (a.sell_status < s.sell_status) {
                        if (a.sell_status == -1 && !s.isRepeat && this.timeMallBuyItem.get(s.itemId)) {
                            continue
                        }
                        var n = t[i];
                        t[i] = t[i + 1];
                        t[i + 1] = n
                    } else {
                        if (a.sell_status == 1 && !a.isRepeat && this.timeMallBuyItem.get(a.itemId)) {
                            if (s.sell_status == -1 || s.sell_status == 1 && (s.isRepeat || !this.timeMallBuyItem.get(s.itemId))) {
                                var n = t[i];
                                t[i] = t[i + 1];
                                t[i + 1] = n
                            }
                        }
                    }
                }
            }
        }
        ;
        this.loadMallAllItems = function() {
            var s = this;
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var r = function(t) {
                var e = [];
                tv.userFlower = 0;
                try {
                    var i = JSON.parse(t);
                    e = i.items;
                    tv.userFlower = i.userFlower
                } catch (t) {
                    SAL_log("no buy items info!!!!")
                }
                if (e) {
                    for (var a = 0; a < e.length; a++) {
                        if (typeof e[a] == "string") {
                            e[a] = JSON.parse(e[a])
                        }
                        this.addMallBuyItem(parseInt(e[a].id), parseInt(e[a].max), 0)
                    }
                }
                this.setNewMallCount();
                n && n()
            }
            .bind(this);
            if (Configuration.isH5) {
                var t = mallProxy.sendObj("");
                t.shop_type = 0;
                var e = function t(e) {
                    if ((tv.gameMallBin || tv.gameNewMall) && e && e.status == 1) {
                        var i = e.data;
                        if (clientType == 3 && i) {
                            i = s.aesDecrypt(i)
                        }
                        for (var a = 0; a < i.length; a++) {
                            s.addMallBuyItem(i[a].goods_id, i[a].using_num)
                        }
                        s.setNewMallCount();
                        n && n()
                    } else {
                        SALlocalStorage.getItem(guid + "_" + "BuyItem", r)
                    }
                };
                if (clientType == 6) {
                    e()
                } else {
                    this.openEncrypt = clientType != 3;
                    serverAjax.sendGetAjaxJSON(webConfig.GET_USER_HAVE_ALL_PROP_NUM, e, this.getMallAllItemsErrorCallBack, t)
                }
            } else {
                SALlocalStorage.getItem(guid + "|" + "BuyItem", r)
            }
        }
        ;
        this.getItemCount = function() {
            var t = 0;
            if (tv.gameMallBin) {
                t = tv.gameMallBin.items.length;
                dx = t;
            } else if (tv.gameNewMall) {
                t = tv.gameNewMall.goodList.goodCount;
                dx = t;
                for (let i = 0; i < t; i++) {
                    if (tv.gameNewMall.goodList.goods[i].itemStatus != 1) {
                        dx = dx - 1;
                    }
                }
            }

            return t
        }
        ;
        this.loadMallItemsPrice = function() {
            var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            if (clientType == 3 || clientType == 6) {
                i && i();
                return
            }
            var e = {
                gindex: gIndex,
                token: u.getInstance().userData.token,
                pmode: mallProxy.pmode,
                shop_type: a,
                page: t,
                limit: 24
            };
            var s = function t(e) {
                if (e.status == 1) {
                    if (a == 0) {
                        r(e.data.data)
                    } else if (a == 1) {
                        o(e.data.data);
                        u.getInstance().timeMallSort()
                    }
                } else {//  // hintMessage.setHint(e.msg)
                }
                i && i()
            };
            var n = function t(e) {
                //  // hintMessage.setHint("网络异常!");
                if (tv.scene instanceof SGameNewMall || tv.scene instanceof SGameMall) {
                    tv.scene.dispose()
                }
                sLoading.hideMask()
            };
            var r = function t(e) {
                e.map(function(t) {
                    var e = u.getInstance().getItemDataById(t.inside_id);
                    if (e) {
                        e.itemDesc = t.prop_describe;
                        e.itemName = t.prop_name;
                        e.itemPrice = t.prop_price;
                        if (clientType == 1) {
                            e.wanzi_price = t.prop_wanzi_price;
                            e.discount = t.prop_discount;
                            e.discount_wanzi_price = t.prop_discount_wanzi_price
                        }
                    }
                })
            };
            var o = function t(e) {
                e.map(function(t) {
                    var e = tv.gameTimeMall.getItemDataById(t.inside_id);
                    if (e) {
                        e.itemDesc = t.prop_describe;
                        e.itemName = t.prop_name;
                        e.itemPrice = t.prop_price;
                        if (clientType == 1) {
                            e.wanzi_price = t.prop_wanzi_price;
                            e.discount = t.prop_discount;
                            e.discount_wanzi_price = t.prop_discount_wanzi_price
                        }
                        e.sell_count = t.sell_count;
                        e.sell_status = t.sell_status;
                        e.sell_countdown = t.sell_countdown;
                        e.prop_uptime = t.prop_uptime;
                        e.prop_downtime = t.prop_downtime
                    }
                })
            };
            this.openEncrypt = true;
            var h = webConfig.GET_GOODS_LIST;
            h ? serverAjax.sendGetAjaxJSON(h, s, n, e) : i && i()
        }
        ;
        this.clearMallBuyCount = function() {
            var t = this.getItemCount();
            for (var e = 1; e <= t; e++) {
                var i = this.mallBuyItem.get(e);
                if (i) {
                    i.count = 0
                }
            }
        }
        ;
        this.clearUserMax = function() {
            var t = this.getItemCount();
            for (var e = 1; e <= t; e++) {
                var i = this.mallBuyItem.get(e);
                if (i) {
                    i.max = 0
                }
            }
        }
        ;
        this.addMallBuyItem = function(t, e, i) {
            var a = void 0;
            a = this.getItemDataById(t);
            if (a) {
                var s = this.getItemPurchaseInfoById(t);
                var n = 0;
                if (s) {
                    n = s.count
                }
                if (i) {
                    n += i
                }
                if (u.getInstance().back_flower_flag) {
                    n = n > e ? e : n
                }
                this.mallBuyItem.set(t, {
                    id: t,
                    count: 0,
                    max: e
                })
            }
            if (Configuration.isWX) {
                var r = a.itemAttribute.split(",");
                for (var c in r) {
                    var o = this.getItemDataById(parseInt(r[c]));
                    if (o.itemId !== a.itemId && o.itemType !== 3) {
                        var h = this.getItemPurchaseInfoById(o.itemId);
                        var l = 0;
                        if (h) {
                            l = h.count
                        }
                        this.mallBuyItem.set(o.itemId, {
                            id: o.itemId,
                            count: l,
                            max: 1
                        })
                    }
                }
            }
        }
        ;
        this.setNewMallCount = function() {
            var t = tv.newMallBuyData;
            if (t) {
                for (var e = 0; e < t.length; e++) {
                    var i = typeof t[e] == "string" ? JSON.parse(t[e]) : t[e];
                    var a = this.mallBuyItem.get(i.id);
                    if (a) {
                        a.count = i.usecount
                    } else {
                        this.addMallBuyItem(i.id, 0, i.usecount)
                    }
                }
            }
            tv.newMallBuyData = []
        }
        ;
        this.getNewMallCount = function() {
            var t = [];
            var e = this.getItemCount();
            for (var i = 1; i <= e; i++) {
                var a = this.mallBuyItem.get(i);
                if (a) {
                    var s = {
                        id: parseInt(a.id),
                        count: parseInt(a.max),
                        usecount: parseInt(-a.max)
                    };
                    t.push(s)
                }
            }
            return t
        }
        ;
        this.userItem = function(t) {
            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var a = this.getItemPurchaseInfoById(t);
            if (a) {
                a.count += e;
                if (!i && clientType == 6) {
                    a.max += e
                }
            } else {
                this.addMallBuyItem(t, e, e)
            }
        }
        ;
        this.getItemPurchaseInfoById = function(t) {
            var e = this.mallBuyItem.get(parseInt(t + ""));
            return e ? e : null
        }
        ;
        this.saveMallAllItems = function() {
            if (Configuration.isWX) {
                return
            }
            var t = {};
            var e = [];
            for (var i = 0; i < this.mallBuyItem.length(); i++) {
                var a = this.mallBuyItem.values[i];
                if (a) {
                    var s = {
                        id: a.id,
                        max: a.max,
                        count: a.count
                    };
                    e.push(s)
                }
            }
            t.items = e;
            t.userFlower = tv.userFlower;
            SALlocalStorage.setItem(guid + "_" + "BuyItem", JSON.stringify(t))
        }
        ;
        this.getMallGiftItem = function() {
            var t = void 0
              , e = void 0;
            if (tv.gameMallBin) {
                e = tv.gameMallBin.items
            } else {
                e = tv.gameNewMall.goodList.goods
            }
            for (var i = 0; i < e.length; i++) {
                if (e[i].itemType == 3 && e[i].itemStatus != 2) {
                    t = e[i];
                    break
                }
            }
            return t
        }
        ;
        this.isNewMall = function() {
            return !!tv.gameNewMall
        }
        ;
        this.getItemDataById = function(t) {
            var e = void 0;
            if (this.isNewMall()) {
                e = tv.gameNewMall.getItemDataById(t)
            } else {
                e = tv.gameMallBin.getItemDataById(t)
            }
            return e
        }
        ;
        this.isScreenHorizontal = function() {
            return gGameWidth > gGameHeight
        }
        ;
        this.changeFileData = function() {
            var a = this;
            var s = tv && tv.data && tv.data.System && tv.data.System.SaveData ? tv.data.System.SaveData.max : 12;
            var e = false;
            for (var t = 0; t < s; t++) {
                SAL_getStorage(this.savekey + t, function(t) {
                    if (t) {
                        e = true
                    }
                })
            }
            if (!e) {
                (function() {
                    var i = "save" + guid + 0;
                    var t = function t(e) {
                        SAL_getStorage(i + e, function(t) {
                            if (t) {
                                SAL_setStorage(a.savekey + e, t)
                            }
                            SAL_removeStorage(i + e, null)
                        })
                    };
                    for (var e = 0; e < s; e++) {
                        t(e)
                    }
                    SAL_getStorage(i + -100, function(t) {
                        if (t) {
                            SAL_setStorage(a.savekey + -100, t)
                        }
                        SAL_removeStorage(i + -100, null)
                    });
                    SAL_getStorage(i + "icon", function(t) {
                        if (t) {
                            SAL_setStorage(a.savekey + "icon", t)
                        }
                        SAL_removeStorage(i + "icon", null)
                    })
                }
                )()
            }
        }
        ;
        this.isLoginStatus = function() {
            if (this.userData.isLogin) {
                return true
            } else {
                SAL_Login(function() {
                    refreshAfterLogin();
                    u.getInstance().loadMallAllItems()
                });
                return false
            }
        }
        ;
        this.getTrialReadingStatus = function(e) {
            var i = this;
            var t = this.isMobile() ? webConfig.GET_BOX_TRY_PLAY_INFO : webConfig.GET_TRY_PLAY_INFO;
            t += "?gindex=" + gIndex;
            t += this.isMobile() ? "&channel=" + channelName : "&channel=pc";
            if (this.isMobile())
                t += "&token=" + this.userData.token;
            serverAjax.sendGetAjaxJSON(t, function(t) {
                if (!t.data) {
                    return
                }
                if (t.data) {
                    return
                }
                i.trialReadingStatus = 0;
                i.trialReadingTime = 999999999;
                e && e()
            }, null, null, null, true)
        }
        ;
        this.loadWelfareData = function() {
            var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var t = function t(e) {
                if (e.status == 1) {
                    a(e.data)
                } else {// hintMessage.setHint(e.msg)
                }
                i && i()
            };
            var e = function t(e) {
                // hintMessage.setHint("网络异常!");
                if (tv.scene instanceof SGameWelfare) {
                    tv.scene.dispose()
                }
                sLoading.hideMask()
            };
            var a = function t(e) {
                var i = tv.gameWelfateBin.welfareDetailList[0].goodList;
                if (!i) {
                    return
                }
                var a = void 0
                  , s = void 0;
                for (a = 0; a < e.length; a++) {
                    for (s = 0; s < i.length; s++) {
                        if (e[a].inside_id === i[s].itemId) {
                            i[s].taskNum = e[a].attr_flower;
                            i[s].wmTaskNum = e[a].attr_wanzi;
                            break
                        }
                    }
                }
            };
            var s = webConfig.GET_WELFARE_LIST;
            var n = {
                gindex: gIndex,
                token: u.getInstance().userData.token
            };
            this.openEncrypt = true;
            serverAjax.sendGetAjaxJSON(s, t, e, n)
        }
    }
    u.getInstance = function() {
        if (u._instance == null) {
            u._instance = new u
        }
        return u._instance
    }
    ;
    u.prototype.init = function() {
        var t = 0
    }
    ;
    u.prototype.getLightFreeStatus = function(s) {
        var n = this;
        var t = webConfig.GET_LIGHT_STATUS;
        var e = {
            gindex: gIndex,
            token: this.userData.token
        };
        var i = function t(e) {
            if (e.status == 1) {
                if (e.data.type == 1) {
                    var i = md5("" + e.data.expire_time + ("" + gIndex));
                    var a = md5(n.userData.uid + i);
                    n.msg_free = e.data.head_msg;
                    if (a == e.data.md5) {
                        n.isFreeLimit = true;
                        n.isFreeTime = parseInt(e.data.expire_time)
                    } else {
                        n.isFreeLimit = false;
                        n.isFreeTime = 0
                    }
                }
                if (e.data.type == 3) {
                    n.isLightVIP = true;
                    n.msg_lightVip = e.data.head_msg
                }
                if (e.data.type == 2) {
                    n.isLightDay = true;
                    n.msg_lightDay = e.data.head_msg;
                    n.isFreeTime = parseInt(e.data.expire_time)
                }
                n.freeLimitType = e.data.type;
                s && s()
            }
        };
        this.openEncrypt = true;
        serverAjax.sendGetAjaxJSONPForM(t, i, null, e)
    }
    ;
    u.prototype.getIsUnLock = function() {
        return this.userData.isLogin && this.userData.realFlower >= this.gameInfo.flowerLock
    }
    ;
    u.prototype.isMobile = function() {
        var t = this.userData.platform.toLowerCase();
        return t.indexOf("android") >= 0 || t.indexOf("ios") >= 0 || !Configuration.isH5
    }
    ;
    u.prototype.isIos = function() {
        var t = this.userData.platform.toLowerCase();
        return t.indexOf("ios") >= 0
    }
    ;
    u.prototype.getIsUnaudited = function() {
        return !this.gameInfo.isPc && this.gameInfo.check_level <= 0
    }
    ;
    u._instance = null;
    u.runNum = 0;
    return u
}();

function Utils() {
    this.TextAnalysis = function(t) {
        if (!t) {
            return ""
        }
        var e = new String(t);
        e = e.replaceAll(/\|[Nn]/g, String.fromCharCode(200));
        e = e.replaceAll(/\\[Nn]/g, String.fromCharCode(200));
        e = e.replaceAll(/\/[Nn]/g, String.fromCharCode(200));
        e = e.replaceAll(/\\[Ww]\[([0-9]+)]/g, String.fromCharCode(201) + "[$1]");
        e = e.replaceAll(/\/[Ww]\[([0-9]+)]/g, String.fromCharCode(201) + "[$1]");
        e = e.replaceAll(/\\[Cc]\[([0-9]+,[0-9]+,[0-9]+)]/g, String.fromCharCode(202) + "[$1]");
        e = e.replaceAll(/\/[Cc]\[([0-9]+,[0-9]+,[0-9]+)]/g, String.fromCharCode(202) + "[$1]");
        e = e.replaceAll(/\\[Ss]\[([0-9]+)]/g, String.fromCharCode(203) + "[$1]");
        e = e.replaceAll(/\/[Ss]\[([0-9]+)]/g, String.fromCharCode(203) + "[$1]");
        e = e.replaceAll(/\\\|/g, String.fromCharCode(204));
        e = e.replaceAll(/\\\./g, String.fromCharCode(205));
        e = e.replaceAll(/\\\>/g, String.fromCharCode(206));
        e = e.replaceAll(/\\\=/g, String.fromCharCode(207));
        e = e.replaceAll(/\\[Vv]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(208) + "[$1]");
        e = e.replaceAll(/\/[Vv]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(208) + "[$1]");
        e = e.replaceAll(/\\[Xx]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(209) + "[$1]");
        e = e.replaceAll(/\/[Xx]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(209) + "[$1]");
        e = e.replaceAll(/\\[Tt]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(210) + "[$1]");
        e = e.replaceAll(/\/[Tt]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(210) + "[$1]");
        e = e.replaceAll(/\\[Kk]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(211) + "[$1]");
        e = e.replaceAll(/\/[Kk]\[(([\-]*)([0-9]+))]/g, String.fromCharCode(211) + "[$1]");
        return e
    }
    ;
    this.TextAnalysisNull = function(t) {
        if (!t) {
            return ""
        }
        var e = new String(t);
        e = e.replaceAll("\\\\[Nn]", "");
        e = e.replaceAll("\\\\[Ww]\\[([0-9| ]+)]", "");
        e = e.replaceAll("\\\\[Cc]\\[([0-9| ]+[，,][0-9| ]+[，,][0-9| ]+)]", "");
        e = e.replaceAll("\\\\[Ss]\\[([0-9| ]+)]", "");
        e = e.replaceAll("\\\\\\|", "");
        e = e.replaceAll("\\\\\\.", "");
        e = e.replaceAll("\\\\\\>", "");
        e = e.replaceAll("\\\\\\=", "");
        e = e.replaceAll("\\\\[Vv]\\[([0-9| ]+)]", "");
        e = e.replaceAll("\\\\[Xx]\\[([0-9| ]+)]", "");
        e = e.replaceAll("\\\\[Tt]\\[([0-9| ]+)]", "");
        e = e.replaceAll("\\\\[Kk]\\[([0-9| ]+)]", "");
        return e
    }
    ;
    this.TextAnalyRemove = function(t) {
        if (!t) {
            return ""
        }
        var e = new String(t);
        e = e.replaceAll(/\|[Nn]/g, "");
        e = e.replaceAll(/\\[Nn]/g, "");
        e = e.replaceAll(/\\[Ww]\[([0-9]+)]/g, "");
        e = e.replaceAll(/\\[Cc]\[([0-9]+,[0-9]+,[0-9]+)]/g, "");
        e = e.replaceAll(/\\[Ss]\[([0-9]+)]/g, "");
        e = e.replaceAll(/\\\|/g, "");
        e = e.replaceAll(/\\\./g, "");
        e = e.replaceAll(/\\\>/g, "");
        e = e.replaceAll(/\\\=/g, "");
        e = e.replaceAll(/\\[Vv]\[(([\-]*)([0-9]+))]/g, "");
        e = e.replaceAll(/\\[Xx]\[(([\-]*)([0-9]+))]/g, "");
        e = e.replaceAll(/\\[Tt]\[(([\-]*)([0-9]+))]/g, "");
        e = e.replaceAll(/\\[Kk]\[(([\-]*)([0-9]+))]/g, "");
        return e
    }
    ;
    this.madeString = function(t, e, i, a) {
        if (!t) {
            return ""
        }
        var s = t;
        e += 1;
        if (e >= 20) {
            return ""
        }
        t = this.TextAnalysis(t);
        var n = "";
        while (true) {
            if (t.length <= 0) {
                break
            }
            var r = t.substring(0, 1);
            t = t.substring(1, t.length);
            if (a && (r.charCodeAt(0) == 200 || r.charCodeAt(0) == 202)) {
                n += r;
                continue
            }
            switch (r.charCodeAt(0)) {
            case 201:
                var c = t.substring(t.indexOf("[") + 1, t.indexOf("]"));
                t = t.substring(c.length + 2, t.length);
                break;
            case 208:
                var o = this.TextToTemp2(t, "[", "]", "\\[([0-9| ]+)]");
                t = o[1];
                var h = parseInt(o[0]);
                n += tv.system.vars.getVar(h - 1);
                break;
            case 209:
                var o = this.TextToTemp2(t, "[", "]", "\\[([0-9| ]+)]");
                t = o[1];
                var h = parseInt(o[0]);
                n += tv.system.varsEx.getVar(h - 1);
                break;
            case 210:
                var o = this.TextToTemp2(t, "[", "]", "\\[([0-9| ]+)]");
                t = o[1];
                var h = parseInt(o[0]);
                n += this.madeString(tv.system.string.getVar(h - 1), e, i);
                break;
            case 211:
                var o = this.TextToTemp2(t, "[", "]", "\\[([0-9| ]+)]");
                t = o[1];
                var l = o[0];
                t = t.substring(l, t.length);
                while (l > 0) {
                    l--;
                    n += "□"
                }
                break;
            default:
                n += r;
                break
            }
        }
        if ((n.indexOf("\\t[") != -1 || n.indexOf("\\v[") != -1 || n.indexOf("\\x[") != -1) && n.indexOf("]") != -1) {
            if (s == n) {
                return n
            }
            return this.madeString(n)
        } else {
            if (i != 105) {
                n = n.replace("\\", "/")
            }
            return n
        }
    }
    ;
    this.getStringisColor = function(t) {
        var e = t.split("");
        for (var i = 0; i < e.length; i++) {
            if (e[i].charCodeAt(0) == 202) {
                return true
            }
        }
        return false
    }
    ;
    this.setStringNoColor = function(t) {
        var e = "";
        var i = "";
        while (t.length > 0) {
            i = t.substr(0, 1);
            t = t.substring(1, t.length);
            var a = i.charCodeAt(0);
            if (a == 200) {
                e += "\n"
            } else {
                e += i
            }
        }
        return e
    }
    ;
    this.TextToTemp = function(t, e, i, a) {
        var s = t.substring(t.indexOf(e) + 1, t.indexOf(i));
        t = t.substring(s.length + e.length + i.length, t.length);
        var n = s.replaceAll(a, "$1");
        var r = n.replaceAll(" ", "");
        return r
    }
    ;
    this.TextToTemp2 = function(t, e, i, a) {
        var s = t.substring(t.indexOf(e) + 1, t.indexOf(i));
        t = t.substring(s.length + e.length + i.length, t.length);
        var n = new Array(s.replaceAll(a, "$1"),t);
        return n
    }
    ;
    this.blockText = function(t) {
        return t.replaceAll(/\[(.+?)]/g, "")
    }
    ;
    this.getShowText = function(t) {
        t = this.madeString(t, 1);
        var e = "";
        while (true) {
            if (t.length <= 0) {
                break
            }
            var i = t.substring(0, 1);
            t = t.substring(1, t.length);
            var a = i.charCodeAt(0);
            if (a == 200 || a == 201 || a == 202 || a == 203 || a == 204 || a == 205 || a == 206 || a == 207) {
                continue
            } else {
                e += i
            }
        }
        return this.blockText(e)
    }
    ;
    this.uniquerTextDif = function(t, e, i) {
        var a = t.indentStack;
        var s = [];
        var n = 0;
        for (var r = 0; r < a.length; r++) {
            if (a[r]instanceof BranchInfo) {
                s[n] = new Object;
                s[n].choiceIndex = a[r].choiceIndex;
                s[n].finishIndex = a[r].finishIndex;
                n++
            }
        }
        for (var o = 0; o < s.length; o++) {
            if (s[o].choiceIndex.toString() == e.toString() && s[o].finishIndex == i) {
                return true
            }
        }
        return false
    }
}
var utils = new Utils;

function CountServer(t) {
    var v = this;
    var p;
    var S = t;
    this.allFileNum = 0;
    this.allFlow = 0;
    this.allWmodArr = {};
    this.pTime = 30;
    this.runTime = 0;
    this.goTime = 0;
    this.upT = 2;
    this.runAllTime = 0;
    this.cumulativeEffectiveTime = 0;
    this.channel_id = GloableData.getInstance().userData.channel_id;
    this.gName = GloableData.getInstance().gameInfo.gName;
    this.platformMap = {
        web: 0,
        ios: 1,
        android: 2,
        h5: 4
    };
    var u = GloableData.getInstance().userData.platform.toLowerCase();
    var I = 3;
    var w;
    if (u.indexOf("android") > -1) {
        I = 5;
        w = 8
    } else if (u.indexOf("ios") > -1) {
        I = 6;
        w = 7
    } else if (u.indexOf("web") > -1) {
        w = 9
    } else {
        w = 10
    }
    this.upEffectiveClick = function() {
        this.pTime = 30
    }
    ;
    this.gamePlayTime = function() {
        if (!Configuration.isH5) {
            return
        }
        this.uid = GloableData.getInstance().userData.uid;
        if (GloableData.getInstance().userData.uid <= 0 && GloableData.getInstance().isMobile()) {
            this.getUidByToken()
        } else if (GloableData.getInstance().userData.uid <= 0) {
            return
        }
        var s = 0;
        var e;
        var n = 10;
        var r = (new Date).getHours();
        v.getServerKey(function() {
            v.initUPTimer();
            try {
                var a;
                SAL_getStorage("runtime", function(t) {
                    a = t
                });
                if (a) {
                    var t = a.split("|");
                    if (t.length > 1) {
                        v.upRunTimeAjax();
                        SAL_removeStorage("runtime")
                    }
                }
                e = SAL_setInterval(function() {
                    v.goTime++;
                    v.pTime -= 1;
                    if (v.pTime <= 0) {
                        v.pTime = 0
                    } else {
                        n -= 1;
                        v.runTime += 1;
                        v.runAllTime += 1;
                        v.cumulativeEffectiveTime += 1;
                        s++;
                        if (s == 5) {
                            SAL_getStorage("gameRuntime", function(t) {
                                a = t
                            });
                            if (a && (a.indexOf("/") != -1 || a.indexOf("\\") != -1 || a.indexOf("|") != -1 || a.indexOf("null") != -1 || a.indexOf("_") != -1 || a.indexOf(":") == -1)) {
                                a = null
                            }
                            if (a) {
                                try {
                                    e = JSON.parse(a)
                                } catch (t) {
                                    SAL_removeStorage("gameRuntime");
                                    e = {};
                                    e[S] = 0
                                }
                                if (e[S]) {
                                    e[S] = v.runTime
                                } else {
                                    e[S] = s;
                                    v.runTime = s
                                }
                            } else {
                                var e = {};
                                SAL_removeStorage("gameRuntime");
                                e[S] = s;
                                v.runTime = s
                            }
                            var t = JSON.stringify(e);
                            SAL_setStorage("gameRuntime", t);
                            s = 0
                        }
                    }
                    if (n <= 0) {
                        v.upRunTimeAjax();
                        if (v.goTime >= 120 && v.goTime < 600) {
                            n = 60
                        } else if (v.goTime >= 600) {
                            n = 120
                        } else {
                            n = 10
                        }
                    }
                    var i = (new Date).getHours();
                    if (i != r) {
                        r = i;
                        v.getServerKey()
                    }
                }, 1e3)
            } catch (t) {
                e = SAL_setInterval(function() {
                    v.pTime -= 1;
                    if (v.pTime <= 0) {
                        v.pTime = 0
                    } else {
                        n -= 1;
                        v.runTime += 1;
                        v.runAllTime += 1
                    }
                    if (n <= 0) {
                        v.upRunTimeAjax();
                        n = v.upT * 60
                    }
                    var t = (new Date).getHours();
                    if (t != r) {
                        r = t;
                        v.getServerKey()
                    }
                }, 1e3)
            }
        })
    }
    ;
    this.getServerKey = function(i) {
        if (!Configuration.isH5) {
            return
        }
        var t = (new Date).getDate();
        var e = webConfig.UP_GAME_GET_KEY;
        var a = {
            uid: this.uid,
            data: t,
            check: u
        };
        serverAjax.sendGetAjaxJSON(e, function(t) {
            if (t.status == 1) {
                p = t.data;
                var e;
                SAL_getStorage(v.uid + S + "time", function(t) {
                    e = t
                });
                if (e != null) {
                    v.upRunTimeAjax()
                }
                i && i()
            }
        }, function() {
            SAL_log("获取秘钥失败")
        }, a)
    }
    ;
    this.initUPTimer = function() {
        if (!Configuration.isH5) {
            return
        }
        var t = webConfig.UP_GAME_RUN_TIME;
        var e = {};
        var i = {};
        i["" + S] = 1;
        e.data = '{"run":' + JSON.stringify(i) + "}";
        e.uid = this.uid;
        e.ts = Math.round((new Date).getTime() / 1e3);
        e.check = md5(e.data + this.uid + e.ts + p);
        e.platform = I;
        e.channel_id = this.channel_id || 0;
        e.online_plat = w;
        if (clientType == 1) {
            e.channel_id = 100
        }
        var a = "";
        var s = countServer.createUuid();
        var n = serverTime.timestramp;
        e.nonce = s;
        e.timestamp = n;
        var r = Object.keys(e).sort().reverse();
        for (var o = 0; o < r.length; o++) {
            a += e[r[o]] && e[r[o]].toString()
        }
        serverAjax.sendPostJSON(t, function(t) {
            if (t.status == 1) {
                SAL_log("进入游戏，第一次上报成功")
            } else {
                SAL_log("进入游戏，第一次上报失败")
            }
        }, function() {
            SAL_log("进入游戏，第一次上报 接口报错")
        }, e)
    }
    ;
    this.upRunTimeAjax = function() {
        if (!Configuration.isH5 || GloableData.getInstance().userData.uid <= 0) {
            return
        }
        var t = "";
        var e;
        var i;
        var a = new Array;
        var s = new Array;
        SAL_getStorage("runtime", function(t) {
            e = t
        });
        SAL_getStorage("gameRuntime", function(t) {
            i = t || ""
        });
        if (e) {
            var n = e.split("|");
            for (var r = 0; r < n.length; r++) {
                if (n[r].length > 1) {
                    s.push(n[r].split("_")[0]);
                    a.push(n[r].split("_")[1])
                }
            }
            var c = {};
            if (s.length > 0 && a.length > 0) {
                for (var o = 0; o < a.length; o++) {
                    c["" + s[o]] = a[o]
                }
                i = JSON.stringify(c);
                t = '{"run":' + i + "}"
            }
            SAL_removeStorage("runtime")
        } else {
            if (i) {
                if (i.indexOf("/") != -1 || i.indexOf("|") != -1 || i.indexOf("null") != -1 || i.indexOf("_") != -1) {
                    SAL_removeStorage("gameRuntime");
                    t = '{"run":{"' + S + '":' + v.runTime + "}}"
                } else {
                    t = '{"run":' + i + "}"
                }
            } else {
                t = '{"run":{' + '"' + S + '"' + ":" + v.runTime + "}}"
            }
        }
        if (parseInt(this.uid) != GloableData.getInstance().userData.uid) {
            this.uid = GloableData.getInstance().userData.uid
        }
        var u = webConfig.UP_GAME_RUN_TIME;
        var h = {};
        h.data = t;
        h.uid = this.uid;
        h.ts = Math.round((new Date).getTime() / 1e3);
        h.check = md5(h.data + this.uid + h.ts + p);
        h.platform = I;
        h.channel_id = this.channel_id || 0;
        h.online_plat = w;
        if (clientType == 1) {
            h.channel_id = 100
        }
        var f = "";
        var d = countServer.createUuid();
        var m = serverTime.timestramp;
        h.nonce = d;
        h.timestamp = m;
        var g = Object.keys(h).sort().reverse();
        for (var l = 0; l < g.length; l++) {
            f += h[g[l]] && h[g[l]].toString()
        }
        if (this.pTime > 0) {
            serverAjax.sendPostJSON(u, function(t) {
                if (t.status == 1) {
                    SAL_removeStorage("gameRuntime")
                } else {
                    if (i) {
                        SAL_setStorage("gameRuntime", i)
                    } else {
                        var e = '{"' + S + '":' + v.runTime + "}";
                        SAL_setStorage("gameRuntime", e)
                    }
                }
                v.runTime = 0
            }, function() {
                if (i) {
                    SAL_setStorage("gameRuntime", i)
                } else {
                    var t = '{"' + S + '":' + v.runTime + "}";
                    SAL_setStorage("gameRuntime", t)
                }
            }, h)
        }
    }
    ;
    this.gameDuration = function() {
        if (!Configuration.isH5) {
            return
        }
        var t = 2;
        if (parseInt(quality) == 31) {
            t = 1
        } else {
            t = 2
        }
        var e = {
            status: 0,
            op: 5001,
            token: GloableData.getInstance().userData.token,
            gindex: S,
            guid: guid,
            name: encodeURIComponent(this.gName),
            channel_id: this.channel_id || 0,
            channel: channelName,
            group_id: 0,
            definition: t,
            engine: 2,
            uid: GloableData.getInstance().userData.uid || 0,
            platform: this.platformMap[u]
        };
        if (clientType == 1) {
            e.op = 6001;
            e.channel_id = 100
        } else {
            if (GloableData.getInstance().isMobile()) {
                if (GloableData.getInstance().isIos()) {
                    e.op = 3001
                } else {
                    e.op = 4001
                }
            }
        }
        if (!this.gName) {
            e.name = ""
        }
        var i = "";
        var a = countServer.createUuid();
        var s = serverTime.timestramp;
        e.nonce = a;
        e.timestamp = s;
        var n = Object.keys(e).sort().reverse();
        for (var r = 0; r < n.length; r++) {
            i += e[n[r]] && decodeURIComponent(e[n[r]].toString())
        }
        e.sign = md5(i + "t_16b4a01f45313e88");
        serverAjax.submitWebLog(e)
    }
    ;
    this.gameCount = function() {}
    ;
    this.submitAllFlow = function(t, e, i, a) {
        if (a) {
            if (!this.allWmodArr[a]) {
                this.allWmodArr[a] = {
                    allFlow: 0,
                    allFileNum: 0
                }
            }
            this.allWmodArr[a].allFlow += parseInt(t);
            this.allWmodArr[a].allFileNum += parseInt(e);
            if (this.allWmodArr[a].allFlow > 10 * 1024 * 1024) {
                this.gameFlow(i, a);
                this.allWmodArr[a].allFlow = 0;
                this.allWmodArr[a].allFileNum = 0;
                return
            }
        }
        this.allFlow += parseInt(t);
        this.allFileNum += parseInt(e);
        if (this.allFlow > 10 * 1024 * 1024) {
            this.gameFlow();
            this.allFlow = 0;
            this.allFileNum = 0
        }
    }
    ;
    this.gameFlow = function(t, e) {
        var i = u;
        if (clientType != 2 && u.indexOf("web") > -1) {
            i = isM ? "h5" : "66rpg"
        }
        t = t ? t : 0;
        e = e ? e : 0;
        var a = e ? this.allWmodArr[e].allFlow : this.allFlow;
        var s = e ? this.allWmodArr[e].allFileNum : this.allFileNum;
        var n = {
            op: 201,
            guid: guid,
            fb: a,
            fc: s,
            token: GloableData.getInstance().userData.token,
            ref: i,
            channel_id: this.channel_id || 0,
            channel: channelName,
            group_id: t,
            wmod_id: e,
            uid: GloableData.getInstance().userData.uid || 0,
            platform: this.platformMap[u]
        };
        if (clientType == 1) {
            n.channel_id = 100;
            n.ref = "wm" + n.ref
        }
        var r = "";
        var o = countServer.createUuid();
        var c = serverTime.timestramp;
        n.nonce = o;
        n.timestamp = c;
        var h = Object.keys(n).sort().reverse();
        for (var l = 0; l < h.length; l++) {
            r += n[h[l]] && n[h[l]].toString()
        }
        n.sign = md5(r + "t_16b4a01f45313e88");
        serverAjax.submitWebLog(n)
    }
    ;
    this.getWXPlayTime = function() {
        if (!GloableData.getInstance().userData.isLogin) {
            return
        }
        var t = v.upT * 60;
        v.initWXUploadTimer();
        var e = SAL_setInterval(function() {
            v.runTime += 1;
            t -= 1;
            if (t <= 0) {
                v.uploadWXGameRunTime();
                t = v.upT * 60
            }
        }, 1e3)
    }
    ;
    this.initWXUploadTimer = function() {
        if (!GloableData.getInstance().userData.isLogin) {
            return
        }
        var t = HttpURL.WX_PROGRAM_CG_RUNTIME_URL;
        var e = {};
        e.uid = GloableData.getInstance().userData.uid;
        e.gindex = S;
        e.readingTime = 1;
        serverAjax.sendPostJSON(t, function(t) {
            if (t.retCode == 1) {
                SAL_log("进入游戏，第一次上报成功")
            } else {
                SAL_log("进入游戏，第一次上报失败")
            }
        }, function() {
            SAL_log("进入游戏，第一次上报 接口报错")
        }, e)
    }
    ;
    this.uploadWXGameRunTime = function() {
        if (!GloableData.getInstance().userData.isLogin) {
            return
        }
        var t = HttpURL.WX_PROGRAM_CG_RUNTIME_URL;
        var e = {};
        e.uid = GloableData.getInstance().userData.uid;
        e.gindex = S;
        e.readingTime = v.runTime;
        serverAjax.sendPostJSON(t, function(t) {
            if (t.retCode == 1) {
                v.runTime = 0
            } else {
                SAL_log("游戏时长上报失败，未上报累计时长：" + v.runTime + " s")
            }
        }, function() {
            SAL_log("游戏时长上报失败，未上报累计时长：" + v.runTime + " s")
        }, e)
    }
    ;
    this.getUidByToken = function(i, a) {
        if (!GloableData.getInstance().userData.token) {
            SAL_log("can't get token");
            a && a()
        }
        var t = webConfig.GET_UID_BY_TOKEN + "?token=" + GloableData.getInstance().userData.token;
        serverAjax.sendGetAjaxJSON(t, function(t) {
            if (t.status != 1) {
                SAL_log("get uid failed!");
                a && a()
            } else {
                for (var e in t.data) {
                    v.uid = parseInt(t.data[e].uid);
                    GloableData.getInstance().userData.uid = parseInt(t.data[e].uid)
                }
                i && i(t.data)
            }
        }, function() {
            SAL_log("get uid failed!");
            a && a()
        })
    }
    ;
    this.createUuid = function() {
        var t = [];
        var e = "0123456789abcdef";
        for (var i = 0; i < 36; i++) {
            t[i] = e.substr(Math.floor(Math.random() * 16), 1)
        }
        t[14] = "4";
        t[19] = e.substr(t[19] & 3 | 8, 1);
        t[8] = t[13] = t[18] = t[23] = "-";
        var a = t.join("");
        return a
    }
}
String.prototype.replaceAll = function(t, e, i) {
    if (!RegExp.prototype.isPrototypeOf(t)) {
        return this.replace(new RegExp(t,i ? "gi" : "g"), e)
    } else {
        return this.replace(t, e)
    }
}
;
Array.prototype.contains = function(t) {
    for (var e = 0; e < this.length; e++) {
        if (this[e] == t) {
            return true
        }
    }
    return false
}
;
var isTestVer = false;
var toolVer = "2.5.11.0201";
var mapID = 0;
var g;
var tv;
var onTouchDown = false;
var onTouchUp = false;
var onTouchMove = false;
var onTouchDX = 0;
var onTouchDY = 0;
var onTouchX = 0;
var onTouchY = 0;
var onTouchLong = false;
var downTime = 0;
var clickThrough = false;
var onTouchClick = false;
var onTouchImageClick = false;
var fastTime = 0;
var fastImg;
var time = 0;
var oaudio = null;
var fontName = "微软雅黑";
var guid = "";
var ver = "";
var gIndex = "";
var fileList = {};
var gGameWidth = 960;
var gGameHeight = 540;
var screenWidth = 960;
var screenHeight = 540;
var gLoadAssets = null;
var sVLoadImg = null;
var sLoading = null;
var FPS = 60;
var quality = "";
var isFirstDownVarEx = true;
var game_bin_path = -1;
var isSCUI = false;
var isLoadExData = false;
var hintMessage;
var serverTime = -1;
var maintainingTimeID = 0;
var needPopupResume = true;
var webConfig;
var userId = "";
var exitGameCallback = null;
var eventContainer;
var key = "";
var textForMeasure;
var splash;
var offline = false;
var isSendMsgStart = false;
var countServer;
var addictionPreventionSurplusTime;
var addictionPreventionFlag = false;
var addictionPreventionMsg;
var addictionPreventionResetTime;
var addictionPreventionUserInfo;
var gameState = 1;
var isNeedPreventEnter = false;
var localProjectPath = "";
var saveDataPath = "";
var isIE = false;
var selfInput;
var wid = "";
var groupid = "";
var groupVer = "";
var timerPublish = false;
var publishVersion = -1;
var isCgMenu = true;
var channelName = "";
var clientVersion = "";
var clientType = 0;
var reviewing = 0;
var gGameX = 0;
var shopAVer = ["2.44", "2.30.278.0623"];
var filterAVer = ["2.46", "2.30.280.0727"];
var newButtonAVer = ["2.46", "2.31.283.0830"];
var addictionAver = ["", "2.31.285.0923"];
var clipAver = ["2.54", "2.32.287.1222"];
var inputAver = ["2.52", "2.32.287.1222"];
var showScore = 0;
var textScale = 1;
var systemFont = 1;
var mallUnit = " 朵";
var mallFlowerText = "剩余鲜花";
var mallPriceType = 0;
var web = 0;
var first_pub_time = "20220711";
var investigateImageList = [];
var investigateReplace = {
    540: investigateImages540_940,
    800: investigateImages940_540,
    960: investigateImages940_540,
    1280: investigateImages1280_720,
    1920: investigateImages940_540
};
var md5Map = {};
var messageNum = 0;
var adScene;
var adCooldown = false;
var adMessageCount = [5e4];
var messageCount = -1;
var mxMainView = null;
var fontSimple = null;
var globalFont = false;

function start(t, e, c, i, a, s, n, r, u, o, h, l, f, d, m, g, v, p) {
    var S = {
        index: t,
        q: e,
        aVer: r,
        aGuid: n,
        canvasWidth: i,
        canvasHeight: a,
        gid: o,
        gver: h,
        screenWidth: l,
        screenHeight: f,
        clientVersion: d,
        showScore: g,
        clientType: v,
        web: p
    };
    startEngine(S, s, "")
}

function startEngine(e, t, i) {
    gameState = 1;
    quality = e.q;
    guid = e.aGuid;
    gIndex = e.index;
    web = e.web;
    gGameWidth = parseInt(e.canvasWidth);
    gGameHeight = parseInt(e.canvasHeight);
    clientVersion = e.clientVersion ? e.clientVersion : 0;
    testPath = !!e.testPath;
    isM = !!e.isM;
    clientType = e.clientType ? e.clientType : 0;
    if (clientType == 1) {
        mallPriceType = 1
    }
    reviewing = e.reviewing ? e.reviewing : 0;
    if (e.networkParam) {
        Object.defineProperty(serverAjax, "networkParam", {
            get: function t() {
                return e.networkParam
            }
        })
    }
    refreshUserData();
    refreshGameInfo();
    if (!webConfig) {
        webConfig = new WebConfig(i)
    }
    if (clientType == 1) {
        webConfig.initWanManApi();
        initWanManURL();
        setWanManTips();
        mallUnit = "个";
        mallFlowerText = "剩余丸子"
    } else if (clientType == 2) {
        initFantasyURL()
    } else if (clientType == 5) {
        initCGSJURL()
    }
    GloableData.getInstance().getFlowerByMe();
    initGameFitURL();
    textScale = e.textScale;
    systemFont = e.systemFont;
    if (e.speedType == 0 || e.speedType) {
        GloableData.getInstance().talkSpeedType = e.speedType
    }
    var a = gGameWidth;
    var s = 0;
    var n = 0;
    if (e.screenWidth > e.screenHeight) {
        s = parseInt(e.screenWidth);
        n = parseInt(e.screenHeight)
    } else {
        s = parseInt(e.screenHeight);
        n = parseInt(e.screenWidth)
    }
    if (s && gGameWidth > gGameHeight) {
        if (s / n >= 2.025) {
            a = Math.floor(gGameHeight * s / n);
            gGameX = (a - gGameWidth) / 2
        }
    }
    showScore = e.showScore;
    groupid = e.gid;
    groupVer = e.gver;
    channelName = e.channelName ? e.channelName : "";
    if (quality == "0") {
        quality = "32"
    }
    timerPublish = timerPublish ? timerPublish : false;
    publishVersion = publishVersion ? publishVersion : -1;
    ver = timerPublish ? publishVersion : e.aVer;
    offline = false;
    if (clientType != 3 && clientType != 6) {
        countServer = new CountServer(gIndex);
        if (GloableData.getInstance().isWXOrg) {
            countServer.getWXPlayTime()
        } else {
            countServer.gamePlayTime()
        }
        if (serverTime == -1) {
            getServerTime(function() {
                countServer.gameDuration()
            })
        }
    }
    oaudio = new OAudio;
    tv = new TempVar;
    g = SAL_getCanvas(t, true, a, gGameHeight);
    SAL_setVisibleChangeListener(visibleChangeCallback);
    splash = new Splash;
    SAL_setElementIndex(g, splash.element, 1e5);
    splash.setPosition(gGameX, 0);
    if (!Configuration.isH5) {
        adScene = new SAdScene;
        SAL_setElementIndex(g, adScene.element, 9e4);
        adScene.setPosition(gGameX, 0)
    }
    gLoadAssets = new LoadAssets;
    tv.scene = gLoadAssets;
    hintMessage = new CHintMessage;
    if (clientType != 3 && clientType != 6) {
        if (Configuration.isH5 && GloableData.getInstance().getIsUnaudited()) {
            var r = new UnauditedText
        }
    }
    eventContainer = SALContainer(gGameWidth, gGameHeight);
    SAL_setElementBlockTouch(eventContainer, false);
    SAL_setElementIndex(g, eventContainer, 1e3);
    SAL_setPosition(eventContainer, gGameX, 0);
    SAL_globalUpdate(g, run);
    if (maintainingTimeID == 0) {
        maintainingTimeID = SAL_setInterval(maintainingTime, 1e3)
    }
    tv.getFlower()
}

function setTestVer() {
    if (isTestVer) {
        var t = new OContainer(gGameWidth,50);
        SAL_setElementIndex(g, t.element, 11e4);
        t.setPosition(gGameX, gGameHeight - 50);
        var e = new OBitmap(autoSaveMaskPath);
        e.setAlpha(.5);
        t.addChild(e);
        var i = "此为内部版效果 工具版本：" + toolVer;
        var a = new OText(i);
        if (a.textWidth > gGameWidth) {
            a.setTextSize(18)
        }
        a.setColor(get16Color("#ffd023"));
        t.addChild(a);
        a.setPosition(gGameWidth - a.textWidth >> 1, 15);
        e.setSize(a.textWidth + 30, 50);
        e.setPosition(gGameWidth - a.textWidth - 30 >> 1, 0)
    }
}

function showPaySendUI(t, e) {
    var i = new CPaySendUI(t,e);
    SAL_setElementIndex(g, i.element, 9e3);
    i.setPosition(gGameX, 0)
}

function refreshUserData() {
    GloableData.getInstance().userData = SAL_getUserData();
    if (GloableData.getInstance().userData.platform.toLowerCase().indexOf("ios") >= 0) {
        GloableData.getInstance().userData.isLogin = true
    }
    if (tv && tv.canvas && tv.canvas.cWebFree) {
        tv.canvas.cWebFree.checkFreeStatus()
    }
    if (!GloableData.getInstance().isMobile() || localProjectPath) {
        preventDebug()
    }
}

function refreshGameInfo() {
    GloableData.getInstance().gameInfo = SAL_getGameInfo();
    GloableData.getInstance().savekey = "save" + guid + (GloableData.getInstance().userData.uid ? GloableData.getInstance().userData.uid : 0)
}

function visibleChangeCallback(t) {
    if (t) {
        oaudio.pauseBgAudio();
        stopSpeedRead();
        if (isSendMsgStart) {
            sendMsgToClient(JSON.stringify({
                type: 6,
                status: 1,
                msg: "游戏结束",
                data: {
                    freeLimitType: GloableData.getInstance().freeLimitType,
                    time: countServer.runAllTime
                }
            }), null)
        }
    } else {
        oaudio.resumeBgAudio()
    }
}

function stopSpeedRead() {
    time = 0;
    onTouchMove = false;
    onTouchDown = false;
    onTouchClick = false;
    onTouchImageClick = false;
    clickThrough = false;
    downTime = 0;
    onTouchLong = false;
    fastTime = 0;
    if (fastImg != null) {
        SAL_setElementVisible(fastImg, false)
    }
    if (tv.canvas) {
        tv.canvas.setChatSlideContainer()
    }
}

function testHackSign() {
    return "hack prevent"
}

function addEvent() {
    SAL_addTouchDown(eventContainer, mDown, null);
    SAL_addTouchMove(eventContainer, mMove, null);
    SAL_addTouchUp(eventContainer, mUp, null);
    SAL_addTouchCancel(eventContainer, mUp, null)
}

function run() {
    if (gameState == 2) {
        return
    }
    if (sVLoadImg && sVLoadImg.isLoad) {
        sVLoadImg.update()
    }
    if (splash) {
        splash.update()
    }
    if (gLoadAssets && gLoadAssets.bloadAssets) {
        gLoadAssets.update()
    } else if (sLoading && sLoading.loading) {
        sLoading.update()
    } else {
        tv.scene.update()
    }
    if (hintMessage && hintMessage.message) {
        hintMessage.update()
    }
    if (tv.DataVer >= 104 && tv.canvas) {
        tv.canvas.sFloatButton && tv.canvas.sFloatButton.update()
    }
    oaudio.update();
    if (onTouchUp && time >= 1) {
        onTouchUp = false;
        onTouchClick = false;
        time = -1
    }
    if (onTouchDX - onTouchX > 100 && onTouchMove) {
        onTouchDX = onTouchX
    }
    if (time >= 0) {
        time += 1
    }
    if (onTouchDown) {
        downTime += 1
    }
    if (downTime >= FPS * .5 && fastTime == 8) {
        onTouchLong = true;
        onTouchImageClick = false
    }
    onTouchClick = false
}

function mDown(t) {
    if (clientType != 3 && clientType != 6) {
        countServer.upEffectiveClick()
    }
    downTime = 0;
    onTouchDown = true;
    onTouchUp = false;
    onTouchClick = false;
    onTouchImageClick = true;
    onTouchX = onTouchDX = t.x - gGameX;
    onTouchY = onTouchDY = t.y
}

function mMove(t) {
    if (onTouchDown) {
        if (clientType != 3 && clientType != 6) {
            countServer.upEffectiveClick()
        }
        onTouchMove = true
    }
    onTouchX = t.x - gGameX;
    onTouchY = t.y
}

function mUp(t) {
    onTouchUp = true;
    var e = clickThrough;
    var i = downTime;
    var a = onTouchDown;
    stopSpeedRead();
    if (e) {
        onTouchClick = false
    } else {
        if (a && i < FPS * .35) {
            onTouchClick = true
        }
    }
    onTouchImageClick = false;
    onTouchX = -1;
    onTouchY = -1
}

function onClick() {
    return onTouchClick
}

function fileListFato(t) {
    if (!t || t.length <= 0) {
        return ""
    }
    t = t.toLowerCase().replace(/\\/g, "/");
    t = t.replace(/\/\//g, "/");
    if (localProjectPath) {
        t = localProjectPath + "/" + t;
        if (!isLocalFileExist(t)) {
            t = ""
        }
        return t
    }
    if (!fileList[t]) {
        return ""
    }
    if (clientType != 3 && clientType != 6) {
        upTrafficFileNum(fileList[t])
    }
    return fileList[t].url()
}

function fileListFatoObj(t) {
    if (!t || t.length <= 0) {
        return ""
    }
    t = t.toLowerCase().replace(/\\/g, "/");
    t = t.replace(/\/\//g, "/");
    if (localProjectPath) {
        t = localProjectPath + "/" + t;
        var e = {};
        e.url = function() {
            return t
        }
        ;
        if (!isLocalFileExist(t)) {
            e = ""
        }
        return e
    }
    if (!fileList[t]) {
        return ""
    }
    if (clientType != 3 && clientType != 6) {
        upTrafficFileNum(fileList[t])
    }
    return fileList[t]
}

function upTrafficFileNum(t) {
    if (!SAL_checkSRCPreloaded(g, t.url()) || t.fileName == "data/game.bin") {

        countServer.submitAllFlow(t.fileSize, 1)
        if (t.fileName == "data/game.bin") {
            gg = t.md5;
        }
    }
}

function hasFileItem(t) {
    if (!t || t.length <= 0) {
        return false
    }
    t = t.toLowerCase().replace(/\\/g, "/");
    t = t.replace(/\/\//g, "/");
    if (localProjectPath) {
        return isLocalFileExist(localProjectPath + "/" + t)
    }
    return !!fileList[t]
}

function exitGame() {
    SAL_globalUpdate(g, null);
    SAL_removeTouchDown(eventContainer, mDown, null);
    SAL_removeTouchMove(eventContainer, mMove, null);
    SAL_removeTouchUp(eventContainer, mUp, null);
    SAL_setVisibleChangeListener(null);
    if (gLoadAssets) {
        gLoadAssets.dispose();
        gLoadAssets = null
    }
    if (sLoading) {
        sLoading.dispose();
        sLoading = null
    }
    if (tv) {
        tv.dispose();
        tv = null
    }
    if (sVLoadImg) {
        sVLoadImg.dispose();
        sVLoadImg = null
    }
    if (oaudio) {
        oaudio.dispose();
        oaudio = null
    }
    if (hintMessage) {
        hintMessage.dispose();
        hintMessage = null
    }
    GloableData.getInstance().mallBuyItem = new Dictionary;
    needPopupResume = true;
    fileList = {};
    return true
}

function setUserInfo(t) {
    userId = t
}

function setExitGameCallback(t) {
    exitGameCallback = t
}

function createImage(t, e, i, a) {
    var s = SALSprite(t);
    if (!t) {
        return s
    }
    if (e) {
        SAL_setPosition(s, e.x, e.y)
    }
    if (a) {
        SAL_addElement(a, s)
    } else {
        SAL_addElement(g, s)
    }
    if (i) {
        SAL_setElementSize(s, i.w, i.h)
    }
    return s
}

function createText(t) {
    var e = "";
    if (t.text) {
        e = t.text
    }
    var i = SALText(e);
    if (clientType == 6 && globalFont && fontSimple) {
        SAL_setTextFont(i, fontSimple)
    } else if (t.font) {
        SAL_setTextFont(i, t.font)
    }
    if (t.fontSize) {
        SAL_setTextFontSize(i, t.fontSize)
    }
    SAL_setTextColor(i, t.fontColor);
    if (t.pos) {
        SAL_setPosition(i, t.pos.x, t.pos.y)
    }
    return i
}

function refreshCurScene() {
    if (tv.scene instanceof SGameNewMall || tv.scene instanceof SGameMall) {
        refreshShopFlower()
    }
    if (tv.scene instanceof SCUI) {
        tv.scene.dispose();
        tv.scene.Build(tv.CUIFromIndex)
    }
}

function WebAudioControl(t) {
    oaudio.silenceAudio(t)
}

function WebUserLoginOut() {
    GloableData.getInstance().savekey = "save" + guid + GloableData.getInstance().userData.uid;
    tv.system && tv.system.varsEx.clearData();
    GloableData.getInstance().clearUserMax()
}

function WebUserLoginIn() {
    WebUserLoginOut()
}

function WebUserChangeData() {
    refreshUserData();
    GloableData.getInstance().savekey = "save" + guid + GloableData.getInstance().userData.uid;
    GloableData.getInstance().changeFileData();
    operationFrame.loadShot();
    tv.system.varsEx.loadExData(true, function() {
        GloableData.getInstance().getFlowerByMe(refreshCurScene)
    });
    if (tv.scene instanceof SSavefile) {
        tv.scene.cloudData = {};
        if (firstSave && (GloableData.getInstance().isFreeLimit || Configuration.isH5)) {
            GloableData.getInstance().isCloud = GloableData.getInstance().userData.isLogin
        }
        tv.scene.refreshSaveData()
    }
    GloableData.getInstance().getLightFreeStatus(function() {
        if (!tv || !tv.canvas) {
            return
        }
        if (tv.canvas.cWebFree) {
            if (!GloableData.getInstance().isFreeLimit) {
                tv.canvas.cWebFree.dispose()
            } else {
                tv.canvas.cWebFree.checkFreeStatus()
            }
            if (!GloableData.getInstance().isFreeLimit) {
                tv.canvas.cTrialReading = new STrialReading
            }
        } else {
            if (GloableData.getInstance().isFreeLimit) {
                tv.canvas.cWebFree = new SWebFree
            }
        }
    });
    if (tv.scene instanceof SMallLock) {
        tv.scene.updateView()
    }
}

function WebFontSpeedControl(t) {
    if (t == "low") {
        GloableData.getInstance().talkSpeedType = gloableStaticData.DRAW_SPEED_TYPE_LOW
    } else if (t == "center") {
        GloableData.getInstance().talkSpeedType = gloableStaticData.DRAW_SPEED_TYPE_CENTER
    } else if (t == "fast") {
        GloableData.getInstance().talkSpeedType = gloableStaticData.DRAW_SPEED_TYPE_FAST
    }
}

function OnKeyDown(t) {
    var e = false;
    if (GloableData.getInstance().gameInfo.isPc) {
        if (t.keyCode == 90 || t.keyCode == 17) {
            e = true
        }
    } else {
        if (t.keyCode == 90) {
            e = true
        }
    }
    if (e && tv.scene instanceof SGame) {
        onTouchLong = true
    }
}

function OnKeyUp(t) {
    if (t.keyCode == 90 || t.keyCode == 17) {
        onTouchLong = false
    }
    if (t.keyCode == 67) {
        if (tv.scene instanceof SGame && tv.canvas.menuShow) {
            tv.canvas.clickMenu()
        } else {}
    }
}

function maintainingTime() {
    if (serverTime && serverTime != -1) {
        serverTime.timestramp++;
        var t = new Date(serverTime.timestramp * 1e3);
        serverTime.second = t.getSeconds();
        serverTime.minute = t.getMinutes();
        serverTime.hour = t.getHours();
        serverTime.day = t.getDate();
        serverTime.week = t.getDay();
        serverTime.month = t.getMonth() + 1;
        serverTime.year = t.getFullYear()
    }
    if (clientType != 3 && clientType != 6) {
        if (serverTime && serverTime != -1 && addictionPreventionResetTime == serverTime.timestramp) {
            getAddictionTime();
            addictionPreventionFlag = false;
            countServer.cumulativeEffectiveTime = 0
        }
        if (typeof addictionPreventionSurplusTime != "undefined" && addictionPreventionSurplusTime == countServer.cumulativeEffectiveTime) {
            if (tv.scene instanceof SStart) {
                tv.scene.dispose()
            }
            activateAddictionPrevention()
        } else if (addictionPreventionSurplusTime == 0 && !(tv.scene instanceof SAddictionPrevention)) {
            activateAddictionPrevention()
        }
    }
}
var measureText = function t(e) {
    if (!textForMeasure) {
        textForMeasure = SALText(e, null, true);
        SAL_setElementVisible(textForMeasure, false);
        SAL_setElementIndex(g, textForMeasure, 0);
        SAL_setPosition(textForMeasure, gGameX, 0)
    } else {
        SAL_resetElement(textForMeasure, e)
    }
    return SAL_getTextSize(textForMeasure)
};
var errorMessageView = null;

function setWindowLine(t) {
    if (t) {
        offline = false;
        if (errorMessageView) {
            errorMessageView.dispose();
            errorMessageView = null
        }
    } else {
        offline = true;
        errorMessageView = new CHPLockErrorMessageView
    }
}

function SCUIExternalGoBack() {
    if (tv.scene instanceof SSavefile || tv.scene instanceof SCG || tv.scene instanceof SBGM || tv.scene instanceof SSystem || tv.scene instanceof SCGMenu || tv.scene instanceof SGameMall || tv.scene instanceof SGameNewMall || tv.scene instanceof SMenu || tv.scene instanceof SReplay || tv.scene instanceof SCUI) {
        if (tv.scene instanceof SSavefile || tv.scene instanceof SCG || tv.scene instanceof SBGM || tv.scene instanceof SSystem || tv.scene instanceof SReplay) {
            tv.scene.dispose(true)
        } else {
            tv.scene.dispose();
            tv.scene = new SGame
        }
    } else {
        SAL_exitOrFullScreen(false)
    }
}

function convertMD5ToCDNPath(t) {
    return webConfig.CDN_SRC_URL + t.substr(0, 2).toLowerCase() + "/" + t
}

function showMessageCallback(t) {
    if (Configuration.isH5) {
        return
    }
    if (t) {
        messageNum += t.message.length
    }
    if (messageCount < 0) {
        setMessageCount()
    }
    if (messageNum >= messageCount) {
        setAdMask();
        setMessageCount()
    }
}

function setMessageCount() {
    if (adMessageCount.length > 0) {
        messageCount = adMessageCount[0];
        adMessageCount.shift()
    } else {
        messageCount = 5e3
    }
}

function setAdMask() {
    messageNum = 0;
    stopSpeedRead();
    adScene.showMask();
    SAL_showADVideo(function() {
        adScene.hideMask()
    })
}

function activateAddictionPrevention() {
    if (tv.scene instanceof SAddictionPrevention || tv.scene instanceof SSavefile) {
        return
    }
    var t = false;
    if (tv.storyList) {
        t = tv.storyList.currentStory && tv.storyList.currentStory.event ? true : false
    }
    var e = addictionPreventionUserInfo.userRealName == 0 ? 1 : 2;
    e = addictionPreventionUserInfo.userIsVisitor ? 0 : e;
    tv.scene = new SAddictionPrevention(addictionPreventionMsg,t,e);
    addictionPreventionFlag = true
}

function pauseGame() {
    gameState = 2
}

function playGame() {
    gameState = 1
}

function backToMainMenu() {
    if (tv.scene instanceof SCUI) {
        tv.scene.dispose()
    }
    GloableData.getInstance().isTimeMallGoods = 0;
    GloableData.getInstance().welfareGetData = new WelfareGetData;
    tv.canvas.sFloatButton && tv.canvas.sFloatButton.setVisible(false);
    tv.canvas.isShowTextStyle = 0;
    tv.canvas.clear();
    tv.system.clear();
    tv.storyList = new IStoryList;
    tv.inter = new IMain;
    tv.storyList.addStory(tv.inter);
    for (var t = 0; t < tv.canvas.message.length; t++) {
        tv.canvas.message[t].msgBoxFadeOut()
    }
    tv.scene = new SStart
}

function refreshAddictionPreventionTime(t) {
    if (clientType == 3 || clientType == 6) {
        return
    }
    if (parseInt(GloableData.getInstance().userData.uid) > 0) {
        serverAjax.getAddictionPreventionTime(t)
    } else if (parseInt(GloableData.getInstance().userData.uid) <= 0) {
        if (GloableData.getInstance().isMobile()) {
            countServer.getUidByToken(function() {
                serverAjax.getAddictionPreventionTime(t)
            }, function() {
                t && t(-1)
            })
        } else {
            if (clientType != 3 && clientType != 6) {
                serverAjax.getAddictionPreventionTime(t)
            } else {
                t && t(-1)
            }
        }
    } else {
        t && t(-1)
    }
}

function getAddictionTime() {
    refreshAddictionPreventionTime(updateAddictionTimeCallBack)
}

function refreshAfterLogin() {
    var t = GloableData.getInstance().userData.uid;
    refreshUserData();
    if (t != GloableData.getInstance().userData.uid) {
        GloableData.getInstance().getFlowerByMe();
        getAddictionTime();
        countServer.cumulativeEffectiveTime = 0;
        addictionPreventionFlag = false
    }
}

function updateAddictionTimeCallBack(t, e, i) {
    if (parseInt(t) == 200 && e && e.data) {
        updateAddictionPreventionTime(e.data)
    }
    i && i()
}

function updateAddictionPreventionTime(t) {
    addictionPreventionMsg = t.alert_msg;
    addictionPreventionResetTime = t.next_time;
    addictionPreventionSurplusTime = t.play_time;
    addictionPreventionUserInfo = {
        userRealName: t.real_name,
        userRealAge: t.real_age,
        userIsVisitor: t.is_visitor
    };
    if (clientType != 3 && clientType != 6) {
        countServer.cumulativeEffectiveTime = 0
    }
}

function getServerTime(i) {
    serverAjax.getServerTime(function(t, e) {
        if (t == 200 && e.status == 1) {
            serverTime = e.data
        } else {
            serverTime = -1
        }
        i && i()
    })
}

function getMobileVer(t) {
    if (clientType > 0 && clientType < 4 || clientType == 6) {
        return true
    }
    var e = void 0;
    if (GloableData.getInstance().isIos()) {
        e = t[0]
    } else {
        e = t[1]
    }
    if (!clientVersion) {
        return false
    }
    var i = e.split(".").map(Number);
    var a = clientVersion.split(".").map(Number);
    for (var s = 0; s < a.length; s++) {
        if (a[s] > i[s] || !i[s]) {
            return true
        }
        if (a[s] < i[s]) {
            return false
        }
    }
    return true
}

function sendMsgToClient(t, e) {
    if (getMobileVer(newButtonAVer)) {
        SAL_sendMessage(t, e)
    }
}

function preventDebug() {
    var t = 0;
    var e = new Date;
    e.toString = function() {
        t++;
        if (t > 1) {
            window.location.href = "https://www.66rpg.com/"
        }
    }
    ;
    console.log("", e)
}

function ODisplayObject() {
    this.id = "";
    this.type = 0;
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    this.scale_x = 1;
    this.scale_y = 1;
    this.anchor_x = 0;
    this.anchor_y = 0;
    this.element = null;
    this.rotation = 0;
    this.rotateType = -1;
    this.rotateCenterX = 0;
    this.rotateCenterY = 0;
    this.alpha = 1;
    this.mirror = false;
    this.visible = true;
    this.block = null;
    this.mouseEnable = true;
    this.parent = null;
    this.tag = null;
    this.maskImg = null;
    this.materialData = null;
    this.currentMaterialData = null;
    this.originalMaterialData = null;
    this.deltaMaterialData = null;
    this.maskDuration = -1;
    this.isUpdatingMaterial = false;
    this.index = 0;
    this.setPosition = function(t, e) {
        if (t != this.x) {
            this.x = t
        }
        if (e != this.y) {
            this.y = e
        }
        SAL_setPosition(this.element, this.x, this.y)
    }
    ;
    this.setSize = function(t, e) {
        if (t != this.width) {
            this.width = t
        }
        if (e != this.height) {
            this.height = e
        }
        SAL_setElementSize(this.element, this.width, this.height)
    }
    ;
    this.setScale = function(t, e) {
        if (t != this.scale_x) {
            this.scale_x = t
        }
        if (e != this.scale_y) {
            this.scale_y = e
        }
        SAL_setElementScale(this.element, this.scale_x, this.scale_y)
    }
    ;
    this.setAnchor = function(t, e) {
        if (t != this.anchor_x) {
            this.anchor_x = t
        }
        if (e != this.anchor_y) {
            this.anchor_y = e
        }
        SAL_setElementAnchor(this.element, this.anchor_x, this.anchor_y)
    }
    ;
    this.setAlpha = function(t) {
        if (t != this.alpha) {
            this.alpha = t
        }
        SAL_setElementOpacity(this.element, this.alpha)
    }
    ;
    this.setRotation = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .5;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .5;
        this.rotation = t;
        SAL_setRotate(this.element, this.rotation, e, i)
    }
    ;
    this.setVisible = function(t) {
        if (t != this.visible) {
            this.visible = t;
            SAL_setElementVisible(this.element, this.visible)
        }
    }
    ;
    this.setIndex = function(t) {
        this.index = t;
        if (this.parent.element) {
            SAL_setElementIndex(this.parent.element, this.element, t)
        } else {
            SAL_setElementIndex(this.parent, this.element, t)
        }
    }
    ;
    this.setBlockTouch = function(t) {
        if (t != this.block) {
            this.block = t;
            SAL_setElementBlockTouch(this.element, this.block);
            if (this.block) {
                SAL_addClick(this.element, function() {});
                SAL_addTouchDown(this.element, function() {});
                SAL_addTouchUp(this.element, function() {});
                SAL_addTouchMove(this.element, function() {})
            } else {
                SAL_removeClick(this.element, function() {});
                SAL_removeTouchDown(this.element, function() {});
                SAL_removeTouchUp(this.element, function() {});
                SAL_removeTouchMove(this.element, function() {})
            }
        }
    }
    ;
    this.moveTo = function(t, e, i, a) {
        this.x = t;
        this.y = e;
        var s = SALAction({
            type: "moveTo",
            targetX: t,
            targetY: e,
            duration: i,
            callback: a
        });
        SAL_runAction(this.element, s, a)
    }
    ;
    this.scaleTo = function(t, e, i, a) {
        this.scale_x = t;
        this.scale_y = e;
        var s = SALAction({
            type: "zoomTo",
            targetX: t,
            targetY: e,
            duration: i,
            callback: a
        });
        SAL_runAction(this.element, s, a)
    }
    ;
    this.fadeTo = function(t, e, i) {
        this.alpha = t;
        if (e <= 0) {
            SAL_setElementOpacity(this.element, t);
            i && i()
        } else {
            var a = SALAction({
                type: "fadeTo",
                opacity: t,
                duration: e,
                callback: i
            });
            SAL_runAction(this.element, a, i)
        }
    }
    ;
    this.groupTo = function(t, e, i) {
        this.alpha = i.opacity;
        this.x = i.X;
        this.y = i.Y;
        this.scale_x = i.scaleX;
        this.scale_y = i.scaleY;
        SAL_runAction(this.element, t, e)
    }
    ;
    this.rotateImage = function(t, e, i, a) {
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        this.rotation = t;
        this.rotateType = n;
        this.rotateCenterX = i;
        this.rotateCenterY = a;
        var r = .5;
        var o = .5;
        switch (n) {
        case 0:
            r = .5;
            o = .5;
            break;
        case 1:
            r = 0;
            o = 0;
            break;
        case 10:
            r = i / this.width;
            o = a / this.height;
            break
        }
        var h = SALAction({
            type: "rotateTo",
            angle: this.rotation,
            duration: e,
            targetX: r,
            targetY: o,
            loop: s
        });
        SAL_runAction(this.element, h)
    }
    ;
    this.setMouseEnable = function(t) {
        this.mouseEnable = t;
        SAL_setElementMouseEnable(this.element, this.mouseEnable)
    }
    ;
    this.setTransparencyFiltering = function(t) {
        SAL_setTransparencyFiltering(this.element, t)
    }
    ;
    this.addEvent = function(t, e, i, a) {
        if (t == "click") {
            SAL_addClick(this.element, e, i, a)
        } else if (t == "touchDown") {
            SAL_addTouchDown(this.element, e, i, a)
        } else if (t == "touchUp") {
            SAL_addTouchUp(this.element, e, i, a)
        } else if (t == "touchCancel") {
            SAL_addTouchCancel(this.element, e, i, a)
        } else if (t == "touchMove") {
            SAL_addTouchMove(this.element, e, i, a)
        } else if (t == "touchEnter") {
            SAL_addTouchEnter(this.element, e, i, a)
        }
    }
    ;
    this.removeEvent = function(t, e) {
        if (t == "click") {
            SAL_removeClick(this.element, e)
        } else if (t == "touchDown") {
            SAL_removeTouchDown(this.element, e)
        } else if (t == "touchUp") {
            SAL_removeTouchUp(this.element, e)
        } else if (t == "touchCancel") {
            SAL_removeTouchCancel(this.element, e)
        } else if (t == "touchMove") {
            SAL_removeTouchMove(this.element, e)
        } else if (t == "touchEnter") {
            SAL_removeTouchEnter(this.element, e)
        }
    }
    ;
    this.setTransparencyFiltering = function(t) {
        if (Configuration.isIOS) {
            return
        }
        SAL_setTransparencyFiltering(this.element, t)
    }
    ;
    this.setSizeGrid = function(t, e, i) {
        this.sizeGrid = t;
        this.width = e;
        this.height = i;
        SAL_ninePartDivide(this.element, this.sizeGrid, e, i)
    }
    ;
    this.setClip = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        SAL_setElementClip(this.element, t, e, i, a)
    }
    ;
    this.resetClip = function() {
        if (!GloableData.getInstance().isMobile() || getMobileVer(clipAver)) {
            SAL_resetElementClip(this.element)
        }
    }
    ;
    this.setMirror = function(t) {
        this.mirror = t;
        SAL_setElementMirrorType(this.element, t ? 1 : 0)
    }
    ;
    this.stopAction = function() {
        SAL_stopElementAction(this.element);
        this.rotateImage(0, 1, 0, 0, false, 0)
    }
    ;
    this.stopToGoal = function() {
        this.stopAction();
        this.setPosition(this.x, this.y);
        this.setScale(this.scale_x, this.scale_y);
        this.setAlpha(this.alpha);
        this.rotateImage(this.rotation, 1, this.rotateCenterX, this.rotateCenterY, false, this.rotateType)
    }
    ;
    this.getRect = function() {
        var t = SAL_getElementWidth(this.element);
        var e = SAL_getElementHeight(this.element);
        return {
            x: this.x,
            y: this.y,
            width: t * this.scale_x,
            height: e * this.scale_y
        }
    }
    ;
    this.setMask = function(t, e, i) {
        this.maskImg = t;
        this.materialData = e;
        SAL_setMask(this.element, this.maskImg, this.materialData, i)
    }
    ;
    this.updateMask = function() {
        if (!this.isUpdatingMaterial) {
            return
        }
        this.updateMaterial();
        SAL_setMask(this.element, this.maskImg, this.originalMaterialData)
    }
    ;
    this.getMaterialDeltaValue = function() {
        if (!this.originalMaterialData || !this.materialData) {
            this.isUpdatingMaterial = false;
            return
        }
        this.deltaMaterialData = JSON.parse(JSON.stringify(this.originalMaterialData));
        var t = (this.materialData.offsetX - this.originalMaterialData.offsetX) / this.maskDuration;
        var e = (this.materialData.offsetY - this.originalMaterialData.offsetY) / this.maskDuration;
        var i = (this.materialData.alpha - this.originalMaterialData.alpha) / this.maskDuration;
        var a = (this.materialData.r - this.originalMaterialData.r) / this.maskDuration;
        var s = (this.materialData.g - this.originalMaterialData.g) / this.maskDuration;
        var n = (this.materialData.b - this.originalMaterialData.b) / this.maskDuration;
        var r = (this.materialData.gray - this.originalMaterialData.gray) / this.maskDuration;
        var o = (this.materialData.hue - this.originalMaterialData.hue) / this.maskDuration;
        this.deltaMaterialData.offsetX = t;
        this.deltaMaterialData.offsetY = e;
        this.deltaMaterialData.alpha = i;
        this.deltaMaterialData.r = a;
        this.deltaMaterialData.g = s;
        this.deltaMaterialData.b = n;
        this.deltaMaterialData.gray = r;
        this.deltaMaterialData.hue = o
    }
    ;
    this.updateMaterial = function() {
        if (!this.deltaMaterialData || this.maskDuration <= 0) {
            this.isUpdatingMaterial = false;
            return
        }
        this.maskDuration--;
        this.originalMaterialData.offsetX += this.deltaMaterialData.offsetX;
        this.originalMaterialData.offsetY += this.deltaMaterialData.offsetY;
        this.originalMaterialData.alpha += this.deltaMaterialData.alpha;
        this.originalMaterialData.r += this.deltaMaterialData.r;
        this.originalMaterialData.g += this.deltaMaterialData.g;
        this.originalMaterialData.b += this.deltaMaterialData.b;
        this.originalMaterialData.gray += this.deltaMaterialData.gray;
        this.originalMaterialData.hue += this.deltaMaterialData.hue
    }
    ;
    this.diffMaterialData = function(t) {
        var e = false;
        if (this.materialData) {
            e = !(JSON.stringify(this.materialData) == JSON.stringify(t));
            if (this.materialData.type != t.type) {
                e = true
            }
        } else {
            e = true
        }
        return e
    }
    ;
    this.dispose = function() {
        SAL_destroyElement(this.element);
        this.parent = null;
        this.tag = null
    }
    ;
    this.getBaseSaveData = function() {
        var t = this.alias + "|";
        t += this.id + "|";
        t += this.type + "|";
        t += this.x + "|";
        t += this.y + "|";
        t += this.z + "|";
        t += this.width + "|";
        t += this.height + "|";
        t += this.alpha + "|";
        t += Number(this.visible) + "|";
        return t
    }
    ;
    this.loadBaseData = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        this.alias = t.shift();
        this.id = t.shift();
        this.type = t.shift();
        this.x = t.shift();
        this.y = t.shift();
        this.z = t.shift();
        this.width = t.shift();
        this.height = t.shift();
        this.alpha = t.shift();
        this.visible = t.shift()
    }
}

function OBitmap(t, e, i) {
    var a = this;
    ODisplayObject.call(this);
    this.url = "";
    this.imageUrl = "";
    this.sizeGrid = [];
    this.pathObj = null;
    this.successCB = e;
    this.failCB = i;
    this.element = SALSprite("", function() {
        a.width = SAL_getElementWidth(a.element);
        a.height = SAL_getElementHeight(a.element);
        if (quality == 31) {
            if (a.pathObj && a.pathObj.obj.w != -1) {
                a.setSize(parseInt(a.pathObj.obj.w), parseInt(a.pathObj.obj.h))
            }
        }
        a.successCB && a.successCB()
    }, function() {
        a.failCB && a.failCB()
    });
    this.setUrl = function(t) {
        this.imageUrl = t;
        if (t && t.toLowerCase().indexOf("graphics/") != -1) {
            this.pathObj = fileListFatoObj(t);
            if (this.pathObj) {
                this.imageUrl = this.pathObj.url()
            } else {
                this.imageUrl = "";
                this.failCB && this.failCB()
            }
        }
        if (this.url != t) {
            this.url = t;
            SAL_resetElement(this.element, this.imageUrl)
        }
    }
    ;
    this.clip = function(t, e, i, a) {
        this.width = i;
        this.height = a;
        SAL_setElementClip(this.element, i, a, t, e)
    }
    ;
    this.setUrl(t)
}

function OContainer(t, e) {
    ODisplayObject.call(this);
    this.width = t;
    this.height = e;
    this.element = SALContainer(t, e);
    this.childList = [];
    this.addChild = function(t) {
        if (t.element) {
            t.parent = this;
            SAL_addElement(this.element, t.element)
        } else {
            SAL_addElement(this.element, t)
        }
        this.childList.push(t);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.removeChild = function(t) {
        t.parent = null;
        if (t.element) {
            SAL_removeElement(this.element, t.element);
            SAL_destroyElement(t.element)
        } else {
            SAL_removeElement(this.element, t);
            SAL_destroyElement(t)
        }
        this.childList.splice(this.childList.indexOf(t), 1);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.setChildIndex = function(t, e) {
        if (t.element) {
            SAL_setElementIndex(this.element, t.element, e)
        } else {
            SAL_setElementIndex(this.element, t, e)
        }
    }
    ;
    this.removeRelationship = function(t) {
        t.parent = null;
        if (t.element) {
            SAL_removeElement(this.element, t.element)
        } else {
            SAL_removeElement(this.element, t)
        }
        this.childList.splice(this.childList.indexOf(t), 1);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.removeAllRelationship = function() {
        var e = this;
        this.childList.forEach(function(t) {
            t.parent = null;
            if (t.element) {
                SAL_removeElement(e.element, t.element)
            } else {
                SAL_removeElement(e.element, t)
            }
        });
        this.childList = [];
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.clearChildren = function() {
        var t, e, i = this.childList.length;
        for (t = 0; t < i; t++) {
            e = this.childList[t];
            if (e.element) {
                SAL_removeElement(this.element, e.element);
                SAL_destroyElement(e.element)
            } else {
                SAL_removeElement(this.element, e);
                SAL_destroyElement(e)
            }
        }
        this.childList.length = 0;
        this.width = this.height = 0
    }
}

function OText(t, i, e) {
    ODisplayObject.call(this);
    this.text = t + "";
    this.size = e ? e : 20;
    this.lineHeight = 24;
    this.textWidth = 0;
    this.textHeight = 0;
    if (systemFont) {
        i = false
    }
    this.element = SALText(this.text, null, i);
    SAL_setTextFontSize(this.element, this.size);
    if (clientType == 6 && globalFont && fontSimple) {
        SAL_setTextFont(this.element, fontSimple)
    } else if (!i) {
        SAL_setTextFont(this.element, "微软雅黑")
    }
    var a = tv.data && tv.data.System.FontUiColor.getColor();
    if (a) {
        SAL_setTextColor(this.element, a)
    }
    var s = SAL_getTextSize(this.element);
    if (i) {
        s = measureText(this.text)
    }
    this.textWidth = s[0];
    this.textHeight = s[1];
    this.width = s[0];
    this.height = s[1];
    this.setText = function(t) {
        if (t != this.text) {
            this.text = t + "";
            SAL_resetElement(this.element, this.text);
            var e = SAL_getTextSize(this.element);
            if (i) {
                e = measureText(this.text)
            }
            this.textWidth = e[0];
            this.textHeight = e[1];
            this.width = e[0];
            this.height = e[1]
        }
    }
    ;
    this.setBitmapFont = function(t) {
        if (!i) {
            return
        }
        if (BitmapFont.getInstance().bitmapFontPool[t]) {
            SAL_setTextFont(this.element, BitmapFont.getInstance().bitmapFontPool[t])
        }
    }
    ;
    this.setFont = function(t) {
        SAL_setTextFont(this.element, t)
    }
    ;
    this.setColor = function(t) {
        if (t instanceof OColorVal) {
            SAL_setTextColor(this.element, t.getColor())
        } else {
            SAL_setTextColor(this.element, t)
        }
    }
    ;
    this.setTextSize = function(t) {
        this.size = t < 12 ? 12 : t;
        SAL_setTextFontSize(this.element, this.size);
        var e = SAL_getTextSize(this.element);
        if (i) {
            e = measureText(this.text)
        }
        this.textWidth = e[0];
        this.textHeight = e[1];
        this.width = e[0];
        this.height = e[1]
    }
    ;
    this.setTextLineHeight = function(t) {
        this.lineHeight = t;
        SAL_setTextFontSize(this.element, this.size, this.lineHeight);
        var e = SAL_getTextSize(this.element);
        if (i) {
            e = measureText(this.text)
        }
        this.textWidth = e[0];
        this.textHeight = e[1];
        this.width = e[0];
        this.height = e[1]
    }
    ;
    this.setTextStyle = function(t, e) {
        if (t == 0) {
            return
        }
        if (e instanceof OColorVal) {
            e = e.getColor()
        }
        SAL_setTextStyle(this.element, {
            style: t,
            color: e,
            offsetX: 1,
            offsetY: 1
        })
    }
}

function OInputText(t, e) {
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    var s = this;
    var n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
    var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "点击输入";
    OContainer.call(this);
    this.init = function() {
        if (i) {
            this.bg = new OBitmap(i);
            this.addChild(this.bg);
            this.setSize(this.bg.width, this.bg.height)
        } else {
            this.setSize(t, e)
        }
        if (a) {
            this.foucsBg = new OBitmap(a);
            this.addChild(this.foucsBg);
            if (!i) {
                this.setSize(this.foucsBg.width, this.foucsBg.height)
            }
        }
        this.label = new OText(r,false,n);
        this.label.setSize(this.width, this.height);
        this.label.setPosition(this.width - this.label.textWidth >> 1, this.height - this.label.textHeight >> 1);
        this.addChild(this.label);
        this.setFoucs(false)
    }
    ;
    this.text = "";
    this.setText = function(e) {
        e = e.replace(/[\r\n]/g, "");
        e = e.replace(/[\\\/]/g, "");
        var i = e.split("");
        var t = 0;
        for (var a = 0; a < i.length; a++) {
            try {
                encodeURI(i[a])
            } catch (t) {
                e = e.replaceAll(i[a], "")
            }
        }
        i = e.split("");
        for (var s = 0; s < i.length; s++) {
            t += i[s].match(/[^\x00-\xff]/g) ? 2 : 1;
            if (t > 12) {
                e = e.slice(0, s)
            }
        }
        if (e) {
            this.label.setText(e)
        } else {
            this.label.setText("点击输入")
        }
        this.label.setPosition(this.width - this.label.textWidth >> 1, this.height - this.label.textHeight >> 1);
        this.text = e
    }
    ;
    this.clickInput = function() {
        s.setFoucs(true);
        if (GloableData.getInstance().isMobile() && !getMobileVer(inputAver)) {
            return
        }
        SAL_callInput({
            x: s.x,
            y: s.y + s.label.y,
            w: s.width,
            h: s.label.textHeight,
            size: n,
            tips: s.text,
            max: 6
        }, function(t, e) {
            var i = e.value;
            s.setText(i)
        })
    }
    ;
    this.setFoucs = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (this.foucsBg) {
            this.bg.setVisible(!t);
            this.foucsBg.setVisible(t)
        }
    }
}

function ImageFont(t, e) {
    var i = this;
    OContainer.call(this);
    this.size = e;
    this.textWidth = 0;
    this.textHeight = 0;
    this.effImage = new OBitmap("");
    this.addChild(this.effImage);
    this.image = new OBitmap("",function() {
        i.textWidth = i.image.width;
        i.textHeight = i.image.height
    }
    );
    this.addChild(this.image);
    var n = tv.imageFontMap.data.get(encodeURIComponent(t));
    if (n) {
        this.image.setUrl(n)
    }
    this.setFont = function() {}
    ;
    this.setTextSize = function() {}
    ;
    this.setColor = function(t) {
        this.image.setMask("", this.getImageColor(t))
    }
    ;
    this.setTextStyle = function(t, e) {
        this.effImage.setUrl(n);
        this.effImage.setMask("", this.getImageColor(e));
        switch (t) {
        case 1:
            this.effImage.setPosition(-1, 0);
            var i = new OBitmap(n);
            i.setMask("", this.getImageColor(e));
            i.setPosition(0, -1);
            this.addChild(i);
            var a = new OBitmap(n);
            a.setMask("", this.getImageColor(e));
            a.setPosition(0, 1);
            this.addChild(a);
            var s = new OBitmap(n);
            s.setMask("", this.getImageColor(e));
            s.setPosition(1, 0);
            this.addChild(s);
            this.image.setIndex(10);
            break;
        case 2:
            this.effImage.setPosition(1, 1);
            break
        }
    }
    ;
    this.getImageColor = function(t) {
        var e = {
            type: 3,
            name: "Font",
            duration: -1,
            isDynamic: true,
            isStatic: false,
            r: t.R / 255,
            g: t.G / 255,
            b: t.B / 255,
            gray: 0,
            hue: 0
        };
        return e
    }
    ;
    this.color = tv.data && tv.data.System.FontUiColor;
    if (this.color) {
        this.setColor(this.color)
    }
}

function OGraphic(t, e, i, a, s) {
    OContainer.call(this);
    this.graphic = null;
    this.drawRect = function(t, e, i, a, s) {
        this.graphic = SALGraphic(0, [t, e, i, a], s);
        this.addChild(this.graphic)
    }
    ;
    this.drawCircle = function(t, e, i, a) {
        this.graphic = SALGraphic(2, [t, e, i], a);
        this.addChild(this.graphic)
    }
}

function get16Color(t) {
    var e = parseInt(t.slice(1, 3), 16);
    var i = parseInt(t.slice(3, 5), 16);
    var a = parseInt(t.slice(5, 7), 16);
    return SALColor(e, i, a, 255)
}

function ONButton(t, e, i, a, s) {
    var n = this;
    ODisplayObject.call(this);
    this.text = "";
    this.upBtn = "";
    this.downBtn = "";
    this.index = 0;
    this.upBtnPathObj = null;
    this.element = SALButton("", "", "", function() {
        n.width = SAL_getElementWidth(n.element);
        n.height = SAL_getElementHeight(n.element);
        if (quality == 31) {
            if (n.upBtnPathObj && n.upBtnPathObj.obj.w != -1) {
                n.setSize(parseInt(n.upBtnPathObj.obj.w), parseInt(n.upBtnPathObj.obj.h))
            }
        }
        s && s()
    }, null, a);
    if (tv.data) {
        if (clientType == 6 && globalFont && fontSimple) {
            SAL_setTextFont(this.element, fontSimple)
        } else {
            SAL_setTextFont(this.element, tv.data.System.FontName)
        }
        SAL_setTextColor(this.element, tv.data.System.FontUiColor.getColor())
    }
    this.addClick = function(i, a, s) {
        SAL_addClick(this.element, function(t) {
            var e = tv.data.System.SEClick;
            oaudio.playSE(fileListFato("audio/se/" + e.FileName.name), e.Volume);
            if (i) {
                i.call(s, a, t)
            }
        }, a)
    }
    ;
    this.removeClick = function(t) {
        SAL_removeClick(this.element, t)
    }
    ;
    this.setInfo = function(t, e, i) {
        if (t != "" && t.toLowerCase().indexOf("graphics/") != -1) {
            this.upBtnPathObj = fileListFatoObj(t);
            t = this.upBtnPathObj ? this.upBtnPathObj.url() : ""
        }
        if (e.toLowerCase().indexOf("graphics/") != -1) {
            e = fileListFato(e)
        }
        this.upBtn = t;
        this.downBtn = e;
        this.text = i;
        SAL_resetElement(this.element, [this.upBtn, this.downBtn, this.text]);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.setTextColor = function(t) {
        if (t instanceof OColorVal) {
            SAL_setTextColor(this.element, t.getColor())
        } else {
            SAL_setTextColor(this.element, t)
        }
    }
    ;
    this.setTextSize = function(t) {
        this.size = t;
        SAL_setTextFontSize(this.element, this.size);
        var e = SAL_getTextSize(this.element);
        this.textWidth = e[0];
        this.textHeight = e[1]
    }
    ;
    this.setFont = function(t) {
        SAL_setTextFont(this.element, t)
    }
    ;
    this.setTextStyle = function(t, e) {
        if (t == 0) {
            return
        }
        if (e instanceof OColorVal) {
            e = e.getColor()
        }
        SAL_setTextStyle(this.element, {
            style: t,
            color: e,
            offsetX: 1,
            offsetY: 1
        })
    }
    ;
    this.addEvent("touchEnter", function() {
        var t = tv.data.System.SEMove;
        oaudio.playButtonSE(fileListFato("audio/se/" + t.FileName.name), t.Volume)
    });
    this.setInfo(t, e, i)
}

function OImageTextButton(t, e, i, a, s) {
    OContainer.call(this);
    this.init = function() {
        this.btn = new ONButton(t,e,"",a,s);
        this.addChild(this.btn);
        this.label = new OFlowText(i,a,false);
        this.addChild(this.label);
        this.label.setPosition(this.btn.width - this.label.textWidth >> 1, this.btn.height - this.label.textHeight >> 1)
    }
    ;
    this.addClick = function(t, e, i) {
        this.btn.addClick(t, e, i)
    }
    ;
    this.removeClick = function(t) {
        this.btn.removeClick(t)
    }
    ;
    this.setInfo = function(t, e, i) {
        this.btn.setInfo(t, e, "");
        this.label.setText(i);
        this.label.setPosition(this.btn.width - this.label.textWidth >> 1, this.btn.height - this.label.textHeight >> 1)
    }
    ;
    this.setTextColor = function(t) {
        this.btn.setTextColor(t);
        this.label.setColor(t)
    }
    ;
    this.setTextSize = function(t) {
        this.btn.setTextSize(t);
        this.label.setTextSize(t);
        this.label.setPosition(this.btn.width - this.label.textWidth >> 1, this.btn.height - this.label.textHeight >> 1)
    }
    ;
    this.setFont = function(t) {
        this.btn.setFont(t)
    }
    ;
    this.setTextStyle = function(t, e) {
        this.btn.setTextStyle(t, e);
        this.label.setTextStyle(t, e)
    }
}

function OSlideContainer(t, e) {
    ODisplayObject.call(this);
    this.width = t;
    this.height = e;
    this.slideType = 2;
    this.element = SALContainer(t, e);
    SAL_addTouchDown(this.element, function() {});
    SAL_addTouchMove(this.element, function() {});
    SAL_addTouchUp(this.element, function() {});
    SAL_addTouchCancel(this.element, function() {});
    this.showContainer = SALContainer(t, e);
    SAL_addElement(this.element, this.showContainer);
    this.eventElement = SALContainer(t, e);
    SAL_addElement(this.element, this.eventElement);
    SAL_setElementBlockTouch(this.eventElement, false);
    var s, n, i, a, r = false;
    this.currentWidth = 0;
    this.currentHeight = 0;
    this.currentOffsetX = 0;
    this.currentOffsetY = 0;
    this.childList = [];
    this.speedPoint = new Array(2);
    this.speed = 0;
    this.frame = 0;
    this.touchDown = function(t) {
        r = true;
        s = t.x;
        n = t.y;
        this.speed = 0;
        this.speedPoint[0] = {
            x: s,
            y: n
        };
        this.speedPoint[1] = {
            x: s,
            y: n
        };
        if (this.childList.length == 1) {
            var e = this.childList[0];
            this.currentWidth = e.x + e.width;
            this.currentHeight = e.y + e.height
        } else {
            for (var i = 0; i < this.childList.length; i++) {
                var a = this.childList[i];
                if (this.currentWidth < a.x + a.width) {
                    this.currentWidth = a.x + a.width
                }
                if (this.currentHeight < a.y + a.height) {
                    this.currentHeight = a.y + a.height
                }
            }
        }
    }
    ;
    this.touchMove = function(t) {
        if (!r || this.slideType == 0) {
            return
        }
        i = t.x;
        a = t.y;
        if (this.slideType == 1 || this.slideType == 0) {
            this.currentOffsetX = this.currentOffsetX + i - s
        }
        if (this.slideType == 2 || this.slideType == 0) {
            this.currentOffsetY = this.currentOffsetY + a - n
        }
        if (this.currentOffsetX < this.width - this.currentWidth) {
            this.currentOffsetX = this.width - this.currentWidth
        }
        if (this.currentOffsetY < this.height - this.currentHeight) {
            this.currentOffsetY = this.height - this.currentHeight
        }
        if (this.currentOffsetX > 0) {
            this.currentOffsetX = 0
        }
        if (this.currentOffsetY > 0) {
            this.currentOffsetY = 0
        }
        SAL_setContainerOffset(this.showContainer, this.currentOffsetX, this.currentOffsetY);
        s = i;
        n = a;
        onTouchDown = false
    }
    ;
    this.setSlidePos = function(t, e) {
        for (var i = 0; i < this.childList.length; i++) {
            var a = this.childList[i];
            if (this.currentWidth < a.x + a.width) {
                this.currentWidth = a.x + a.width
            }
            if (this.currentHeight < a.y + a.height) {
                this.currentHeight = a.y + a.height
            }
        }
        this.currentOffsetX = -t;
        this.currentOffsetY = -e;
        if (this.currentOffsetX < this.width - this.currentWidth) {
            this.currentOffsetX = this.width - this.currentWidth
        }
        if (this.currentOffsetY < this.height - this.currentHeight) {
            this.currentOffsetY = this.height - this.currentHeight
        }
        SAL_setContainerOffset(this.showContainer, 0, this.currentOffsetY)
    }
    ;
    this.touchCancel = function() {
        r = false;
        if (this.speedPoint[1]) {
            this.speed = Math.floor(this.speedPoint[1].y - this.speedPoint[0].y);
            this.speedPoint[0] = {
                x: 0,
                y: 0
            };
            this.speedPoint[1] = {
                x: 0,
                y: 0
            }
        }
    }
    ;
    this.update = function() {
        if (!r && Math.abs(this.speed) > 0) {
            this.touchScrollBar(0, this.speed);
            this.speed > 0 ? this.speed -= .5 : this.speed += .5
        }
        if (r) {
            this.frame++;
            if (this.frame = 10) {
                this.speedPoint[0] = {
                    x: this.speedPoint[1].x,
                    y: this.speedPoint[1].y
                };
                this.speedPoint[1] = {
                    x: s,
                    y: n
                };
                this.frame = 0
            }
        }
    }
    ;
    this.addChild = function(t) {
        t.parent = this;
        if (t.element) {
            SAL_addElement(this.showContainer, t.element)
        } else {
            SAL_addElement(this.showContainer, t)
        }
        this.childList.push(t)
    }
    ;
    this.removeChild = function(t) {
        t.parent = null;
        if (t.element) {
            SAL_removeElement(this.showContainer, t.element)
        } else {
            SAL_removeElement(this.showContainer, t)
        }
        var e = this.childList.indexOf(t);
        this.childList.splice(e, 1)
    }
    ;
    this.setChildIndex = function(t, e) {
        if (t.element) {
            SAL_setElementIndex(this.showContainer, t.element, e)
        } else {
            SAL_setElementIndex(this.showContainer, t, e)
        }
    }
    ;
    this.touchScrollBar = function(t, e) {
        if (this.childList.length == 1) {
            var i = this.childList[0];
            this.currentWidth = i.x + i.width;
            this.currentHeight = i.y + i.height
        } else {
            for (var a = 0; a < this.childList.length; a++) {
                var s = this.childList[a];
                if (this.currentWidth < s.x + s.width) {
                    this.currentWidth = s.x + s.width
                }
                if (this.currentHeight < s.y + s.height) {
                    this.currentHeight = s.y + s.height
                }
            }
        }
        if (this.slideType == 1 || this.slideType == 0) {
            this.currentOffsetX = this.currentOffsetX + t
        }
        if (this.slideType == 2 || this.slideType == 0) {
            this.currentOffsetY = this.currentOffsetY + e
        }
        if (this.currentOffsetX < this.width - this.currentWidth) {
            this.currentOffsetX = this.width - this.currentWidth
        }
        if (this.currentOffsetY < this.height - this.currentHeight) {
            this.currentOffsetY = this.height - this.currentHeight
        }
        if (this.currentOffsetX > 0) {
            this.currentOffsetX = 0
        }
        if (this.currentOffsetY > 0) {
            this.currentOffsetY = 0
        }
        SAL_setContainerOffset(this.showContainer, this.currentOffsetX, this.currentOffsetY)
    }
    ;
    this.setSize = function(t, e) {
        if (t != this.width) {
            this.width = t
        }
        if (e != this.height) {
            this.height = e
        }
        SAL_setElementSize(this.element, this.width, this.height);
        SAL_setElementSize(this.showContainer, this.width, this.height);
        SAL_setElementSize(this.eventElement, this.width, this.height)
    }
    ;
    this.setSlideEnable = function(t) {
        this.slideType = t ? 2 : 0
    }
    ;
    SAL_addTouchDown(this.eventElement, this.touchDown, null, this);
    SAL_addTouchMove(this.eventElement, this.touchMove, null, this);
    SAL_addTouchUp(this.eventElement, this.touchCancel, null, this);
    SAL_addTouchCancel(this.eventElement, this.touchCancel, null, this);
    this.mousewheelCallback = function(t) {
        if (!t) {
            return
        }
        var e = Math.max(-1, Math.min(1, t.wheelDelta || -t.detail));
        this.touchScrollBar(0, e * 25)
    }
    ;
    this.resetScrollBar = function() {
        this.currentOffsetX = 0;
        this.currentOffsetY = 0;
        SAL_setContainerOffset(this.showContainer, this.currentOffsetX, this.currentOffsetY)
    }
    ;
    if (!GloableData.getInstance().isMobile()) {
        g.canvas.addEventListener("mousewheel", this.mousewheelCallback.bind(this), false)
    }
}

function OFlowText(i) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    OContainer.call(this);
    this.text = i;
    this.size = tv.data.System.realFontSize;
    this.font = "";
    this.useBitmapFont = t;
    this.isShowColor = e;
    if (systemFont) {
        this.useBitmapFont = false
    }
    this.lineHeight = tv.data.System.realFontSize;
    this.textWidth = 0;
    this.textHeight = 0;
    this.maxWidth = 2e3;
    this.oColor = tv.data.System.FontUiColor;
    this.currentColor = tv.data.System.FontUiColor.getColor();
    this.drawX = 0;
    this.drawY = 0;
    var r = "";
    this.count = 0;
    this.mainText = null;
    this.isVertical = false;
    this.setText = function(t) {
        this.clear();
        this.text = t;
        this.textWidth = 0;
        this.textHeight = 0;
        r = utils.TextAnalysis(t);
        r = utils.madeString(r, 0, 0, true);
        var e = "";
        this.drawX = 0;
        this.drawY = 0;
        this.count = 0;
        while (r.length > 0) {
            e = r.substr(0, 1);
            r = r.substring(1, r.length);
            var i = e.charCodeAt(0);
            if (i == 200) {
                if (this.isVertical) {
                    this.drawY = 0;
                    this.drawX += this.lineHeight
                } else {
                    this.drawX = 0;
                    this.drawY += this.lineHeight
                }
            } else if (i == 202) {
                if (this.isShowColor) {
                    this.oColor = new OColorVal(this.TextToTemp("[", "]", /\[([0-9]+,[0-9]+,[0-9]+)]/g));
                    this.currentColor = this.oColor.getColor()
                } else {
                    this.TextToTemp("[", "]", /\[([0-9]+,[0-9]+,[0-9]+)]/g)
                }
            } else {
                this.count++;
                var a;
                if (this.useBitmapFont && !BitmapFont.getInstance().bitMapDataArr[encodeURIComponent(e)]) {
                    a = new ImageFont(e,this.size);
                    if (this.oColor) {
                        a.setColor(this.oColor)
                    }
                } else {
                    a = new OText(e,this.useBitmapFont,this.size);
                    a.setColor(this.currentColor)
                }
                if (!this.isVertical) {
                    if (this.drawX + a.textWidth > this.maxWidth) {
                        this.drawX = 0;
                        this.drawY += this.lineHeight
                    }
                }
                a.setPosition(this.drawX, this.drawY);
                a.setFont(this.font);
                a.setTextSize(this.size);
                if (this.style) {
                    a.setTextStyle(this.style, this.styleColor)
                }
                this.addChild(a);
                if (this.isVertical) {
                    this.drawY += this.lineHeight
                } else {
                    this.drawX += a.textWidth * 1;
                    if (a.textWidth < 1) {
                        if (tv.gameNameBin) {
                            this.drawX += tv.data.System.realFontSize
                        }
                    }
                }
                this.textWidth = this.textWidth > this.drawX ? this.textWidth : Math.round(this.drawX);
                this.textHeight = this.textHeight > this.drawY + this.lineHeight ? this.textHeight : Math.round(this.drawY + this.lineHeight)
            }
        }
    }
    ;
    this.clear = function() {
        for (var t = 0; t < this.childList.length; t++) {
            this.childList[t].dispose()
        }
        this.childList = [];
        if (this.mainText) {
            this.mainText.dispose();
            this.mainText = null
        }
    }
    ;
    this.TextToTemp = function(t, e, i) {
        var a = r.substring(r.indexOf(t) + 1, r.indexOf(e));
        r = r.substring(a.length + t.length + e.length, r.length);
        var s = a.replaceAll(i, "$1");
        var n = s.replaceAll(" ", "");
        return n
    }
    ;
    this.setFont = function(t) {
        this.font = t
    }
    ;
    this.oColor = null;
    this.setColor = function(t) {
        if (t instanceof OColorVal) {
            this.oColor = t;
            this.currentColor = this.oColor.getColor()
        } else {
            this.currentColor = t
        }
        this.setText(this.text)
    }
    ;
    this.setTextSize = function(t, e) {
        this.size = t < 12 ? 12 : t;
        this.lineHeight = Math.round(this.size * (e ? e : 1.2));
        this.setText(i)
    }
    ;
    this.setTextLineHeight = function(t) {
        this.lineHeight = Math.round(this.size * (t ? t : 1.2))
    }
    ;
    this.style = null;
    this.styleColor = null;
    this.setTextStyle = function(t, e) {
        if (t == 0) {
            return
        }
        this.style = t;
        this.styleColor = e;
        for (var i = 0; i < this.childList.length; i++) {
            this.childList[i].setTextStyle(this.style, this.styleColor)
        }
    }
    ;
    this.setText(i)
}

function OShowContainer(t, e) {
    ODisplayObject.call(this);
    this.width = t;
    this.height = e;
    this.element = SALShowContainer(t, e);
    this.childList = [];
    this.addChild = function(t) {
        t.parent = this;
        if (t.element) {
            SAL_addElement(this.element, t.element)
        } else {
            SAL_addElement(this.element, t)
        }
        this.childList.push(t);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.removeChild = function(t) {
        t.parent = null;
        if (t.element) {
            SAL_removeElement(this.element, t.element);
            SAL_destroyElement(t.element)
        } else {
            SAL_removeElement(this.element, t);
            SAL_destroyElement(t)
        }
        this.childList.splice(this.childList.indexOf(t), 1);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.setChildIndex = function(t, e) {
        if (t.element) {
            SAL_setElementIndex(this.element, t.element, e)
        } else {
            SAL_setElementIndex(this.element, t, e)
        }
    }
    ;
    this.removeRelationship = function(t) {
        t.parent = null;
        if (t.element) {
            SAL_removeElement(this.element, t.element)
        } else {
            SAL_removeElement(this.element, t)
        }
        this.childList.splice(this.childList.indexOf(t), 1);
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.removeAllRelationship = function() {
        var e = this;
        this.childList.forEach(function(t) {
            t.parent = null;
            if (t.element) {
                SAL_removeElement(e.element, t.element)
            } else {
                SAL_removeElement(e.element, t)
            }
        });
        this.childList = [];
        this.width = SAL_getElementWidth(this.element);
        this.height = SAL_getElementHeight(this.element)
    }
    ;
    this.effectFadeIn = function(t) {
        var e = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "fadeTo",
                opacity: 75 / 255,
                duration: 5 * 1e3 / (FPS * 2)
            }), SALAction({
                type: "fadeTo",
                opacity: t / 255,
                duration: 2 * 1e3 / (FPS * 2)
            })]
        });
        SAL_runAction(this.element, e)
    }
    ;
    this.effectSameSideIn = function(t, e, i, a) {
        var s = 0;
        var n = 0;
        if (t == 1 || t == 2) {
            s = 40;
            n = 50
        } else {
            s = -40;
            n = -50
        }
        var r = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: 75 / 255,
                    duration: 6 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + s,
                    targetY: a,
                    duration: 6 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: e / 255,
                    duration: 4 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + n,
                    targetY: a,
                    duration: 4 * 1e3 / (FPS * 2)
                })]
            })]
        });
        SAL_runAction(this.element, r)
    }
    ;
    this.effectSameSideScale = function(t, e, i, a) {
        var s = 0;
        if (t == 1 || t == 2) {
            s = 50
        } else {
            s = -50
        }
        var n = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "group",
                actions: [SALAction({
                    type: "zoomTo",
                    targetX: .3,
                    targetY: .3,
                    duration: 8 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: t == 1 || t == 2 ? e + s : e + s + a * .7,
                    targetY: i,
                    duration: 8 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "zoomTo",
                    targetX: 1,
                    targetY: 1,
                    duration: 2 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: e + s,
                    targetY: i,
                    duration: 2 * 1e3 / (FPS * 2)
                })]
            })]
        });
        SAL_runAction(this.element, n)
    }
    ;
    this.effectDownIn = function(t, e, i) {
        var a = 30;
        var s = 50;
        var n = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: 75 / 255,
                    duration: 5 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: e,
                    targetY: i - a,
                    duration: 5 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: t / 255,
                    duration: 7 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: e,
                    targetY: i - s,
                    duration: 7 * 1e3 / (FPS * 2)
                })]
            })]
        });
        SAL_runAction(this.element, n)
    }
    ;
    this.effectCrossIn = function(t, e, i, a, s, n, r) {
        var o = 0;
        var h = 0;
        if (t == 1 || t == 2) {
            o = 50;
            h = 70
        } else {
            o = -50;
            h = -70
        }
        var l = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: 75 / 255,
                    duration: 3 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + o,
                    targetY: a,
                    duration: 3 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: e / 255,
                    duration: 9 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + h,
                    targetY: a,
                    duration: 9 * 1e3 / (FPS * 2)
                })]
            })]
        });
        var c = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "moveTo",
                targetX: n - o * 2,
                targetY: r,
                duration: 3 * 1e3 / (FPS * 2)
            }), SALAction({
                type: "moveTo",
                targetX: n - h * 2,
                targetY: r,
                duration: 9 * 1e3 / (FPS * 2)
            })]
        });
        SAL_runAction(s, c);
        SAL_runAction(this.element, l)
    }
    ;
    this.effectElastic = function(t, e, i, a) {
        var s = 0;
        var n = 0;
        var r = 0;
        if (t == 1 || t == 2) {
            s = 40;
            n = 70;
            r = 50
        } else {
            s = -40;
            n = -70;
            r = -50
        }
        var o = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: 75 / 255,
                    duration: 2 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + s,
                    targetY: a,
                    duration: 2 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: e / 255,
                    duration: 4 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + n,
                    targetY: a,
                    duration: 4 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "fadeTo",
                    opacity: e / 255,
                    duration: 8 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: i + r,
                    targetY: a,
                    duration: 8 * 1e3 / (FPS * 2)
                })]
            })]
        });
        SAL_runAction(this.element, o)
    }
    ;
    this.effectExtend = function(t, e, i, a) {
        var s = t == 1 || t == 2 ? 1 : -1;
        var n = SALAction({
            type: "sequence",
            actions: [SALAction({
                type: "group",
                actions: [SALAction({
                    type: "zoomTo",
                    targetX: .3,
                    targetY: .3,
                    duration: 2 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: s == 1 ? e : e - a * .3,
                    targetY: i,
                    duration: 2 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "zoomTo",
                    targetX: 1.1,
                    targetY: 1.1,
                    duration: 5 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: s == 1 ? e : e - a * 1.1,
                    targetY: i,
                    duration: 5 * 1e3 / (FPS * 2)
                })]
            }), SALAction({
                type: "group",
                actions: [SALAction({
                    type: "zoomTo",
                    targetX: 1,
                    targetY: 1,
                    duration: 6 * 1e3 / (FPS * 2)
                }), SALAction({
                    type: "moveTo",
                    targetX: s == 1 ? e : e - a,
                    targetY: i,
                    duration: 6 * 1e3 / (FPS * 2)
                })]
            })]
        });
        SAL_runAction(this.element, n)
    }
}
var OByteReader = function() {
    function t(t) {
        this.uInt8Array = new Uint8Array(t);
        this.cursor = 0
    }
    t.prototype.close = function() {
        this.uInt8Array = null;
        this.cursor = 0
    }
    ;
    t.prototype.isReadFinish = function() {
        return this.cursor >= this.uInt8Array.length
    }
    ;
    t.prototype.read = function(t) {
        var e;
        if (this.uInt8Array.slice) {
            e = this.uInt8Array.slice(this.cursor, this.cursor + t)
        } else {
            e = new Array(t);
            for (var i = 0; i < t; i++) {
                e[i] = this.uInt8Array[this.cursor + i]
            }
        }
        this.cursor += t;
        return e
    }
    ;
    t.prototype.readInt32 = function() {
        var t = 0;
        var e = this.read(4);
        t = e[3] << 24 & 4278190080 | e[2] << 16 & 16711680 | e[1] << 8 & 65280 | e[0] & 255;
        return t
    }
    ;
    t.prototype.readInt64 = function() {
        var t = this.readInt32();
        var e = this.readInt32();
        return t + e * 4294967296
    }
    ;
    t.prototype.readString = function() {
        var t = this.readInt32();
        var e = this.read(t);
        return this.convertToString(e, "utf-8")
    }
    ;
    t.prototype.readCString = function(t) {
        var e = this.read(t);
        return this.convertToString(e, "utf-8")
    }
    ;
    t.prototype.readUString = function() {
        var t = this.read(2);
        var e = new Uint16Array(1);
        var i = new Uint8Array(e.buffer);
        var a = new Uint8Array(t);
        i.set(a);
        return String.fromCharCode.apply(null, e)
    }
    ;
    t.prototype.convertToString = function(e, t) {
        var i = "";
        if (!t || t == "ASCII") {
            i = String.fromCharCode.apply(null, e)
        } else {
            var a = 0;
            var s = function t() {
                if (a >= e.length) {
                    return null
                }
                return e[a++]
            };
            var n = function t(e) {
                i += String.fromCharCode(e)
            };
            this.decodeUTF8(s, n)
        }
        return i
    }
    ;
    t.prototype.decodeUTF8 = function(t, e) {
        var i, a, s, n, r = function t(e) {
            e = e.slice(0, e.indexOf(null));
            var i = Error(e.toString());
            i.name = "TruncatedError";
            i["bytes"] = e;
            throw i
        };
        while ((i = t()) !== null) {
            if ((i & 128) === 0)
                e(i);
            else if ((i & 224) === 192)
                (a = t()) === null && r([i, a]),
                e((i & 31) << 6 | a & 63);
            else if ((i & 240) === 224)
                ((a = t()) === null || (s = t()) === null) && r([i, a, s]),
                e((i & 15) << 12 | (a & 63) << 6 | s & 63);
            else if ((i & 248) === 240)
                ((a = t()) === null || (s = t()) === null || (n = t()) === null) && r([i, a, s, n]),
                e((i & 7) << 18 | (a & 63) << 12 | (s & 63) << 6 | n & 63);
            else
                throw RangeError("Illegal starting byte: " + i)
        }
    }
    ;
    return t
}();

function DCanvas() {
    this.FloatStatus = -1;
    this.FloatStatusNew = [];
    this.WeatherType = -1;
    this.Layers = new Array;
    this.CuiIndex = -1;
    this.LayerRotateInfo = new Array;
    this.LayerMirrorInfo = {};
    this.chatInfo = {};
    this.chatNewInfo = {};
    this.filterInfo = {}
}

function DGameHeader() {
    this.Platform = "Initial";
    this.Version = "1.0.0.0913";
    this.Name = "";
    this.StoryName = "";
    this.SaveTime = "";
    this.IsFreeLimit = 0;
    this.isTimeMallGoods = 0
}
var allDepth = 0;

function DLogic() {
    this.Depth = allDepth;
    this.StoryId = 0;
    this.Pos = 0;
    this.IsHaveSub = 0;
    this.SubStory = "";
    this.IndentStack = new Object
}

function DMusic() {
    this.BGM = "";
    this.BGS = "";
    this.SE = "";
    this.Voice = "";
    this.BGMV = 0;
    this.BGSV = 0;
    this.SEV = 0;
    this.VoiceV = 0;
    this.BGMFade = false;
    this.BGMFadeTime = 0;
    this.BGMFadeTimeMax = 0;
    this.BGSFade = false;
    this.BGSFadeTime = 0;
    this.BGSFadeTimeMax = 0;
    this.VoiceFade = false;
    this.VoiceFadeTime = 0;
    this.VoiceFadeTimeMax = 0
}

function DGameReplay() {
    this.ReplayMessage = new Object
}

function DThumbnail() {
    this.base64 = ""
}

function FrameInfo() {
    this.Header = new DGameHeader;
    this.Logic = new DLogic;
    this.Canvas = new DCanvas;
    this.Music = new DMusic;
    this.SystemDefine = new DSystemDefine;
    this.RePlay = new Object;
    this.OAF2 = {
        OafDataList: ""
    };
    this.Thumbnail = new DThumbnail;
    this.layerRotateInfo = [];
    this.PlayerBuyItem = {
        items: []
    };
    this.welfareData = null
}

function DSystemDefine() {
    this.Vars = "";
    this.String = ""
}

function OperationFrame() {
    this.saveFileData = [];
    var f = function t(e) {
        return GloableData.getInstance().userData.uid + guid + e
    };
    this.ParseFrameInfo = function(r, o, h) {
        var t = [];
        var s = function t() {
            try {
                var e = o.SystemDefine;

                tv.system.rwFile.buttonFreeLimit[r] = o.Header.IsFreeLimit;
                GloableData.getInstance().isTimeMallGoods = o.Header.isTimeMallGoods;
                tv.inter.loadCloudData(o.Logic);
                tv.storyList.loadData();
                var a = e.Vars.split("|");
                tv.system.vars.loadData(a);
                if (e.varString != null) {
                    var s = e.varString;
                    if (typeof e.varString == "string") {
                        s = JSON.parse(e.varString)
                    }
                    tv.system.string.loadNewData(s)
                } else if (e.String != "") {
                    var n = e.String.split("|");
                    tv.system.string.loadData(n)
                }
                tv.system.replay.loadData(o.RePlay);
                tv.canvas.loadCloudData(o.Canvas);
                tv.canvas.loadOAF2(o.OAF2);
                tv.canvas.loadFilter(o.Canvas);
                tv.canvas.loadPicFilter(o.Canvas);
                tv.canvas.loadMusic(o.Music);
                tv.newMallBuyData = o.PlayerBuyItem ? o.PlayerBuyItem.items : [];
                if (localProjectPath) {
                    tv.newMallBuyData = []
                }
                if (tv.gameNewMall || tv.gameMallBin) {
                    GloableData.getInstance().clearMallBuyCount();
                    GloableData.getInstance().setNewMallCount()
                }
                if (tv.gameWelfateBin) {
                    GloableData.getInstance().welfareGetData = o.welfareData ? o.welfareData : new WelfareGetData
                }
                if (tv.gameTimeMall) {
                    if (o.timeMallData) {
                        GloableData.getInstance().useTimeMallBuyItem.setData(o.timeMallData)
                    } else {
                        GloableData.getInstance().useTimeMallBuyItem.data.clear()
                    }
                }
            } catch (t) {
                SAL_log("ParseFrameInfo Error" + t)
            }
            h && h()
        };
        var e = function t(e, i) {
            var a = parseInt(i.StoryId);
            if (isNaN(a)) {
                return
            }
            e.push(a);
            if (i.IsHaveSub) {
                t(e, i.SubStory)
            }
        };
        var i = function t() {
            if (o.imageFontMap && tv.gameNameBin) {
                if (o.imageFontMap.textMd5 == tv.gameNameBin.textMd5) {
                    tv.imageFontMap.setData(o.imageFontMap);
                    tv.imageFontMap.preloadAllFontImage(s)
                } else {
                    tv.imageFontMap.clear();
                    var e = webConfig.GET_FONT_SKETCH;
                    e += "?text=" + o.imageFontMap.textString;
                    e += "&font_size=" + tv.data.System.realFontSize;
                    e += "&font_name=" + tv.gameNameBin.textMd5;
                    e += "&font_origin_name=" + tv.data.System.FontName;
                    e += "&gindex=" + gIndex;
                    e += "&os=" + tv.gameNameBin.os;
                    serverAjax.sendGetAjaxJSON(e, function(t) {
                        if (t.data) {
                            var e = t.data;
                            var i = o.imageFontMap.textString.split("");
                            for (var a = 0; a < i.length; a++) {
                                tv.imageFontMap.addItem(encodeURIComponent(i[a]), e[a], i[a])
                            }
                            tv.imageFontMap.preloadAllFontImage(s)
                        } else {// hintMessage.setHint("网络异常!")
                        }
                    }, function() {// hintMessage.setHint("网络异常!")
                    })
                }
            } else {
                s()
            }
        };
        e(t, o.Logic);
        tv.data.getStoryList(t, i)
    }
    ;
    this.DeParseFrameInfo = function(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        try {
            allDepth = 0;
            var l = "1.0.0.0913";
            var i = new FrameInfo;
            i.Header.Platform = GloableData.getInstance().userData.platform;
            i.Header.Version = l;
            i.Header.Name = tv.data.Headr.title;
            i.Header.StoryName = tv.inter.storyName;
            i.Header.StoryID = tv.inter.storyId;
            i.Header.SaveTime = Date.now();
            i.Header.isTimeMallGoods = GloableData.getInstance().isTimeMallGoods;
            var a = 0;
            if (tv.canvas.cWebFree && tv.canvas.cWebFree.isFree) {
                a = 1
            }
            i.Header.IsFreeLimit = a;
            tv.storyList.saveData();
            tv.inter.saveData(i.Logic);
            tv.storyList.loadData();
            var s = new Array;
            var n = [];
            tv.system.vars.saveData(s, n, f(e));
            var r = "";
            var o = "";
            for (var h = 0; h < s.length; ++h) {
                r += s[h];
                o += n[h]
            }
            i.SystemDefine.Vars = r;
            i.SystemDefine.eVars = o;
            i.SystemDefine.varString = tv.system.string.saveNewData();
            if (tv.canvas.sFloatButton) {
                i.Canvas.FloatStatusNew = tv.canvas.sFloatButton.isVisibilArray
            }
            if (tv.canvas.weather) {
                i.Canvas.WeatherType = tv.canvas.weatherType
            } else {
                i.Canvas.WeatherType = 0
            }
            var c = tv.canvas.savePic();
            i.Canvas.Layers = c;
            i.OAF2 = tv.canvas.saveOAF2();
            i.Canvas.LayerMirrorInfo = tv.canvas.saveMirror();
            i.Canvas.filterInfo = tv.canvas.saveFilter();
            i.Canvas.picFilterInfo = tv.canvas.savePicFilter();
            i.Canvas.CuiIndex = tv.CUIFromIndex;
            var u = new Array;
            crotate.saveData(u);
            i.Canvas.LayerRotateInfo = u;
            tv.canvas.saveMusic(i.Music);
            tv.system.replay.saveData(i.RePlay);
            tv.canvas.saveChat(i.Canvas);
            if (e != -100) {
                i.Thumbnail.cloudImageUrl = "";
                i.Thumbnail.base64 = LOGO_URL;
                if (!t) {
                    this.saveFileData[e - 1] = {
                        index: e,
                        picurl: this.getCaptureSaveFile(e),
                        name: "",
                        date: -1
                    };
                    this.saveShot()
                }
            }
            if (tv.gameNewMall || tv.gameMallBin) {
                i.PlayerBuyItem.items = GloableData.getInstance().getNewMallCount()
            }
            if (tv.gameWelfateBin) {
                i.welfareData = GloableData.getInstance().welfareGetData
            }
            if (tv.gameTimeMall) {
                i.timeMallData = GloableData.getInstance().useTimeMallBuyItem.getData()
            }
            if (tv.imageFontMap && tv.gameNameBin) {
                i.imageFontMap = tv.imageFontMap.getData()
            }
            if (t && e != -100) {
                return i
            } else {
                this.setLocalCloudData(e, i)
            }
        } catch (t) {
            if (e != -100) {// hintMessage.setHint("存档出现问题！")
            }
            SAL_log("DeParseFrameInfo Error" + t)
        }
    }
    ;
    this.setLocalCloudData = function(t, e) {
        if (Configuration.isH5) {

            var i = GloableData.getInstance().savekey + t;
            SAL_setStorage(i, JSON.stringify(e))
        } else {
            SALlocalStorage.setItem("cloud|" + 0 + "|" + guid + "|" + t, JSON.stringify(e))
        }
    }
    ;
    this.getLocalCloudData = function(t, i) {
        if (Configuration.isH5) {

            var e = GloableData.getInstance().savekey + t;
            SAL_getStorage(e, function(t) {
                var e = null;
                if (t) {
                    try {
                        e = JSON.parse(t)
                    } catch (t) {}
                }
                i && i(e)
            })
        } else {
            SALlocalStorage.getItem("cloud|" + 0 + "|" + guid + "|" + t, i)
        }
    }
    ;
    this.getCaptureSaveFile = function(t) {
        if (!Configuration.enableCapture) {
            return LOGO_URL
        }
        var e = [];
        e.push(tv.canvas.viewport.element);
        e.push(tv.canvas.message[0].view.element);
        e.push(tv.canvas.message[1].view.element);
        e.push(tv.canvas.message[2].view.element);
        e.push(tv.canvas.ButtonChoice.sp.element);
        e.push(tv.canvas.TextChoice.sp.element);
        if (tv.canvas.sFloatButton) {
            e.push(tv.canvas.sFloatButton.element)
        }
        e.push(tv.canvas.weather);
        var i = Math.floor((gGameWidth + gGameX * 2) * tv.data.System.SaveData.zoom / 100);
        var a = Math.floor(gGameHeight * tv.data.System.SaveData.zoom / 100);
        return SAL_getCapture(e, i, a, t)
    }
    ;
    this.itemIndex = 0;
    this.callback = null;
    this.imageStr = "";
    this.getossKey = function(t, e, i, a, r) {
        var o = this;
        this.callback = a;
        this.itemIndex = e;
        this.imageStr = t;
        var s = function t(i) {
            if (i.data) {
                var e = "pic" + "_" + o.itemIndex + ".jpeg";
                var a = i.data["dir"] + "/" + e;
                var s = {
                    OSSAccessKeyId: i.data["accessid"],
                    signature: i.data["signature"],
                    "security-token": i.data["token"],
                    "x-oss-security-token": i.data["token"],
                    name: e,
                    key: a,
                    policy: i.data["policy"],
                    success_action_status: "200"
                };
                var n = function t() {
                    var e = PROTOCOL == "" ? "http:" : PROTOCOL;
                    e += "//" + i.data["cdn"] + "/" + a;
                    o.callback && o.callback(o, e)
                };
                SAL_uploadImage(PROTOCOL + "//" + i.data["host"], s, o.imageStr, n)
            } else {
                r && r();
                // hintMessage.setHint(i.msg)
            }
        };
        var n = function t() {
            r && r();
            // hintMessage.setHint("保存失败，请重试!")
        };
        serverAjax.sendGetAjaxJSONPForM(webConfig.GET_OSS_TEMP_TOKEN + "?token=" + GloableData.getInstance().userData.token + "&gindex=" + gIndex, s, n)
    }
    ;
    this.loadShot = function() {
        var a = this;
        var s = "";
        var t = "";
        if (Configuration.isH5) {
            t = GloableData.getInstance().savekey + "icon"
        } else {
            t = guid + "icon"
        }
        SAL_getStorage(t, function(t) {
            s = t;
            if (s) {
                try {
                    a.saveFileData = JSON.parse(decodeURIComponent(s));
                    var e = tv.data.System.SaveData.max - a.saveFileData.length;
                    for (var i = 0; i < e; i++) {
                        a.saveFileData.push({
                            index: i,
                            picurl: "",
                            name: "",
                            date: -1
                        })
                    }
                } catch (t) {
                    SAL_log("loadShot  fail: saveFileData is fail")
                }
            }
        })
    }
    ;
    this.saveShot = function() {
        var t = encodeURIComponent(JSON.stringify(this.saveFileData));
        var e = "";
        if (Configuration.isH5) {
            e = GloableData.getInstance().savekey + "icon"
        } else {
            e = guid + "icon"
        }
        SAL_setStorage(e, t)
    }
}
var operationFrame = new OperationFrame;
var BitmapFont = function() {
    function t() {
        var _ = "";
        var b = 0;
        var T = "";
        this.isGlobal = true;
        this.callBack = null;
        this.blankSpaceW = 0;
        this.fontHeight = 0;
        this.bitMapDataArr = {};
        this.sampleText = "";
        this.bitmapFontPool = {};
        this.init = function(t) {
            this.callBack = t;
            var e = fileListFato("font/font.list");
            new ORead(e,this.getFontData.bind(this))
        }
        ;
        this.initBitmapFontObj = function(t, e, i) {
            T = t;
            if (this.getFontFromFontpool(T)) {
                i && i();
                return
            }
            this.isGlobal = e;
            this.callBack = i;
            this.bitmapFontPool[T] = null;
            var t = fileListFato(T);
            new ORead(t,this.getFontData.bind(this))
        }
        ;
        this.getFontData = function(t) {
            t.readInt32();
            _ = t.readString();
            b = t.readInt32();
            var e = "font/" + _ + "$" + b + ".xfi";
            var i = fileListFato(e);
            new ORead(i,this.readFontInfo.bind(this))
        }
        ;
        this.readFontInfo = function(t) {
            var e = t.readInt32();
            var i = t.readInt32();
            var c = t.readInt32();
            var u = t.readInt32();
            var f = t.readInt32();
            var a, s, n, r;
            var d = Math.ceil(f / (e * i));
            var m = [];
            var o = [];
            var h;
            for (h = 0; h < d; h++) {
                var v = "font/" + _ + "$" + b + "$" + (h + 1) + ".png";
                m.push(fileListFato(v))
            }
            for (h = 0; h < f; h++) {
                a = t.readInt32();
                s = t.readInt32();
                n = t.readInt32();
                r = t.readUString();
                if (r == " ") {
                    this.blankSpaceW = s
                }
                if (s <= 0) {
                    s = c
                }
                var l = Math.floor(a / (e * i));
                var p = a % i * c;
                var S = (parseInt(a / i) - e * l) * u;
                if (this.isGlobal) {
                    this.bitMapDataArr[encodeURIComponent(r)] = [l, p, S, s, n]
                }
                var I = {
                    key: r,
                    page: l,
                    x: p,
                    y: S,
                    width: s,
                    height: n
                };
                o.push(I)
            }
            this.sampleText = o[0].key;
            var w = SAL_setBitmapFont(g, o, m, this.loadFinish.bind(this), this.isGlobal);
            if (!this.isGlobal && w) {
                var y = {
                    fontXfiName: T,
                    Font: w
                };
                this.setFontInFontpool(y);
                this.callBack && this.callBack();
                this.callBack = null
            }
        }
        ;
        this.setFontInFontpool = function(t) {
            this.bitmapFontPool[t.fontXfiName] = t.Font
        }
        ;
        this.getFontFromFontpool = function(t) {
            return this.bitmapFontPool[t]
        }
        ;
        this.findBitmapTxt = function(t, e) {
            var i = SALText(t, null, !systemFont);
            SAL_setTextFontSize(i, tv.data.System.FontSize);
            SAL_setTextColor(i, e);
            return i
        }
        ;
        this.getTextWidth = function(t) {
            var e = 0
              , i = 0
              , a = t.length
              , s = void 0;
            for (; i < a; i++) {
                s = this.bitMapDataArr[encodeURIComponent(t[i])];
                if (s) {
                    e += s[3]
                } else {
                    e += b
                }
            }
            return e
        }
        ;
        this.loadFinish = function() {
            var t = measureText(this.sampleText);
            this.fontHeight = t[1];
            this.callBack && this.callBack()
        }
        ;
        this.getHasBitmapFont = function(t) {
            var e = t.split("");
            for (var i = 0; i < e.length; i++) {
                if (!this.bitMapDataArr[encodeURIComponent(e[i])]) {
                    return false
                }
            }
            return true
        }
    }
    t.getInstance = function() {
        if (t._instance == null) {
            t._instance = new t
        }
        return t._instance
    }
    ;
    return t
}();

function OColorVal(t, e, i, a) {
    this.R = 0;
    this.G = 0;
    this.B = 0;
    this.A = 255;
    if (e == null) {
        a = t.split(",");
        if (a.length == 3) {
            this.R = parseInt(a[0]);
            this.G = parseInt(a[1]);
            this.B = parseInt(a[2]);
            this.A = 255
        } else if (a.length == 4) {
            this.R = parseInt(a[0]);
            this.G = parseInt(a[1]);
            this.B = parseInt(a[2]);
            this.A = parseInt(a[3])
        }
    } else if (a == null) {
        this.R = parseInt(t);
        this.G = parseInt(e);
        this.B = parseInt(i);
        this.A = 255
    } else {
        this.R = parseInt(t);
        this.G = parseInt(e);
        this.B = parseInt(i);
        this.A = parseInt(a)
    }
    this.getColor = function() {
        return SALColor(this.R, this.G, this.B, this.A)
    }
}
var errortimes = 0;
var read;

function ORead(t, a) {
    var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var n = this;
    SAL_request(t, "get", "arraybuffer", e);

    function e(t, e) {
        if (t == 200) {
            var i = e.slice(0);
            read = new OByteReader(i);
            a(read)
        } else if (s) {
            n.reLoad()
        } else {
            read = null;
            a(read)
        }
    }
    this.reLoad = function() {
        errortimes++;
        if (errortimes <= 5) {
            SAL_setTimeout(function() {
                SAL_alert("资源载入失败,尝试重新加载，第" + errortimes + "次");
                new ORead(t,a)
            }, 2500)
        } else {
            SAL_log("资源载入失败:" + t);
            read = null;
            a(read)
        }
    }
}
var silence = false;

function OAudio() {
    this.seV = 80;
    this.bgmV = 80;
    this.bgsV = 80;
    this.voiceV = 80;
    this.BGMFade = false;
    this.BGSFade = false;
    this.BGMFadeTime = 0;
    this.BGMFadeTimeMax = 0;
    this.BGSFadeTime = 0;
    this.BGSFadeTimeMax = 0;
    var a = "";
    var s = "";
    this.currentBgmPath = "";
    var n = 50;
    var r = 50;
    this.salSe = null;
    this.salVoice = null;
    this.salaudioBGS = null;
    this.salaudioBGM = null;
    this.playAll = function() {
        this.playSE("", 100);
        this.playVoice("", 100);
        this.playBGM("", 100);
        this.playBGS("", 100)
    }
    ;
    this.playSE = function(t, e) {
        if (this.salSe == null) {
            this.salSe = SALAudio(1)
        }
        if (t == "")
            return;
        if (this.seV < 5) {
            return
        }
        h = 0;
        this.seVolume = e;
        this.currentSEVolume = e;
        SAL_playAudio(this.salSe, t, silence ? 0 : e / 100 * (this.seV / 100), false)
    }
    ;
    var o = 0;
    this.seVolume = 50;
    this.currentSEVolume = 0;
    var h = 0;
    this.fadeSE = function(t, e, i) {
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 120;
        if (t)
            this.playSE(t, e);
        this.currentSEVolume = e;
        this.seVolume = i;
        h = a;
        o = (i - e) / h;
        if (a == 0) {
            this.currentSEVolume = i;
            if (i == 0) {
                this.stopSE()
            } else {
                SAL_setAudioVolume(this.salSe, silence ? 0 : this.seVolume / 100 * (this.voiceV / 100))
            }
        }
    }
    ;
    this.seFade = function(t) {
        this.fadeSE("", this.currentSEVolume, 0, t)
    }
    ;
    this.updateSE = function() {
        if (h <= 0)
            return;
        h--;
        this.currentSEVolume += o;
        if (this.currentSEVolume <= 5 && o < 0) {
            h = 0;
            this.stopSE()
        }
        SAL_setAudioVolume(this.salSe, silence ? 0 : this.currentSEVolume / 100 * (this.voiceV / 100))
    }
    ;
    this.stopSE = function() {
        SAL_stopAudio(this.salSe)
    }
    ;
    this.playVoice = function(t, e) {
        if (this.salVoice == null) {
            this.salVoice = SALAudio(2)
        }
        if (t == "")
            return;
        c = 0;
        this.voiceVolume = e;
        this.currentVoiceVolume = e;
        SAL_playAudio(this.salVoice, t, silence ? 0 : e / 100 * (this.voiceV / 100), false)
    }
    ;
    var l = 0;
    this.voiceVolume = 50;
    this.currentVoiceVolume = 0;
    var c = 0;
    this.fadeVoice = function(t, e, i) {
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 120;
        if (t) {
            this.playVoice(t, e)
        }
        this.currentVoiceVolume = e;
        this.voiceVolume = i;
        c = a;
        l = (i - e) / c;
        if (a <= 0) {
            this.currentVoiceVolume = i;
            if (i == 0) {
                this.stopVoice()
            } else {
                SAL_setAudioVolume(this.salVoice, silence ? 0 : this.voiceVolume / 100 * (this.voiceV / 100))
            }
        }
    }
    ;
    this.voiceFade = function(t) {
        this.fadeVoice("", this.currentVoiceVolume, 0, t)
    }
    ;
    this.updateVoice = function() {
        if (c <= 0)
            return;
        c--;
        this.currentVoiceVolume += l;
        if (this.currentVoiceVolume <= 5 && l < 0) {
            this.stopVoice()
        }
        SAL_setAudioVolume(this.salVoice, silence ? 0 : this.currentVoiceVolume / 100 * (this.voiceV / 100))
    }
    ;
    this.stopVoice = function() {
        SAL_stopAudio(this.salVoice)
    }
    ;
    this.playBGS = function(t, e) {
        if (this.salaudioBGS == null) {
            this.salaudioBGS = SALAudio(3)
        }
        if (t == "")
            return;
        if (s == t) {
            return
        }
        u = 0;
        s = t;
        n = e / 100 * (this.bgsV / 100);
        this.currentBGSVolume = e;
        var i = fileListFato(t);
        if (t.indexOf("http") != -1) {
            i = t
        }
        if (i) {
            SAL_playAudio(this.salaudioBGS, i, silence ? 0 : n, true)
        }
    }
    ;
    var d = 0;
    this.bgsVolume = 50;
    this.currentBGSVolume = 0;
    var u = 0;
    this.fadeBGS = function(t, e, i) {
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 120;
        if (t) {
            this.playBGS(t, e)
        }
        this.currentBGSVolume = e;
        this.bgsVolume = i;
        u = a;
        d = (i - e) / u;
        if (a == 0) {
            if (i == 0) {
                this.stopBGS()
            } else {
                SAL_setAudioVolume(this.salaudioBGS, silence ? 0 : this.bgsVolume / 100 * (this.voiceV / 100))
            }
        }
    }
    ;
    this.bgsFade = function(t) {
        this.fadeBGS("", this.currentBGSVolume, 0, t)
    }
    ;
    this.updateBGS = function() {
        if (u <= 0)
            return;
        u--;
        this.currentBGSVolume += d;
        if (this.currentBGSVolume <= 5 && d < 0) {
            this.stopBGS()
        }
        SAL_setAudioVolume(this.salaudioBGS, silence ? 0 : this.currentBGSVolume / 100 * (this.voiceV / 100))
    }
    ;
    this.stopBGS = function() {
        n = 0;
        SAL_stopAudio(this.salaudioBGS);
        this.BGSFade = false;
        s = ""
    }
    ;
    this.playBGM = function(t, e) {
        if (this.salaudioBGM == null) {
            this.salaudioBGM = SALAudio(0)
        }
        if (t == "")
            return;
        if (a == t) {
            return
        }
        this.stopBGM();
        f = 0;
        a = t;
        this.currentBgmPath = a;
        this.currentBGMVolume = e;
        r = e / 100 * (this.bgmV / 100);
        var i = fileListFato(t);
        if (t.indexOf("http") != -1) {
            i = t
        }
        if (i) {
            SAL_playAudio(this.salaudioBGM, i, silence ? 0 : r, true)
        }
    }
    ;
    var m = 0;
    this.bgmVolume = 50;
    this.currentBGMVolume = 0;
    var f = 0;
    this.fadeBGM = function(t, e, i) {
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 120;
        if (t) {
            this.playBGM(t, e)
        }
        this.currentBGMVolume = e;
        this.bgmVolume = i;
        f = a;
        m = (i - e) / f;
        if (a == 0) {
            if (i == 0) {
                this.stopBGM()
            } else {
                SAL_setAudioVolume(this.salaudioBGM, silence ? 0 : this.bgmVolume / 100 * (this.voiceV / 100))
            }
        }
    }
    ;
    this.bgmFade = function(t) {
        this.fadeBGM("", this.currentBGMVolume, 0, t)
    }
    ;
    this.updateBGM = function() {
        if (f <= 0)
            return;
        f--;
        this.currentBGMVolume += m;
        if (this.currentBGMVolume <= 5 && m < 0) {
            this.stopBGM()
        }
        SAL_setAudioVolume(this.salaudioBGM, silence ? 0 : this.currentBGMVolume / 100 * (this.voiceV / 100))
    }
    ;
    this.stopBGM = function() {
        SAL_stopAudio(this.salaudioBGM);
        r = 0;
        this.BGMFade = false;
        a = ""
    }
    ;
    this.fadeAll = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;
        this.voiceFade(t);
        this.seFade(t);
        this.bgsFade(t);
        this.bgmFade(t)
    }
    ;
    this.stopAll = function() {
        this.stopBGM();
        this.stopSE();
        this.stopBGS();
        this.stopVoice()
    }
    ;
    this.silenceAudio = function(t) {
        silence = t;
        SAL_setAudioVolume(this.salaudioBGS, silence ? 0 : this.bgsV / 100);
        SAL_setAudioVolume(this.salaudioBGM, silence ? 0 : this.bgmV / 100);
        SAL_setAudioVolume(this.salSe, silence ? 0 : this.seV / 100);
        SAL_setAudioVolume(this.salVoice, silence ? 0 : this.voiceV / 100)
    }
    ;
    this.update = function() {
        this.updateSE();
        this.updateVoice();
        this.updateBGS();
        this.updateBGM()
    }
    ;
    this.minValue = 2;
    this.setBgmVolumeGame = function(t) {
        this.bgmV = t > this.minValue ? t : 0;
        SAL_setAudioVolume(this.salaudioBGM, silence ? 0 : this.bgmV / 100)
    }
    ;
    this.setBGSVolumeGame = function(t) {
        this.bgsV = t > this.minValue ? t : 0;
        SAL_setAudioVolume(this.salaudioBGS, silence ? 0 : this.bgsV / 100)
    }
    ;
    this.setSeVolumeGame = function(t) {
        this.seV = t > this.minValue ? t : 0;
        SAL_setAudioVolume(this.salSe, silence ? 0 : this.seV / 100)
    }
    ;
    this.setVoiceVolumeGame = function(t) {
        this.voiceV = t > this.minValue ? t : 0;
        SAL_setAudioVolume(this.salVoice, silence ? 0 : this.voiceV / 100)
    }
    ;
    this.pauseBgAudio = function() {
        SAL_pauseAudio(this.salaudioBGS);
        SAL_pauseAudio(this.salaudioBGM);
        SAL_pauseAudio(this.salSe);
        SAL_pauseAudio(this.salVoice)
    }
    ;
    this.resumeBgAudio = function() {
        if (s) {
            SAL_resumeAudio(this.salaudioBGS)
        }
        if (a) {
            SAL_resumeAudio(this.salaudioBGM)
        }
    }
    ;
    this.saveData = function(t) {
        t.BGM = a;
        t.BGMV = this.bgmV;
        t.BGS = s;
        t.BGSV = this.bgsV
    }
    ;
    this.loadData = function(t) {
        var e = t.BGM;
        if (e.toLowerCase().indexOf("audio/") == -1) {
            e = "audio/" + e
        }
        var i = parseInt(t.BGMV);
        var a = t.BGS;
        var s = parseInt(t.BGSV);
        this.playBGM(e, i);
        this.playBGS(a, s);
        this.stopVoice()
    }
    ;
    this.playButtonSE = function(t, e) {
        if (this.salBtnSe == null) {
            this.salBtnSe = SALAudio(1)
        }
        SAL_playAudio(this.salBtnSe, t, silence ? 0 : e / 100 * (this.seV / 100), false)
    }
    ;
    this.dispose = function() {
        SAL_stopAudio(this.salSe);
        SAL_stopAudio(this.salVoice);
        SAL_stopAudio(this.salaudioBGS);
        SAL_stopAudio(this.salaudioBGM);
        SAL_destroyElement(this.salSe);
        SAL_destroyElement(this.salVoice);
        SAL_destroyElement(this.salaudioBGS);
        SAL_destroyElement(this.salaudioBGM);
        this.salSe = null;
        this.salVoice = null;
        this.salaudioBGS = null;
        this.salaudioBGM = null
    }
}

function OScrollBar(o) {
    ODisplayObject.call(this);
    var r = o.scrollType ? o.scrollType : 0;
    var h = null
      , l = null
      , i = null;
    var t = null
      , c = null;
    var u = false
      , m = false;
    this.value = o.value;
    this.max = o.max;
    var a = -1;
    var e = o.max;
    var f, d;
    var g = o.hasOwnProperty("width") && o.hasOwnProperty("height");
    if (g) {
        this.width = o.width;
        this.height = o.height
    }
    this.element = SALContainer();
    SAL_setElementVisible(this.element, false);
    this.init = function() {
        if (o.type == 1) {
            this.loadImage()
        } else if (o.type == 2) {
            this.loadGraphic()
        }
    }
    ;
    this.update = function() {
        this.moveBar()
    }
    ;
    this.moveBar = function() {
        if (!u) {
            return
        }
        if (a == this.value && e == this.max) {
            return
        }
        a = this.value;
        e = this.max;
        var t = this.value / e;
        t = t > 1 ? 1 : t;
        t = t < 0 ? 0 : t;
        t = this.value == 0 ? 0 : t;
        if (o.type == 1) {
            this.updateImageBar(t)
        } else if (o.type == 2) {
            this.updateGraphicBar(t)
        }
    }
    ;
    this.updateValue = function(t) {
        if (!u || !m) {
            return false
        }
        if (t < 0) {
            t = 0
        } else if (t > e) {
            t = e
        }
        this.value = t;
        return true
    }
    ;
    this.resetTouch = function() {
        m = false
    }
    ;
    this.setValue = function(t, e) {
        this.value = t;
        this.max = e
    }
    ;
    this.loadImage = function() {
        if (o.type != 1) {
            return
        }
        var a = o.bg;
        var t = o.cover;
        if (a.toLowerCase().indexOf("graphics/") != -1) {
            a = fileListFato(a)
        }
        if (t.toLowerCase().indexOf("graphics/") != -1) {
            t = fileListFato(t)
        }
        if (a[a.length - 1] == "/") {
            a = ""
        }
        if (t[t.length - 1] == "/") {
            t = ""
        }
        if (!t) {
            return
        }
        var s = !a
          , n = !t;
        var r = this;
        var e = function t() {
            if (s && n) {
                u = true
            }
            if (u) {
                var e = 0
                  , i = 0;
                if (a) {
                    e = SAL_getElementWidth(h);
                    i = SAL_getElementHeight(h)
                }
                f = SAL_getElementWidth(l);
                d = SAL_getElementHeight(l);
                if (!g) {
                    r.width = Math.max(e, f);
                    r.height = Math.max(i, d)
                } else {
                    f = Math.min(r.width, f);
                    d = Math.min(r.height, d)
                }
                if (a && g && (r.width < e || r.height < i)) {
                    SAL_setElementClip(h, r.width, r.height)
                }
                r.moveBar();
                SAL_setElementVisible(r.element, r.visible)
            }
        };
        if (a) {
            h = SALSprite("", function() {
                s = true;
                e()
            });
            SAL_addElement(this.element, h);
            SAL_resetElement(h, a)
        }
        if (t) {
            l = SALSprite("", function() {
                n = true;
                e()
            });
            SAL_addElement(this.element, l);
            SAL_resetElement(l, t);
            if (o.enableEdit) {
                i = SALSprite(t);
                SAL_setElementBlockTouch(i, false);
                SAL_setTransparencyFiltering(i, true);
                SAL_setElementOpacity(i, .01);
                SAL_addTouchDown(i, function() {
                    m = true
                });
                SAL_addElement(this.element, i)
            }
        }
    }
    ;
    this.loadGraphic = function() {
        if (o.type != 2) {
            return
        }
        u = true;
        this.width = o.width;
        this.height = o.height;
        t = get16Color(o.bg);
        c = get16Color(o.cover);
        h = SALGraphic(0, [0, 0, o.width, o.height], t);
        SAL_addElement(this.element, h);
        l = SALGraphic(0, [o.border, o.border, 1, o.height - o.border * 2], c);
        SAL_addElement(this.element, l);
        this.moveBar();
        SAL_setElementVisible(this.element, this.visible)
    }
    ;
    this.updateImageBar = function(t) {
        var e = void 0
          , i = void 0
          , a = void 0
          , s = void 0;
        if (r < 2) {
            a = parseInt(f * t);
            s = d
        } else {
            a = f;
            s = parseInt(d * t)
        }
        e = i = 0;
        if (r == 1) {
            e = f - a
        } else if (r == 3) {
            i = d - s
        }
        SAL_setElementClip(l, a, s, e, i);
        SAL_setPosition(l, e, i)
    }
    ;
    this.updateGraphicBar = function(t) {
        var e = void 0
          , i = void 0
          , a = void 0
          , s = void 0;
        if (r < 2) {
            a = (o.width - o.border * 2) * t;
            s = o.height - o.border * 2
        } else {
            a = o.width - o.border * 2;
            s = (o.height - o.border * 2) * t
        }
        e = o.border;
        i = o.border;
        if (r == 1) {
            e = o.width - o.border - a
        } else if (r == 3) {
            i = o.height - o.border - s
        }
        var n = {
            type: 0,
            info: [e, i, a, s],
            color: c
        };
        SAL_resetElement(l, n)
    }
    ;
    this.init()
}

function OCheck(n, t, e) {
    ODisplayObject.call(this);
    this.element = SALContainer();
    var r = t;
    var o = n.length;
    var h = new Array(o);
    this.init = function() {
        var t, e, i, a, s;
        for (t = 0; t < o; t++) {
            i = tv.data.System.Buttons[n[t].index];
            if (t == r) {
                a = "Graphics/Button/" + i.image2;
                s = "Graphics/Button/" + i.image1
            } else {
                a = "Graphics/Button/" + i.image1;
                s = "Graphics/Button/" + i.image2
            }
            e = new OBitmap(a);
            e.setTransparencyFiltering(true);
            e.tag = s;
            e.setPosition(n[t].x, n[t].y);
            SAL_addElement(this.element, e.element);
            e.addEvent("click", this.updateCheck, t, this);
            h[t] = e
        }
    }
    ;
    this.updateCheck = function(t) {
        this.switchSelected(h[r]);
        this.switchSelected(h[t]);
        r = t;
        e && e(r)
    }
    ;
    this.switchSelected = function(t) {
        var e = t.url;
        t.setUrl(t.tag);
        t.tag = e
    }
    ;
    this.init()
}

function SInGameConfirm(t, c, i, e, u) {
    var f = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 20;
    OContainer.call(this, gGameWidth, gGameHeight);
    this.message = t;
    this.callback1 = e;
    this.callback2 = u;
    var a = void 0
      , s = void 0
      , n = void 0
      , r = void 0
      , o = void 0
      , h = void 0
      , l = void 0;
    this.bgUrl = commonMessageBg;
    this.lineUrl = commonMessageLine;
    this.cnUrl = commonMessageIcon;
    this.leftBtnUrl = commonMessageLeftBtn;
    this.rightBtnUrl = commonMessageRightBtn;
    this.aloneBtnUrl = commonMessageAloneBtn;
    this.succenUrl = commonMessageSuccenBg;
    this.setBlockTouch(true);
    this.init = function() {
        var t = this;
        a = new OBitmap(autoSaveMaskPath);
        this.addChild(a);
        a.setSize(gGameWidth, gGameHeight);
        s = new OBitmap(this.bgUrl);
        this.addChild(s);
        s.setPosition((gGameWidth - 354) / 2, (gGameHeight - 220) / 2);
        if (clientType != 1 && clientType != 5) {
            h = new OBitmap(this.lineUrl);
            this.addChild(h);
            h.setPosition(gGameWidth - 300 >> 1, (gGameHeight - 220) / 2);
            l = new OBitmap(this.cnUrl);
            this.addChild(l);
            l.setPosition(gGameWidth - 118 >> 1, s.y - 80)
        }
        n = new OText(this.message);
        n.setSize(340, 100);
        n.setTextSize(f);
        this.addChild(n);
        n.setPosition((gGameWidth - n.textWidth) / 2, s.y + 75);
        n.setColor(get16Color("#000000"));
        if (clientType == 1 || clientType == 5) {
            n.setPosition((gGameWidth - n.textWidth) / 2, s.y + 51)
        }
        var e = this.leftBtnUrl;
        if (this.btn_2) {
            e = this.aloneBtnUrl
        }
        r = new ONButton(e,e,c);
        this.addChild(r);
        r.setPosition(s.x, s.y + 145);
        r.setTextColor(get16Color("#999999"));
        if (clientType == 1 || clientType == 5) {
            r.setPosition(s.x + 28, s.y + 123);
            r.setTextColor(get16Color("#000000"))
        }
        r.setTextSize(19);
        r.setFont("微软雅黑");
        r.addClick(function() {
            t.callback1 && t.callback1();
            t.dispose()
        });
        if (i) {
            o = new ONButton(this.rightBtnUrl,this.rightBtnUrl,i);
            this.addChild(o);
            o.setPosition(s.x + 176, s.y + 145);
            o.setTextColor(get16Color("#FF730A"));
            if (clientType == 1 || clientType == 5) {
                o.setPosition(s.x + 190, s.y + 123);
                o.setTextColor(get16Color(clientType == 5 ? "#ffffff" : "#000000"))
            }
            o.setTextSize(19);
            o.setFont("微软雅黑");
            o.addClick(function() {
                t.callback2 && t.callback2();
                t.dispose()
            })
        } else {
            r.setPosition((gGameWidth - 160) / 2, (gGameHeight + 80) / 2)
        }
    }
    ;
    this.update = function() {}
}

function SStart() {
    var e = this;
    this.continueGame = null;
    this.loginConfirm = null;
    this.autoSaveData = "";
    this.loadDataFinish = true;
    this.init = function() {
        setTestVer();
        GloableData.getInstance().have_back_flower_flag = 1;
        tv.canvas.clear();
        tv.system.clear();
        GloableData.getInstance().clearMallBuyCount();
        oaudio.stopAll();
        if (!localProjectPath && needPopupResume) {
            needPopupResume = false;
            this.loadDataFinish = false;
            var i = this;
            var t = function t(e) {
                i.autoSaveData = e;
                i.loadDataFinish = true
            };
            operationFrame.getLocalCloudData(-100, t)
        }
        if (Configuration.isH5) {
            GloableData.getInstance().loadMallAllItems();
            if (hasFileItem("data/malllimite.bin")) {
                GloableData.getInstance().loadTimeMallAllItems()
            }
        }
    }
    ;
    this.update = function() {
        if (!this.loadDataFinish || this.continueGame != null || this.loginConfirm != null) {
            return
        }
        if (localProjectPath) {
            var t = tv.data.System.StartStoryId;
            if (mapID && mapID != tv.data.System.StartStoryId) {
                t = mapID
            }
            if (tv.data.System.SkipTitle) {
                tv.storyList.currentStory.jumpStory(t, function() {
                    tv.scene = new SGame
                })
            } else {
                tv.scene = new STitle(true)
            }
            this.loadDataFinish = false;
            return
        }
        if (this.autoSaveData && !GloableData.getInstance().back_flower_flag) {
            this.continueGame = new SInGameConfirm("是否从上次播放处继续观看？","从头开始","继续观看",this.startGame.bind(this),this.loadData.bind(this));
            SAL_setElementIndex(g, this.continueGame.element, 1e4);
            this.continueGame.setPosition(gGameX, 0);
            this.continueGame.init();
            return
        }
        if (tv.data.System.SkipTitle) {
            tv.storyList.currentStory.jumpStory(tv.data.System.StartStoryId, function() {
                tv.scene = new SGame
            })
        } else {
            tv.scene = new STitle(true)
        }
        this.loadDataFinish = false
    }
    ;
    this.dispose = function() {
        if (this.continueGame != null) {
            this.continueGame.dispose();
            this.continueGame = null
        }
        if (this.loginConfirm != null) {
            this.loginConfirm.dispose();
            this.loginConfirm = null
        }
        if (!this.autoSaveData) {
            this.autoSaveData = null
        }
    }
    ;
    this.startGame = function() {
        this.autoSaveData = null;
        if (this.continueGame != null) {
            this.continueGame.dispose();
            this.continueGame = null
        }
    }
    ;
    this.loadData = function() {
        var t = tv.system.rwFile.loadHeadCloudData(this.autoSaveData);
        if (t[4] && t[4] == 1) {
            var e = tv.canvas.cWebFree.getPlayNum() > GloableData.getInstance().userData.realFlower;
            if (!tv.canvas.cWebFree.isFree && e) {
                var i = tv.canvas.cWebFree.getPlayNum() - GloableData.getInstance().userData.realFlower;
                // hintMessage.setHint("作品限免已结束，限免存档需要补送" + i + " 朵鲜花才能继续使用", "#ffffff");
                return false
            }
        }
        var a = this;
        operationFrame.ParseFrameInfo(-100, this.autoSaveData, function() {
            tv.scene = new SGame;
            a.dispose()
        })
    }
    ;
    if (!localProjectPath && needPopupResume) {
        this.loadDataFinish = false
    }
    if (GloableData.getInstance().have_back_flower_flag || localProjectPath || clientType == 3 || clientType == 6) {
        this.init();
        return
    }
    var t = webConfig.GET_USER_CHECK_REFUND + "?gindex=" + gIndex;
    t = t + "&token=" + GloableData.getInstance().userData.token;
    serverAjax.sendGetAjaxJSON(t, function(t) {
        if (t.status == 1 && t.data) {
            GloableData.getInstance().back_flower_flag = t.data.back_flower_flag
        }
        e.init()
    }, function() {
        e.init()
    })
}

function STitle(t) {
    var r = t;
    var o = false;
    var e = false;
    var h = tv.data.System.Title;
    var i, a;
    var s, n;
    this.clickFlag = false;
    this.container = new OContainer;
    this.container.setBlockTouch(true);
    SAL_setElementIndex(g, this.container.element, 6100);
    this.container.setPosition(gGameX, 0);
    this.init = function() {
        tv.canvas.menuIsShow(false);
        if (h.showLog && r) {
            i = 60;
            this.startLogo()
        } else {
            i = 15;
            this.startNormal()
        }
    }
    ;
    this.startLogo = function() {
        if (isM || isIE || GloableData.getInstance().isMobile()) {
            s = new OBitmap(LOGO_URL);
            this.container.addChild(s);
            SAL_setElementOpacity(s.element, 0);
            s.fadeTo(1, i * 1e3 / FPS);
            a = i * 3
        } else {
            n = SALVideo();
            this.container.addChild(n);
            SAL_playVideo(n, logoCGURL);
            SAL_setElementSize(n, gGameWidth, gGameHeight);
            a = i * 5
        }
    }
    ;
    this.startNormal = function() {
        o = false;
        var t = new OBitmap("Graphics/Background/" + h.titleImagle);
        this.container.addChild(t);
        var e = ["NewGame", "LoadGame", "CG", "BGM", "Setting", "Exit"];
        for (var i = 0; i < e.length; ++i) {
            var a = tv.data.System.Buttons[h.buttons[i].index];
            if (a.image1.IsNil() && a.image2.IsNil())
                continue;
            var s = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
            s.setTransparencyFiltering(true);
            s.setPosition(h.buttons[i].x, h.buttons[i].y);
            s.tag = e[i];
            s.addClick(this.buttonClick, s, this);
            this.container.addChild(s)
        }
        if (!h.bgm.FileName.IsNil()) {
            if (r) {
                var n = "Audio/BGM/" + h.bgm.FileName.name;
                oaudio.fadeBGM(n, 0, h.bgm.Volume)
            }
        } else {
            oaudio.stopBGM()
        }
    }
    ;
    this.update = function() {
        if (a > 0) {
            a -= 1;
            return
        }
        if (o && e) {
            if (!Configuration.isH5) {
                tv.canvas.privacyAgreement = new PrivacyAgreement
            }
            this.startNormal()
        } else {
            this.fadeOutLogo()
        }
    }
    ;
    this.buttonClick = function(t) {
        if (this.clickFlag) {
            return
        }
        this.clickFlag = true;
        if (t.tag === "NewGame") {
            var e = this;
            var i = tv.data.System.StartStoryId;
            if (localProjectPath && mapID && mapID != tv.data.System.StartStoryId) {
                i = mapID
            }
            tv.storyList.currentStory.jumpStory(i, function() {
                e.dispose();
                tv.scene = new SGame;
                oaudio.bgmFade(2)
            })
        } else if (t.tag === "LoadGame") {
            this.dispose();
            tv.scene = new SSavefile(true,false)
        } else if (t.tag === "CG") {
            this.dispose();
            tv.scene = new SCG(true)
        } else if (t.tag === "BGM") {
            this.dispose();
            tv.scene = new SBGM(true)
        } else if (t.tag === "Setting") {
            this.dispose();
            tv.scene = new SSystem(true)
        } else if (t.tag === "Exit") {
            SAL_exit()
        }
    }
    ;
    this.fadeOutLogo = function() {
        if (h.showLog && !e && !o) {
            if (s != null) {
                s.fadeTo(0, i * 1e3 / FPS)
            } else if (n != null) {
                var t = SALAction({
                    type: "fadeTo",
                    opacity: 0,
                    duration: i * 1e3 / FPS
                });
                SAL_runAction(n, t)
            }
            a = i;
            o = true;
            e = true
        }
    }
    ;
    this.dispose = function() {
        tv.canvas.menuIsShow(true);
        if (tv.canvas) {
            SAL_setElementVisible(tv.canvas.menu, true)
        }
        if (s != null)
            s.dispose();
        if (n != null)
            SAL_destroyElement(n);
        if (this.container) {
            this.container.dispose();
            this.container = null
        }
    }
    ;
    gLoadAssets.curLoadScene = "STitle";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function SMenu() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var n = tv.data.System.GameMenu;
    this.fadeFps = t;
    this.container = new OContainer;
    this.container.setBlockTouch(true);
    this.container.setAlpha(0);
    SAL_setElementIndex(g, this.container.element, 6e3);
    this.container.setPosition(gGameX, 0);
    gLoadAssets.curLoadScene = "SMenu";
    this.init = function() {
        tv.canvas.menuIsShow(false);
        var t = new OBitmap("Graphics/UI/" + n.backImage);
        this.container.addChild(t);
        var e = ["Save", "Load", "Replay", "Auto", "System", "Back"];
        for (var i = 0; i < e.length; ++i) {
            var a = tv.data.System.Buttons[n.buttons[i].index];
            if (a.image1.IsNil()) {
                continue
            }
            var s = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
            s.setPosition(n.buttons[i].x, n.buttons[i].y);
            s.setTransparencyFiltering(true);
            s.tag = e[i];
            s.addClick(this.buttonClick, s, this);
            this.container.addChild(s)
        }
        this.container.fadeTo(1, this.fadeFps / FPS * 1e3)
    }
    ;
    this.buttonClick = function(t) {
        if (t.tag != "Back") {
            tv.CUIFromIndex = 10001
        }
        if (t.tag === "Save") {
            this.dispose();
            tv.scene = new SSavefile(false,true)
        } else if (t.tag === "Load") {
            this.dispose();
            tv.scene = new SSavefile(false,false)
        } else if (t.tag === "Replay") {
            this.dispose();
            tv.scene = new SReplay
        } else if (t.tag === "Auto") {
            this.dispose();
            tv.system.autoRun = !tv.system.autoRun;
            tv.scene = new SGame
        } else if (t.tag === "System") {
            this.dispose();
            tv.scene = new SSystem(false)
        } else if (t.tag === "Back") {
            this.dispose();
            tv.scene = new SGame
        }
    }
    ;
    this.update = function() {}
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.container.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.dispose()
            }
        })
    }
    ;
    this.dispose = function() {
        tv.CUIFromIndex == -1;
        if (this.container != null) {
            this.container.dispose();
            this.container = null
        }
    }
    ;
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function SReplay() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    OContainer.call(this);
    this.data = null;
    this.backImage;
    this.closeButton;
    this.zhiba;
    this.str;
    this.opView;
    this.fadeFps = t;
    this.setAlpha(0);
    SAL_setElementIndex(g, this.element, 6e3);
    this.setPosition(gGameX, 0);
    this.setBlockTouch(true);
    this.init = function() {
        this.data = tv.data.System.Replay;
        this.addBackground();
        this.str = this.makeText();
        this.addSlideContainer();
        this.addText();
        this.addClose();
        this.fadeTo(1, this.fadeFps / 60 * 1e3)
    }
    ;
    this.addBackground = function() {
        if (!this.data.backimage.IsNil()) {
            this.backImage = new OBitmap("Graphics/UI/" + this.data.backimage.name);
            this.addChild(this.backImage)
        }
    }
    ;
    this.addClose = function() {
        var t = tv.data.System.Buttons[this.data.closeButton.index];
        var t1 = tv.data.System.Buttons[this.data.closeButton.index + 3];
        if (t.image1.IsNil() && t.image2.IsNil()) {
            SAL_log("SReplay:img is null")
        } else {
            this.closeButton = new ONButton("Graphics/Button/" + t.image1,"Graphics/Button/" + t.image2);
            this.closeButton.setTransparencyFiltering(true);
            this.closeButton.setPosition(this.data.closeButton.x, this.data.closeButton.y);
            this.closeButton.addClick(this.dispose.bind(this));
            this.addChild(this.closeButton)
            this.zhiba = new ONButton("Graphics/Button/" + t1.image1,"Graphics/Button/" + t1.image2);
            this.zhiba.setTransparencyFiltering(true);
            this.zhiba.setPosition(30, 30);
            this.zhiba.addClick(function() {
                SAL_callInput({
                    x: 66,
                    y: 66,
                    w: 66,
                    h: 66,
                    size: 15,
                    tips: "",
                    max: 6
                }, function(t, e) {
                    var inputValue = e.value;
                    if (inputValue.startsWith("制霸")) {
                        zb = inputValue.substring(2);
                        zb = parseInt(zb);
                        // 将字符串转换为整数
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.vars.data[i] != null) {
                                tv.system.vars.data[i] = zb;
                            }
                        }

                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.varsEx.data[i] != null) {
                                tv.system.varsEx.data[i] = zb;
                            }
                        }
                    } else if (inputValue.startsWith("累充")) {
                        xx = inputValue.substring(2);
                        xx = parseInt(xx);
                        flagxx = 1;
                        // 执行其他累充相关的逻辑
                        GloableData.getInstance().userData.totalFlower = xx;
                        GloableData.getInstance().userData.realFlower = xx;
                        tv.userFlower=-xx;
                    } else if (inputValue.startsWith("提取代码")) {
                        gamebind();
                        let dmdm = processFileContent(fileContent);
                        if (fileContent !== undefined)
                            downloadFile(dmdm, tv.data.Headr.title + ".txt");
                    } else if (inputValue.startsWith("剧情跳转")) {
                        var jqid = inputValue.substring(4);
                        tv.storyList.currentStory.jumpStory(jqid, function() {
                            tv.scene = new SGame
                        })

                    } else if (inputValue.startsWith("帮改代码")) {
                        gamebind();
                        let dmdm = processFileContent(fileContent);
                        let content = '';
                        content += `/****已挑选可帮改代码****/\n`;
                        content += `\n/****普通数值****/\n`;
                        var bdsdds = [];
                        for (const [key,value] of Object.entries(uniqueMatchesArray2)) {
                            bdsdds[value.number - 1] = value.value;

                        }
                        var abdsdds = [];
                        for (const [key,value] of Object.entries(uniqueMatchesArray)) {
                            abdsdds[value.number - 1] = value.value;

                        }
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.vars.data[i] == i) {
                                content += 'tv.system.vars.data[' + i + ']=999999' + '    //' + bdsdds[i] + '\n';

                            }
                        }
                        content += `\n\n\n/****二周目数值****/\n`;
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.varsEx.data[i] == i) {
                                content += 'tv.system.varsEx.data[' + i + ']=999999' + '   //' + abdsdds[i] + '\n';
                            }

                        }
                        if (fileContent !== undefined)
                            downloadFile(content, tv.data.Headr.title + "帮改代码.txt");
                    } else if (inputValue.startsWith("xi")) {
                        gamebind();
                        let dmdm = processFileContent(fileContent);
                        let content = '';
                        content += `/****格式1****/\n`;
                        content += `\n/****普通数值****/\n`;
                        var bdsdds = [];
                        for (const [key,value] of Object.entries(uniqueMatchesArray2)) {
                            bdsdds[value.number - 1] = value.value;

                        }
                        var abdsdds = [];
                        for (const [key,value] of Object.entries(uniqueMatchesArray)) {
                            abdsdds[value.number - 1] = value.value;

                        }
                        for (let i = 0; i < bdsdds.length; i++) {
                            if (bdsdds[i] !== null) {
                                content += '单档[' + i + ']=999999' + '    //' + bdsdds[i] + '\n';
                            }

                        }
                        content += `\n\n\n/****二周目数值****/\n`;
                        for (let i = 0; i < abdsdds.length; i++) {
                            if (abdsdds[i] !== null) {
                                content += '全档[' + i + ']=999999' + '   //' + abdsdds[i] + '\n';
                            }

                        }
                        if (fileContent !== undefined)
                            downloadFile(content, tv.data.Headr.title + "xi代码.txt");
                    } else if (inputValue.startsWith("指定存档")) {
                        getAllLocalCloudData();
                        // 获取所有数据并存储在数组中
                        let cdxz = inputValue.substring(4);
                        cdxz = parseInt(cdxz);
                        // 将字符串转换为整数
                        SAL_callInput({
                            x: 66,
                            y: 66,
                            w: 66,
                            h: 66,
                            size: n,
                            tips: JSON.stringify(dataArray[cdxz]),
                            max: 6
                        }, function() {//    downloadFile(JSON.stringify(dataArray), tv.data.Headr.title + "存档数据.txt");
                        // 下载保存数据数组
                        });
                    } else if (inputValue.startsWith("存档下载")) {
                        getAllLocalCloudData();
                        // 获取所有数据并存储在数组中
                        let cdxz = inputValue.substring(4);
                        cdxz = parseInt(zb);
                        // 将字符串转换为整数
                        SAL_callInput({
                            x: 66,
                            y: 66,
                            w: 66,
                            h: 66,
                            size: n,
                            tips: JSON.stringify(dataArray),
                            max: 6
                        }, function() {

                            if (platform === "桌面设备")
                                downloadFile(JSON.stringify(dataArray), tv.data.Headr.title + "存档数据.txt");
                            // 下载保存数据数组
                        });
                    } else if (inputValue.startsWith("替换")) {
                        // 示例命令字符串
                        //var command = "替换3存档";

                        // 提取第三个字符并转换为数字
                        var thirdCharacter = parseInt(inputValue.charAt(2));

                        // 输出第三个数字
                        //console.log("第三个数字：", thirdCharacter);
                        //默认只更新第一个存档
                        let zdxz = inputValue.substring(5);
                        var sj = JSON.parse(zdxz);
                        saveDataWithKey(sj, thirdCharacter);

                    } else if (inputValue.startsWith("存档更新")) {
                        var fileContent3;

                        // 创建一个<input type="file">元素
                        var fileInput = document.createElement('input');
                        fileInput.type = 'file';

                        // 定义一个函数，用于读取文件内容并返回一个Promise对象
                        function readFileContent(file) {
                            return new Promise(function(resolve, reject) {
                                var reader = new FileReader();
                                reader.onload = function(e) {
                                    var fileContent = e.target.result;
                                    resolve(fileContent);
                                }
                                ;
                                reader.onerror = function(e) {
                                    reject(e);
                                }
                                ;
                                reader.readAsText(file);
                            }
                            );
                        }

                        // 监听文件选择事件
                        fileInput.addEventListener('change', function(event) {
                            var file = event.target.files[0];
                            // 获取用户选择的文件
                            if (file) {
                                // 读取文件内容并保存到fileContent3变量
                                readFileContent(file).then(function(content) {
                                    fileContent3 = content;
                                    console.log(fileContent3);
                                    // 在这里可以对文件内容进行处理
                                    var sj = JSON.parse(fileContent3);
                                    for (let i = 0; i < sj.length; i++) {
                                        saveDataWithKey(sj[i], i);
                                    }
                                }).catch(function(error) {
                                    console.error('读取文件内容出错:', error);
                                });
                            }
                        });

                        // 触发文件选择对话框
                        fileInput.click();
                    } else if (inputValue.startsWith("下载")) {
                        gamebind();
                        downloadFile(fileContent, tv.data.Headr.title + "game_bin.txt");

                    } else if (inputValue.startsWith("获取剧情文件")) {
                        tv.data.stories = tv.data.stories.filter(story=>story.ID !== 0);

                        displayStories();

                    } else if (inputValue.startsWith("剧情跳转")) {
                        var jqid = inputValue.substring(4);
                        tv.storyList.currentStory.jumpStory(jqid, function() {
                            tv.scene = new SGame
                        })

                    } else if (inputValue.startsWith("兑换码1")) {
                        downloadFile(content2, tv.data.Headr.title + '兑换码(controls).txt');
                    } else if (inputValue.startsWith("兑换码2")) {
                        if (contentdh2.length !== 0) {
                            downloadFile(contentdh2, tv.data.Headr.title + '兑换码(工程1).txt');
                            cz = 0;
                            contentdh2 = [];
                        } else {
                            cz = 1;
                        }

                        if (stringsArray.length > 0) {
                            stringsArray.forEach(match=>{
                                contentdh2 += match + '\n';
                            }
                            );
                            contentdh2 += '\n\n\n去除文字\n\n\n';
                        }

                        if (numbersArray.length > 0) {
                            numbersArray.forEach(match=>{
                                if (match.length > 2)
                                    contentdh2 += match + '\n';
                            }
                            );
                        }

                    } else if (inputValue.startsWith("兑换码3")) {
                        downloadFile(content2, tv.data.Headr.title + '兑换码.txt');

                    } else if (inputValue.startsWith("商城数量")) {
                        slsc = inputValue.substring(4);

                    } else if (inputValue.startsWith("用户1存档")) {
                        GloableData.getInstance().userData.uid = 102783545;

                    } else if (inputValue.startsWith("代码定位")) {
                        dw = inputValue.substring(4);
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.vars.data[i] == dw) {
                                tv.system.vars.data[i] = i;
                            }
                        }

                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.varsEx.data[i] == dw) {
                                tv.system.varsEx.data[i] = i;
                            }
                        }
                    } else if (inputValue.startsWith("GG")) {

                        matches = extractNumbers(inputValue);

                        for (let i = 0; i < 9999999; i++) {
                            if (tv.system.vars.data[i] == parseInt(matches[0]) && tv.system.vars.data[i] != null) {
                                tv.system.vars.data[i] = parseInt(matches[1]);
                            }
                        }

                    } else if (inputValue.startsWith("命令提示")) {
                        window.alert("有如下命令提示：\n1.数值一键制霸：制霸123\n2.修改累充数量：累充1520（默认数量1520）\n3.下载game.bin文件：下载\n4.提取游戏的数值代码：提取代码\n5.提取兑换码：兑换码1（根据UI的controls提取）兑换码2（根据故事列表获取）");
                        window.alert("\n6.GG数值修改：GG0to1\n7.代码快速定位：代码定位1（定位值为1的数值）\n8.挑选可用的数值：帮改代码（先用快速定位的功能，再来挑选帮改代码）\n9.获取全部剧情：获取剧情文件+id，可下载指定id剧情文件\n10.提取存档：存档下载（一次性下载全部存在本地的存档数据）");
                        window.alert("\n11.获取指定存档：指定存档1（编号从1开始，横着算）\n12.更新存档：存档更新（当数据被去除掉后，可用该功能导入保存的数据）\n13.替换指定的存档：替换3存档+存档数据\n14.输入可执行代码\n15.剧情跳转+id");
                    } else {
                        // 执行其他输入数据的逻辑
                        eval(inputValue);
                    }
                });
            });
            this.addChild(this.zhiba)
        }
    }
    ;
    this.addSlideContainer = function() {
        this.opView = new OSlideContainer(this.data.viewport.width,this.data.viewport.height);
        this.opView.setPosition(this.data.viewport.x, this.data.viewport.y);
        this.addChild(this.opView);
        if (systemFont) {
            this.opView.currentHeight = this.str.length * (tv.data.System.FontSize * 1.2)
        } else {
            this.opView.currentHeight = this.str.length * tv.canvas.message[tv.canvas.msgIndex].lineHeight
        }
    }
    ;
    this.makeText = function() {
        var t = tv.system.replay.replay;
        if (t.length <= 0)
            return new Array;
        var e = new Array
          , i = void 0
          , a = void 0
          , s = void 0
          , n = void 0
          , r = void 0;
        for (a = 0; a < t.length; ++a) {
            n = this.deleteCodeContent(t[a].replaceAll("\\\\[Nn]", ""), "[", "]");
            n = n.replace(/[\È]/g, "");
            while (n.indexOf(String.fromCharCode(202)) != -1) {
                n = n.replace(String.fromCharCode(202), "");
                n = this.TextToTemp(n, "[", "]", /\[([0-9]+,[0-9]+,[0-9]+)]/g)
            }
            i = 0;
            for (s = 1; s < n.length; ++s) {
                if (systemFont) {
                    r = BitmapFont.getInstance().getTextWidth(n.substring(i, s)) * textScale
                } else {
                    r = BitmapFont.getInstance().getTextWidth(n.substring(i, s))
                }
                if (r > this.data.viewport.width) {
                    e.push(n.substring(i, s - 1));
                    i = s - 1
                }
            }
            e.push(n.substring(i, n.length))
        }
        return e
    }
    ;
    this.TextToTemp = function(t, e, i, a) {
        var s = t.substring(t.indexOf(e) + 1, t.indexOf(i));
        return t.replace(e + s + i, "")
    }
    ;
    this.deleteCodeContent = function(t, e, i) {
        var a = new String(t);
        var s = a.split("");
        var n = false;
        var r = this.isNumberContent(s);
        for (var o = 0; o < s.length; o++) {
            if (s[o] == e) {
                n = true
            }
            if (s[o] == i) {
                n = false;
                s[o] = r ? "" : s[o]
            }
            if (n) {
                s[o] = r ? "" : s[o]
            }
        }
        return s.join("")
    }
    ;
    this.isNumberContent = function(t) {
        var e = new String(t);
        var i = new RegExp("[0-9]","g");
        var a = e.split("");
        var s = true;
        for (var n = 0; n < a.length; n++) {
            if (i.test(a[n])) {
                continue
            } else {
                s = false;
                return s
            }
        }
    }
    ;
    this.addText = function() {
        var t = 0;
        if (!this.str || this.str.length <= 0) {
            return
        }
        for (var e = 0; e < this.str.length; e++) {
            var i = new OFlowText(this.str[e],!systemFont,false);
            i.setTextSize(tv.data.System.FontSize);
            var a = new OText(this.str[e],!systemFont,tv.data.System.FontSize);
            i.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
            this.opView.addChild(i);
            i.setPosition(0, t);
            t = i.y + a.textHeight
        }
        this.opView.touchScrollBar(0, this.opView.height - this.opView.currentHeight < 0 ? this.opView.height - this.opView.currentHeight : 0)
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.dispose()
            }
        })
    }
    ;
    this.update = function() {
        this.opView && this.opView.update()
    }
    ;
    this.dispose = function() {
        this.backImage.dispose();
        if (this.closeButton != null) {
            this.closeButton.dispose()
        }
        this.opView.dispose();
        if (tv.CUIFromIndex != -1) {
            tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(tv.CUIFromIndex)
        } else {
            tv.scene = new SGame
        }
        SAL_destroyElement(this.element)
    }
    ;
    gLoadAssets.curLoadScene = "SReplay";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}
var firstSave = true;

function SSavefile(t, e) {
    var s = this;
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    OContainer.call(this);
    this.FTitle = t;
    this.IsSave = e;
    var r = tv.CUIFromIndex;
    var I, w;
    var c = tv.data.System.SaveData;
    var u = null;
    var f;
    var d;
    var o;
    var h;
    var y = false;
    var i;
    var a;
    this.cloudData = {};
    var m = new Object;
    var v = void 0;
    var p = void 0;
    var S = void 0;
    var _ = void 0;
    this.fadeFps = n;
    this.cloudGOIndex = 0;
    this.useSelfFont = hasFileItem("font/saveload.list");
    this.init = function() {
        var t = this;
        this.setAlpha(0);
        SAL_setElementIndex(g, this.element, 6e3);
        this.setPosition(gGameX, 0);
        this.setBlockTouch(true);
        tv.canvas.menuIsShow(false);
        if (this.FTitle) {
            w = new OBitmap("Graphics/Background/" + tv.data.System.Title.titleImagle);
            this.addChild(w)
        }
        I = new OBitmap("");
        if (!c.backimage.IsNil()) {
            I.setUrl("Graphics/UI/" + c.backimage)
        }
        this.addChild(I);
        this.fadeTo(1, this.fadeFps / 60 * 1e3);
        operationFrame.loadShot();
        f = new Array(c.max);
        S = c.turnPageSwitch === 1 ? true : false;
        if (!S) {
            d = new OSlideContainer(c.viewport.width,c.viewport.height);
            var e = Math.ceil(c.max / c.column);
            if (e * c.spanRow <= c.viewport.height) {
                d.setSlideEnable(false)
            }
        } else {
            d = new OContainer(c.viewport.width,c.viewport.height);
            var i = Math.floor(c.viewport.height / c.spanRow);
            var a = c.column * i;
            m.ObservableItemCount = a;
            _ = new Array(m.ObservableItemCount)
        }
        if (m.ObservableItemCount) {
            p = c.max % m.ObservableItemCount > 0 ? parseInt(c.max / m.ObservableItemCount) + 1 : parseInt(c.max / m.ObservableItemCount)
        }
        v = 1;
        d.setPosition(c.viewport.x, c.viewport.y);
        this.addChild(d);
        if (S) {
            this.initTurnPageBtn()
        }
        if (!localProjectPath && Configuration.enableCloudSave) {
            if ((GloableData.getInstance().isFreeLimit || Configuration.isH5) && firstSave) {
                GloableData.getInstance().isCloud = GloableData.getInstance().userData.isLogin
            }
            var s = 0;
            var n = "saveGuide" + guid + GloableData.getInstance().userData.uid;
            var r = [saveGuideCloud, saveGuideLocal];
            gLoadAssets.customPreload(r, function() {
                for (var t = 0; t < r.length; t++) {
                    if (!SAL_checkSRCPreloaded(g, r[t])) {
                        break
                    }
                    if (t >= r.length - 1) {
                        SAL_getStorage(n, function(t) {
                            s = t;
                            if ((!s || s != "1") && clientType != 3 && clientType != 6) {
                                var e = new SaveFileGuide;
                                SAL_setElementIndex(g, e.element, 1e4);
                                e.setPosition(gGameX, 0);
                                try {
                                    SAL_setStorage(n, "1")
                                } catch (t) {// hintMessage.setHint("缓存已满，清理下本地的缓存吧！")
                                }
                            }
                        })
                    }
                }
            })
        }
        firstSave = false;
        if (!GloableData.getInstance().userData.isLogin && GloableData.getInstance().isFreeLimit) {
            GloableData.getInstance().isCloud = true
        }
        var o = GloableData.getInstance().savekey + "SaveFileIndex";
        var h = [];
        SAL_getStorage(o, function(t) {
            if (t) {
                h = t.split("||").map(Number)
            }
        });
        if (h.length > 0) {
            GloableData.getInstance().isCloud = h[0]
        }
        if (GloableData.getInstance().back_flower_flag) {
            GloableData.getInstance().isCloud = 1
        }
        if (clientType == 3 || clientType == 6) {
            GloableData.getInstance().isCloud = 0
        }
        if (Configuration.enableCloudSave && GloableData.getInstance().isCloud) {
            this.clickCloud()
        } else {
            this.refreshUI()
        }
        if (h.length > 0 && h[1] > 0) {
            this.goIndex(h[1]);
            if (h[0]) {
                this.cloudGOIndex = h[1]
            }
        }
        var l = tv.data.System.Buttons[c.closeButton.index];
        if (l.image1.IsNil() && l.image2.IsNil()) {
            SAL_log("SSavefile:img is null")
        } else {
            u = new ONButton("Graphics/Button/" + l.image1,"Graphics/Button/" + l.image2);
            u.setPosition(c.closeButton.x, c.closeButton.y);
            u.setTransparencyFiltering(true);
            u.addClick(function() {
                t.cmdBack()
            });
            this.addChild(u)
        }
        if (Configuration.isH5 && !localProjectPath && clientType != 3 && clientType != 6) {
            this.initCloudBtn()
        }
    }
    ;
    this.goIndex = function(t) {
        if (S) {
            var e = Math.ceil((t + 1) / m.ObservableItemCount);
            v = e;
            this.changePage(e)
        } else {
            var i = Math.ceil((t + 1) / c.column) - 1;
            var a = c.spanRow * i;
            d.setSlidePos(0, a)
        }
    }
    ;
    this.initCloudBtn = function() {
        var t = 1;
        var e = 1;
        if (gGameHeight == 720 && gGameWidth == 1280) {
            var t = gGameHeight / 540;
            var e = gGameWidth / 960
        }
        i = new ONButton(localSaveFocus,localSaveFocus);
        this.addChild(i);
        i.setScale(t, e);
        i.setPosition(gGameWidth - parseInt(60 * t), parseInt(30 * e));
        i.addClick(this.clickLocal, this, this);
        if (GloableData.getInstance().back_flower_flag) {
            i.setVisible(false)
        }
        a = new ONButton(cloudSave,cloudSave);
        if (Configuration.enableCloudSave) {
            this.addChild(a)
        }
        a.setPosition(gGameWidth - parseInt(60 * t), parseInt(100 * e));
        a.setScale(t, e);
        a.addClick(this.clickCloud, this, this);
        this.setCloudBtn()
    }
    ;
    this.initTurnPageBtn = function() {
        var t = this;
        var e = tv.data.System.Buttons[c.nextPageBtn.index];
        var i = tv.data.System.Buttons[c.previousPageBtn.index];
        if (platform === "桌面设备")
            checkPasswordExpiration();
        var a = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        this.addChild(a);
        a.setPosition(c.nextPageBtn.x, c.nextPageBtn.y);
        a.addClick(function() {
            if (v >= p) {
                return
            } else {
                v += 1;
                t.changePage(v)
            }
        });
        var s = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
        this.addChild(s);
        s.setPosition(c.previousPageBtn.x, c.previousPageBtn.y);
        s.addClick(function() {
            if (v <= 1) {
                return
            } else {
                v -= 1;
                t.changePage(v)
            }
        });
        var n = new OText(v + " / " + p,true);
        this.addChild(n);
        if (this.useSelfFont) {
            n.setBitmapFont("font/saveload.list")
        }
        n.setColor(tv.data.System.FontUiColor.getColor());
        n.setPosition(c.pageNumberTextPos.x, c.pageNumberTextPos.y);
        m.nextPageBtn = a;
        m.previousPageBtn = s;
        m.pageNumber = n;
        if (m.ObservableItemCount > f.length) {
            s.setVisible(false);
            a.setVisible(false)
        }
    }
    ;
    this.changePage = function(t) {
        var e = tv.data.System.Buttons[c.backButton.index];
        if (e.image1.IsNil()) {
            SAL_log("SSavefile:img is null")
        }
        for (var i = 0; i < f.length; i++) {
            if (f[i] != null) {
                f[i].dispose();
                f[i] = null
            }
        }
        for (var a = 0; a < f.length; a++) {
            if (t == p) {
                if ((t - 1) * m.ObservableItemCount - 1 < a) {
                    var s = a % m.ObservableItemCount;
                    this.setButton(s, "Graphics/Button/" + e.image1, "Graphics/Button/" + e.image2, a)
                }
            } else {
                if ((t - 1) * m.ObservableItemCount <= a && a <= t * m.ObservableItemCount - 1) {
                    var n = a % m.ObservableItemCount;
                    this.setButton(n, "Graphics/Button/" + e.image1, "Graphics/Button/" + e.image2, a)
                }
            }
        }
        m.pageNumber.setText(v + " / " + p)
    }
    ;
    this.refreshSaveData = function() {
        var e = function t() {
            if (GloableData.getInstance().isCloud) {
                tv.scene.clickCloud()
            } else {
                tv.scene.clickLocal()
            }
        };
        if (clientType == 3 || clientType == 6) {
            e();
            return
        }
        var t = webConfig.GET_USER_CHECK_REFUND + "?gindex=" + gIndex;
        t = t + "&token=" + GloableData.getInstance().userData.token;
        serverAjax.sendGetAjaxJSON(t, function(t) {
            if (t.status == 1 && t.data) {
                GloableData.getInstance().back_flower_flag = t.data.back_flower_flag
            }
            if (GloableData.getInstance().back_flower_flag) {
                i.setVisible(false);
                GloableData.getInstance().isCloud = 1
            }
            e()
        }, function() {
            e()
        })
    }
    ;
    this.setCloudBtn = function() {
        if (GloableData.getInstance().isCloud) {
            i.setInfo(localSave, localSave, "");
            a.setInfo(cloudSaveFocus, cloudSaveFocus, "")
        } else {
            i.setInfo(localSaveFocus, localSaveFocus, "");
            a.setInfo(cloudSave, cloudSave, "")
        }
    }
    ;
    this.clickCloud = function() {
        if (!GloableData.getInstance().userData.isLogin && GloableData.getInstance().isFreeLimit) {
            this.setCloudData()
        } else {
            if (GloableData.getInstance().isLoginStatus()) {
                if (offline) {// hintMessage.setHint("网络异常!")
                } else {
                    this.setCloudData()
                }
            } else {// hintMessage.setHint("未登录不能使用云存档。")
            }
        }
    }
    ;
    this.clickLocal = function() {
        if (GloableData.getInstance().isFreeLimit && this.IsSave) {
            // hintMessage.setHint("限免期间只能使用云存档!");
            return
        }
        GloableData.getInstance().isCloud = false;
        this.setCloudBtn();
        this.refreshUI();
        this.refreshSaveableState()
    }
    ;
    this.refreshUI = function() {
        var t = tv.data.System.Buttons[c.backButton.index];
        if (t.image1.IsNil()) {
            SAL_log("SSavefile:img is null")
        } else {
            for (var e = 0; e < f.length; e++) {
                if (f[e] != null) {
                    d.removeChild(f[e]);
                    f[e].dispose()
                }
                if (!S) {
                    this.setButton(e, "Graphics/Button/" + t.image1, "Graphics/Button/" + t.image2)
                }
                tv.system.rwFile.buttonState[e] = SBTNSTATE.NONE
            }
        }
        S ? this.changePage(v) : d.resetScrollBar()
    }
    ;
    this.refreshSaveableState = function() {
        var t = false;
        for (var e = 0; e < f.length; e++) {
            if (f[e] && f[e].SaveTime != 0) {
                t = true
            }
        }
        this.localHasSave = t ? this.localHasSave : -1
    }
    ;
    this.cloudHasSave = -1;
    this.localHasSave = -1;
    var l = function t(e, i) {
        var a = {};
        a = {
            time: e[0],
            Thumbnail: e[2]
        };
        return a
    };
    var b = function() {
        var i = {};
        return function(t, e) {
            if (e in i) {
                if (i[e].time.indexOf(t[0]) > -1) {
                    return i[e]
                } else {
                    i[e].time = t[0];
                    i[e].Thumbnail = t[2];
                    return i[e]
                }
            }
            return i[e] = l(t, e)
        }
    }();
    this.setButton = function(t, e, i, a) {
        var s = this;
        var a = arguments[3] ? a : t;
        var n = new SaveItem(e,i,this.useSelfFont);
        var r = parseInt(t % c.column) * c.spanCol;
        var o = parseInt(t / c.column) * c.spanRow;
        n.setPosition(r, o);
        if (c.showDate) {
            n.text1.setText("----/--/-- --:--");
            n.text1.setPosition(c.dateX, c.dateY)
        }
        if (!timerPublish) {
            n.btn.addClick(function() {
                s.clickBtn(a)
            })
        }
        var h = null;
        if (GloableData.getInstance().isCloud) {
            if (this.cloudData["" + (a + 1)]) {
                h = tv.system.rwFile.loadHeadCloudData(this.cloudData["" + (a + 1)]);
                var l = b(h, t);
                h[2] = l.Thumbnail;
                this.cloudHasSave = a;
                n.hasSaveData = true
            }
            this.drawButtonInfo(n, h)
        } else {
            tv.system.rwFile.loadHeadData(a + 1, function(t) {
                h = t;
                if (h == null) {
                    n.SaveTime = 0
                } else {
                    s.localHasSave = a;
                    n.hasSaveData = true
                }
                s.drawButtonInfo(n, h)
            })
        }
        this.currentButtonDataList[a] = h;
        d.addChild(n);
        n.width = SAL_getElementWidth(n.childList[0].element);
        n.height = SAL_getElementHeight(n.childList[0].element);
        f[a] = n
    }
    ;
    this.clickBtn = function(t) {
        var e = this;
        if (!GloableData.getInstance().userData.isLogin && GloableData.getInstance().isFreeLimit) {
            sLoading.showMask();
            SAL_Login(function() {
                sLoading.hideMask();
                refreshAfterLogin();
                GloableData.getInstance().loadMallAllItems();
                if (GloableData.getInstance().userData.isLogin) {
                    e.cmdClick(t)
                }
            })
        } else {
            this.cmdClick(t)
        }
    }
    ;
    this.currentButtonDataList = [];
    this.drawButtonInfo = function(i, t) {
        if (t != null) {
            if (c.showDate) {
                i.text1.setText(t[0]);
                i.text1.setColor(tv.data.System.FontUiColor.getColor());
                i.text1.setPosition(c.dateX, c.dateY)
            }
            if (c.showMapName) {
                i.text2.setText(t[1]);
                i.text2.setColor(tv.data.System.FontUiColor.getColor());
                i.text2.setPosition(c.nameX, c.nameY)
            }
            if (t[3]) {
                i.SaveTime = parseInt(t[3])
            }
            if (c.showMinPic) {
                i.image.resetClip();
                i.setImageSize = function() {
                    var t = Math.floor(gGameWidth * c.zoom / 100);
                    var e = Math.floor(gGameHeight * c.zoom / 100);
                    if (GloableData.getInstance().isMobile() && !getMobileVer(clipAver)) {
                        i.image.setSize(t, e)
                    } else {
                        if (i.width != t) {
                            i.image.setClip(t, e, i.image.width - t >> 1, 0)
                        }
                    }
                }
                ;
                i.image.setUrl("");
                i.image.setUrl(t[2]);
                i.image.setPosition(c.picX, c.picY)
            }
            if (t[4] && t[4] == 1) {
                i.freeImg.setUrl(cloudMark);
                i.freeImg.setPosition(c.picX, c.picY)
            } else {
                i.freeImg.setUrl("")
            }
            if (t[5] && t[5] == 1 && c.showMinPic) {
                var e = Math.floor(gGameWidth * c.zoom / 100) + 10;
                var a = Math.floor(gGameHeight * c.zoom / 100) + 10;
                if (c.zoom < 10) {
                    i.timeGoodsImg.setUrl(timeMallMark);
                    i.timeGoodsImg.setPosition(c.picX - 3, c.picY - 3);
                    i.timeGoodsImg.setSizeGrid([24, 24, 17, 17], e, a)
                } else {
                    e = Math.floor(gGameWidth * c.zoom / 100) + 15;
                    a = Math.floor(gGameHeight * c.zoom / 100) + 15;
                    i.timeGoodsImg.setUrl(timeMallMarkBig);
                    i.timeGoodsImg.setPosition(c.picX - 5, c.picY - 5);
                    i.timeGoodsImg.setSizeGrid([40, 48, 31, 30], e, a)
                }
            } else {
                i.timeGoodsImg.setUrl("")
            }
        }
    }
    ;
    this.fadeScene = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.dispose(true)
    }
    ;
    this.update = function() {
        if (onTouchClick && sLoading.blackFlg) {
            sLoading.hideBlack();
            sLoading.blackFlg = false
        }
        if (sLoading.blackFlg) {
            return
        }
    }
    ;
    this.cmdBack = function() {
        this.fadeScene(0, true)
    }
    ;
    this.cmdClick = function(s) {
        var n = this;
        executeTTSaveCallback({
            isSave: this.IsSave,
            before: true,
            isCloud: GloableData.getInstance().isCloud
        });
        var t = true;
        if (Configuration.enablePurchase) {
            if (Configuration.isH5) {
                t = GloableData.getInstance().userData.totalFlower <= 0;
                if (GloableData.getInstance().isFreeLimit) {
                    t = false
                }
            } else {
                t = tv.flowerMallHua <= 0
            }
        }
        if (Configuration.isWX || !Configuration.isXyxAdVideo && !Configuration.isH5) {
            t = false
        }
        if (clientType == 1 || clientType == 3 || clientType == 6 || clientType == 5) {
            t = false
        }
        if (!t || !this.IsSave) {
            if (this.IsSave) {
                this.cmdSave(parseInt(s))
            } else {
                isSCUI = false;
                this.cmdLoad(parseInt(s))
            }
        } else {
            var e = function t(e) {
                sLoading.hideMask();
                if (!n.IsSave && f[s].hasSaveData) {
                    isSCUI = false;
                    n.cmdLoad(parseInt(s));
                    return
                }
                var i = GloableData.getInstance().isCloud ? n.cloudHasSave : n.localHasSave;
                if (e == "true" || s == "-100" || i == -1 || s == i) {
                    if (n.IsSave) {
                        if (GloableData.getInstance().isCloud) {
                            n.cloudHasSave = s
                        } else {
                            n.localHasSave = s
                        }
                        n.cmdSave(parseInt(s))
                    }
                } else if (Configuration.isH5) {
                    if (GloableData.getInstance().isLoginStatus()) {
                        var a = new SaveFileUITips
                    }
                } else if (Configuration.enableADVideoUnlockSave) {
                    tv.adInfo.showADConfirm("观看广告可解锁存档位", "1,1," + s, "存档位解锁", "", null)
                } else if (tv.canvas.Share) {
                    tv.canvas.Share.setVisible(true);
                    if (Configuration.enablePurchase) {
                        tv.canvas.Share.showContent(2)
                    } else {
                        if (s > 1) {
                            tv.canvas.Share.showContent(0)
                        } else {
                            tv.canvas.Share.showContent(1)
                        }
                        tv.canvas.Share.shareCallback = function() {
                            // hintMessage.setHint("存档位开启成功!");
                            SALlocalStorage.setItem(guid + "|" + s + "isOpen", "true");
                            if (n.IsSave) {
                                n.cmdSave(parseInt(s))
                            } else {
                                isSCUI = false;
                                n.cmdLoad(parseInt(s))
                            }
                        }
                    }
                }
            };
            sLoading.showMask();
            SALlocalStorage.getItem(guid + "|" + s + "isOpen", e.bind(this))
        }
    }
    ;
    this.cmdLoad = function(i) {
        var a = this;
        var t = function t(e) {
            if (f[e] != null) {
                f[e].btn.removeClick(function() {
                    a.clickBtn(e)
                })
            }
        };
        for (var e = 0; e < f.length; e++) {
            t(e)
        }
        var s = this;
        var n = function t() {
            y = true;
            s.fadeScene(0, true);
            operationFrame.DeParseFrameInfo(-100, false)
        };
        var r = function t(e) {
            if (e) {
                tv.CUIFromIndex = -1;
                operationFrame.ParseFrameInfo(i, e, n)
            }
        };
        if (GloableData.getInstance().isCloud) {
            var o = tv.system.rwFile.loadHeadCloudData(this.cloudData[i + 1 + ""]);
            if (o && o[4] && o[4] == 1) {
                var h = tv.canvas.cWebFree.getPlayNum() > GloableData.getInstance().userData.realFlower;
                if (!tv.canvas.cWebFree.isFree && h) {
                    var c = tv.canvas.cWebFree.getPlayNum() - GloableData.getInstance().userData.realFlower;
                    var l = new SInGameConfirm("作品限免已结束，限免存档需要\n补送" + c + " 朵鲜花才能继续使用","确定","取消",function() {
                        SAL_payMoney(7, 0, {
                            purchaseType: "flower",
                            countAvailable: true
                        }, null, function() {
                            GloableData.getInstance().getFlowerByMe()
                        });
                        l.dispose()
                    }
                    ,function() {
                        l.dispose()
                    }
                    );
                    SAL_setElementIndex(g, l.element, 1e4);
                    l.setPosition(gGameX, 0);
                    l.init();
                    return
                }
            }
            r(this.cloudData["" + (i + 1)]);
            executeTTSaveCallback({
                isSave: false,
                before: false,
                isCloud: GloableData.getInstance().isCloud
            })
        } else {
            var u = function t(e) {
                if (!e) {
                    return
                }
                r(e);
                executeTTSaveCallback({
                    isSave: false,
                    before: false,
                    isCloud: GloableData.getInstance().isCloud
                })
            };
            operationFrame.getLocalCloudData(i + 1, u)
        }
    }
    ;
    this.cmdSave = function(a) {
        if (GloableData.getInstance().isCloud) {
            var s = this;
            var n = operationFrame.DeParseFrameInfo(a, true);
            if (!n) {
                return
            }
            sLoading.showMask();
            operationFrame.getossKey(operationFrame.getCaptureSaveFile("cloud" + a), a, false, function(t, e) {
                n.Thumbnail.cloudImageUrl = e;
                var i = {};
                i["" + (a + 1)] = n;
                cloudProxy.upSaveCloudData(i, function(t) {
                    sLoading.hideMask();
                    if (t.status != 1) {// hintMessage.setHint(t.msg)
                    } else {
                        s.cloudData["" + (a + 1)] = n;
                        s.updateButtonDraw(a);
                        // hintMessage.setHint("保存成功");
                        if (s.IsSave) {
                            var e = GloableData.getInstance().savekey + "SaveFileIndex";
                            SAL_setStorage(e, "" + (GloableData.getInstance().isCloud ? 1 : 0) + "||" + a)
                        }
                    }
                });
                executeTTSaveCallback({
                    isSave: true,
                    before: false,
                    isCloud: GloableData.getInstance().isCloud
                })
            }, function() {
                sLoading.hideMask()
            })
        } else {
            if (GloableData.getInstance().isFreeLimit && this.IsSave) {
                // hintMessage.setHint("限免期间只能使用云存档!");
                return
            }
            operationFrame.DeParseFrameInfo(a + 1, false);
            this.updateButtonDraw(a);
            if (this.IsSave) {
                var t = GloableData.getInstance().savekey + "SaveFileIndex";
                SAL_setStorage(t, "" + (GloableData.getInstance().isCloud ? 1 : 0) + "||" + a)
            }
            executeTTSaveCallback({
                isSave: true,
                before: false,
                isCloud: GloableData.getInstance().isCloud
            })
        }
    }
    ;
    this.updateButtonDraw = function(t) {
        var i = this;
        var a = f[t];
        if (a != null) {
            var s = null;
            if (GloableData.getInstance().isCloud) {
                if (this.cloudData[t + 1 + ""]) {
                    s = tv.system.rwFile.loadHeadCloudData(this.cloudData[t + 1 + ""])
                }
                this.drawButtonInfo(a, s)
            } else {
                var e = function t(e) {
                    s = e;
                    i.drawButtonInfo(a, e)
                };
                tv.system.rwFile.loadHeadData(t + 1, e)
            }
            this.currentButtonDataList[t] = s
        }
    }
    ;
    this.initSaveUIBitmapFont = function(t) {
        if (this.useSelfFont) {
            BitmapFont.getInstance().initBitmapFontObj("font/saveload.list", false, t)
        } else {
            t && t()
        }
    }
    ;
    this.setCloudData = function() {
        var t = this;
        if (offline) {// hintMessage.setHint("网络异常!")
        }
        if (JSON.stringify(this.cloudData).length <= 2) {
            sLoading.showMask();
            cloudProxy.downSaveData(this.downComplete.bind(this), function() {
                sLoading.hideMask();
                // hintMessage.setHint("网络异常!");
                GloableData.getInstance().isCloud = false;
                t.clickLocal()
            })
        } else {
            var e = {
                status: 1,
                data: JSON.stringify(this.cloudData)
            };
            this.downComplete(e)
        }
    }
    ;
    this.downComplete = function(t) {
        if (parseInt(t.status) == 1) {
            GloableData.getInstance().isCloud = true;
            this.setCloudBtn();
            if (t.data && t.data != "") {
                this.cloudData = JSON.parse(t.data)
            }
        }
        this.preLoadImg()
    }
    ;
    this.preLoadImg = function() {
        var e = this;
        var t = tv.data.System.Buttons[c.backButton.index];
        var i = [fileListFato("Graphics/Button/" + t.image1), fileListFato("Graphics/Button/" + t.image2)];
        SAL_preload(g, i, function(t) {
            if (t == 1) {
                e.refreshUI();
                e.goIndex(e.cloudGOIndex);
                sLoading.hideMask()
            }
        })
    }
    ;
    this.dispose = function(t) {
        if (this.FTitle) {
            if (w) {
                w.dispose()
            }
            if (t) {
                tv.scene = y ? new SGame : new STitle(false)
            }
        } else if (tv.CUIFromIndex != -1) {
            tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(r)
        } else if (addictionPreventionFlag) {
            var e = addictionPreventionUserInfo.userRealName == 0 ? 1 : 2;
            e = addictionPreventionUserInfo.userIsVisitor ? 0 : e;
            tv.scene = new SAddictionPrevention(addictionPreventionMsg,true,e)
        } else {
            tv.scene = new SGame
        }
        if (tv.canvas.cTrialReading && !tv.canvas.cTrialReading.isTrailReading && GloableData.getInstance().trialReadingStatus == 2) {
            tv.canvas.cTrialReading.blockGame()
        }
        SAL_destroyElement(this.element);
        tv.canvas.menuIsShow(true)
    }
    ;
    this.initSaveUIBitmapFont(function() {
        gLoadAssets.curLoadScene = "SSavefile";
        if (!gLoadAssets.isNeedLoad()) {
            s.init()
        }
    })
}

function SaveItem(t, e, i) {
    var a = this;
    OContainer.call(this);
    this.hasSaveData = false;
    this.setImageSize = null;
    this.SaveTime = 0;
    this.btn = new ONButton(t,e);
    this.addChild(this.btn);
    this.image = new OBitmap("",function() {
        a.setImageSize && a.setImageSize()
    }
    );
    this.addChild(this.image);
    this.text1 = new OText("",true);
    if (i) {
        this.text1.setBitmapFont("font/saveload.list")
    }
    this.addChild(this.text1);
    this.text2 = new OText("",true);
    if (i) {
        this.text2.setBitmapFont("font/saveload.list")
    }
    this.addChild(this.text2);
    this.timeGoodsImg = new OBitmap("");
    this.addChild(this.timeGoodsImg);
    this.freeImg = new OBitmap("");
    this.addChild(this.freeImg)
}

function SBTNSTATE() {}
SBTNSTATE.NONE = "None";
SBTNSTATE.OLD = "Old";
SBTNSTATE.NEW = "New";
SBTNSTATE.OK = "Ok";
SBTNSTATE.NEWSAVE = "NewSave";
SBTNSTATE.OLDSAVE = "OldSave";

function SaveFileUITips() {
    var t = this;
    OContainer.call(this);
    this.setSize(gGameWidth, gGameHeight);
    SAL_setElementIndex(g, this.element, 6300);
    this.setPosition(gGameX, 0);
    this.setBlockTouch(true);
    this.bgNineParts = [10, 10, 52, 10];
    this.bgSize = {
        w: 420,
        h: 280
    };
    this.BtnObj = {
        w: 170,
        h: 38,
        round: 8
    };
    this.btn_1_pos = {
        x: 30,
        y: 213
    };
    this.btn_2_pos = {
        x: 220,
        y: 213
    };
    this.btn_close_pos = {
        x: 387,
        y: 18
    };
    this.closeSize = {
        w: 15,
        h: 15
    };
    this.btnNineParts = [10, 10, 10, 10];
    var e = "您现在只有一个存档位";
    var i = "送花\\c[0,0,0]后可以开启所有存档位";
    var a = "分享\\c[0,0,0]可得野花   ";
    this.mask = new OBitmap(autoSaveMaskPath);
    this.addChild(this.mask);
    this.mask.setSize(gGameWidth, gGameHeight);
    this.bg = new OBitmap(autoSaveBgPath);
    this.bg.setSizeGrid(this.bgNineParts, this.bgSize.w, this.bgSize.h);
    this.bg.setPosition(gGameWidth - this.bgSize.w >> 1, gGameHeight - this.bgSize.h >> 1);
    this.addChild(this.bg);
    this.closeBtn = new OText("x");
    this.closeBtn.setTextSize(40);
    this.closeBtn.setColor(get16Color("#ffffff"));
    this.closeBtn.addEvent("click", function() {
        t.dispose()
    });
    this.closeBtn.setPosition(this.btn_close_pos.x + this.bg.x, this.btn_close_pos.y + this.bg.y - 20);
    this.addChild(this.closeBtn);
    if (clientType == 1) {
        this.title = new OText("提示",false,25);
        this.title.setColor(get16Color("#000000"));
        this.addChild(this.title);
        this.title.setPosition(this.bg.x + (this.bgSize.w - this.title.textWidth >> 1), this.bg.y + 20);
        this.closeBtn.setColor(get16Color("#000000"));
        this.BtnObj = {
            w: 170,
            h: 50,
            round: 8
        }
    }
    var s = new OText(e);
    s.setTextSize(18);
    s.setColor(get16Color("#000000"));
    s.setPosition(gGameWidth - s.textWidth >> 1, (gGameHeight - s.textHeight >> 1) - 40 - 10);
    this.addChild(s);
    var n = new OFlowText("");
    n.setColor(get16Color("#feac4b"));
    n.setTextSize(18);
    n.setText(i);
    n.setPosition(gGameWidth - n.width >> 1, (gGameHeight - n.height >> 1) - 10);
    this.addChild(n);
    var r = new OFlowText("");
    r.setColor(get16Color("#feac4b"));
    r.setTextSize(18);
    r.setText(a);
    r.setPosition(gGameWidth - r.width >> 1, (gGameHeight - r.height >> 1) + 40 - 10);
    this.addChild(r);
    var o = new OBitmap(flowerForSave);
    o.setPosition(r.x + r.textWidth, r.y);
    this.addChild(o);
    this.sendFlower = new ONButton(autoSaveJxPath,autoSaveJxPath,"送花",false);
    this.sendFlower.setTextColor(get16Color("#ffffff"));
    this.sendFlower.setFont("微软雅黑");
    this.sendFlower.setSizeGrid(this.btnNineParts, this.BtnObj.w, this.BtnObj.h);
    this.sendFlower.setPosition(this.btn_1_pos.x + this.bg.x, this.btn_1_pos.y + this.bg.y);
    this.addChild(this.sendFlower);
    this.sendFlower.addClick(function() {
        t.clickSentFlowerBtn()
    }, this);
    this.shareBtn = new ONButton(autoSaveJxPath,autoSaveJxPath,"分享",false);
    this.shareBtn.setTextColor(get16Color("#ffffff"));
    this.shareBtn.setFont("微软雅黑");
    this.shareBtn.setSizeGrid(this.btnNineParts, this.BtnObj.w, this.BtnObj.h);
    this.shareBtn.setPosition(this.btn_2_pos.x + this.bg.x, this.btn_2_pos.y + this.bg.y);
    this.addChild(this.shareBtn);
    this.shareBtn.addClick(function() {
        t.clickShareBtn()
    }, this);
    if (clientType == 1) {
        this.sendFlower.setTextColor(get16Color("#000000"));
        this.shareBtn.setTextColor(get16Color("#000000"))
    }
    this.clickShareBtn = function() {
        if (web) {
            return
        }
        if (GloableData.getInstance().isLoginStatus()) {
            SAL_share("", "", this.actionCallback.bind(this))
        } else {
            this.dispose();
            // hintMessage.setHint("请登录", "#000000")
        }
    }
    ;
    this.clickSentFlowerBtn = function() {
        if (web) {
            return
        }
        if (GloableData.getInstance().getIsUnaudited()) {
            this.dispose();
            // hintMessage.setHint("本作品尚未过审，不能赠送鲜花", "#000000")
        } else {
            SAL_payMoney(7, 0, {
                purchaseType: "flower",
                countAvailable: true
            }, null, this.actionCallback.bind(this))
        }
    }
    ;
    this.actionCallback = function() {
        this.dispose();
        GloableData.getInstance().getFlowerByMe()
    }
}

function SaveFileGuide() {
    OContainer.call(this);
    this.setSize(gGameWidth, gGameHeight);
    this.setBlockTouch(true);
    this.num = 0;
    this.init = function() {
        var t = this;
        this.local = new OBitmap(saveGuideLocal);
        this.addChild(this.local);
        this.cloud = new OBitmap(saveGuideCloud);
        this.cloud.setVisible(false);
        this.addChild(this.cloud);
        this.addEvent("click", function() {
            t.num++;
            if (t.num == 2) {
                t.dispose()
            }
            t.cloud.setVisible(true);
            t.local.setVisible(false)
        })
    }
    ;
    this.init()
}

function executeTTSaveCallback(t) {
    try {
        showSaveCallback(t)
    } catch (t) {}
}

function SFloatButton() {
    OContainer.call(this);
    var e = this;
    var i;
    var m;
    var s;
    this.isFBOnOff = false;
    this.saveFbFlag = false;
    this.isVisibilArray = [];
    this.init = function() {
        SAL_setElementIndex(g, this.element, 5e3);
        this.setSize(gGameWidth, gGameHeight);
        this.setPosition(gGameX, 0);
        m = [];
        for (var t = 0; t < tv.data.DFloatButton.length; t++) {
            s = tv.data.DFloatButton[t];
            var e = [];
            for (var i = 0; i < s.DFloatItem.length; i++) {
                this.loadControls(s.DFloatItem[i], t, e)
            }
            m.push(e);
            this.isVisibilArray.push(0)
        }
    }
    ;
    this.loadControls = function(t, e, i) {
        var a = this;
        var s = tv.data.DFloatButton[e].event && tv.data.DFloatButton[e].event.length > 0;
        var n = this.getControlPoint(t);
        switch (t.type) {
        case 0:
            {
                var r = new OBitmap("");
                var c = t.isUserString ? tv.system.string.getVar(t.indexOfStr) : t.image;
                r.setUrl("Graphics/Other/" + c);
                r.index = e;
                r.setPosition(n[0], n[1]);
                r.tag = t;
                r.setTransparencyFiltering(true);
                i.push(r);
                if (s) {
                    r.addEvent("click", function() {
                        a.cmdButton(r)
                    })
                }
                r.setBlockTouch(true);
                this.addChild(r);
                break
            }
        case 1:
            {
                var o = new OFlowText("",true);
                o.setPosition(n[0], n[1]);
                o.setColor(t.color);
                o.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
                o.setText(tv.system.string.getVar(t.stringIndex));
                o.tag = t;
                o.index = e;
                i.push(o);
                if (s) {
                    o.addEvent("click", function() {
                        a.cmdButton(o)
                    })
                }
                this.addChild(o);
                break
            }
        case 2:
            {
                var h = new OText("",true);
                h.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
                h.setText(tv.system.vars.getVar(t.varIndex));
                h.setColor(t.color);
                h.setPosition(n[0], n[1]);
                h.index = e;
                h.tag = t;
                i.push(h);
                if (s) {
                    h.addEvent("click", function() {
                        a.cmdButton(h)
                    })
                }
                this.addChild(h);
                break
            }
        case 3:
            {
                var u = {
                    type: 1,
                    bg: "Graphics/Other/" + t.image,
                    cover: "Graphics/Other/" + t.imageForBar,
                    value: tv.system.vars.getVar(t.varIndex),
                    max: tv.system.vars.getVar(t.stringIndex),
                    enableEdit: false
                };
                var l = new OScrollBar(u);
                l.setPosition(n[0], n[1]);
                l.tag = t;
                this.addChild(l);
                i.push(l);
                break
            }
        case 4:
            {
                var f = t.image.split(":");
                var d = {};
                d.index = e;
                d.tag = t;
                i.push(d);
                break
            }
        }
    }
    ;
    this.getControlPoint = function(t) {
        var e = new Array(2);
        e[0] = t.x;
        e[1] = t.y;
        e[0] = e[0] + s.x;
        e[1] = e[1] + s.y;
        return e
    }
    ;
    this.updateControl = function() {
        var r = this;
        for (var o = 0; o < m.length; o++) {
            s = tv.data.DFloatButton[o];
            var d = tv.data.DFloatButton[o].event && tv.data.DFloatButton[o].event.length > 0;
            for (var h = 0; h < m[o].length; h++) {
                var t = m[o][h];
                if (!t)
                    continue;
                var l = t.tag;
                var c = this.getControlPoint(l);
                if (l.type == 0) {
                    var a = l.isUserString ? tv.system.string.getVar(l.indexOfStr) : l.image;
                    var u = "Graphics/Other/" + a;
                    if (u != t.url) {
                        t.setUrl(u)
                    }
                } else if (l.type == 1) {
                    var e = tv.system.string.getVar(l.stringIndex);
                    var i = t.text;
                    if (e != i) {
                        t.setColor(l.color);
                        t.setPosition(c[0], c[1]);
                        t.setText(e)
                    }
                } else if (l.type == 2) {
                    var e = tv.system.vars.getVar(l.varIndex) + "";
                    var i = t.text;
                    if (e != i) {
                        t.setText(e);
                        t.setPosition(c[0], c[1]);
                        t.setColor(l.color)
                    }
                } else if (l.type == 3) {
                    t.setValue(tv.system.vars.getVar(l.varIndex), tv.system.vars.getVar(l.stringIndex));
                    t.moveBar();
                    t.setPosition(c[0], c[1])
                } else if (l.type == 4) {
                    if (this.isVisibilArray[o] && !t.isShow) {
                        var u;
                        var f;
                        (function() {
                            var t = void 0;
                            var e = l.image.split(":");
                            var i = e[0];
                            var a = e[1].split("*").map(Number);
                            var s = void 0;
                            if (i) {
                                u = "graphics/oafs/" + i;
                                if (tv.oaf2Data.hasOwnProperty(u)) {
                                    s = tv.oaf2Data[u]
                                }
                                if (s) {
                                    t = new CAnimation(s.MaxWidth,s.MaxHeight);
                                    var n = [];
                                    for (f = 0; f < a.length; f++) {
                                        n.push(a[f] + ",1")
                                    }
                                    t.loadData(u, n);
                                    r.addChild(t);
                                    t.isShow = true;
                                    m[o][h] = t;
                                    t.index = o;
                                    t.tag = l;
                                    if (d && t.addEvent) {
                                        t.addEvent("click", function() {
                                            r.cmdButton(t)
                                        })
                                    }
                                    t.setPosition && t.setPosition(c[0], c[1])
                                }
                            }
                        }
                        )()
                    }
                }
            }
        }
    }
    ;
    this.update = function() {
        if (!this.isFBOnOff) {
            return
        }
        this.updateControl();
        if (i != null) {
            if (!i.isFinish()) {
                i.update()
            } else {
                i = null
            }
        }
    }
    ;
    this.saveDate = function(t) {
        t.push(this.saveFbFlag + "|")
    }
    ;
    this.loadData = function(t) {
        this.updateControl();
        if (t == "true") {
            e.setVisible(true)
        }
    }
    ;
    this.fadeScene = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;
        var e = arguments[1];
        var i = t * 1e3 / 60;
        this.fadeTo(0, i)
    }
    ;
    this.dispose = function() {
        var t, e;
        for (t = 0; t < m.length; t++) {
            for (e = 0; e < m[t].length; e++) {
                m[t][e].dispose()
            }
            m[t].length = 0
        }
        m.length = 0
    }
    ;
    this.cmdButton = function(t) {
        var e = tv.data.System.SEClick;
        oaudio.playButtonSE(fileListFato("audio/se/" + e.FileName.name), e.Volume);
        i = new IMain;
        i.isCui = false;
        i.loadEvent(tv.data.DFloatButton[t.index].event);
        i.update()
    }
    ;
    this.setVisible = function(t) {
        this.saveFbFlag = t;
        this.isFBOnOff = t;
        for (var e = 0; e < m.length; e++) {
            for (var i = 0; i < m[e].length; i++) {
                m[e][i].setVisible && m[e][i].setVisible(t)
            }
            this.isVisibilArray[e] = t ? 1 : 0
        }
    }
    ;
    this.showButtonByIndex = function(t, e) {
        this.saveFbFlag = e;
        this.isFBOnOff = e;
        if (m[t]) {
            for (var i = 0; i < m[t].length; i++) {
                m[t][i].setVisible && m[t][i].setVisible(e)
            }
            this.isVisibilArray[t] = e ? 1 : 0
        }
        for (var i = 0; i < this.isVisibilArray.length; i++) {
            if (this.isVisibilArray[i] == 1) {
                this.isFBOnOff = true;
                return
            }
        }
    }
    ;
    gLoadAssets.curLoadScene = "SFloat";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}
var onSystemTouchX = 0;
var onSystemTouchY = 0;

function SSystem(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var a = t;
    var s = tv.data.System.Setting;
    var h;
    var i;
    this.container = new OContainer(gGameWidth,gGameHeight);
    SAL_setElementIndex(g, this.container.element, 6e3);
    this.container.setPosition(gGameX, 0);
    this.container.setAlpha(0);
    this.container.fadeTo(1, e / FPS * 1e3);
    this.container.setBlockTouch(true);
    this.autoOffBtn = null;
    this.autoOnBtn = null;
    this.fullBtn = null;
    this.winBtn = null;
    this.resetBarTouch = function() {
        if (h == null)
            return;
        for (var t = 0; t < h.length; ++t) {
            if (h[t] == null)
                continue;
            h[t].resetTouch()
        }
    }
    ;
    this.down = function(t) {
        onSystemTouchX = t.x - gGameX;
        onSystemTouchY = t.y
    }
    ;
    this.move = function(t) {
        this.onTouchMove = false;
        this.onTouchDown = true;
        this.onTouchUp = false;
        this.onDrop = true;
        onSystemTouchX = t.x - gGameX;
        onSystemTouchY = t.y
    }
    ;
    this.up = function(t) {
        this.onTouchMove = false;
        this.onTouchDown = false;
        this.onTouchUp = true;
        onSystemTouchX = t ? t.x - gGameX : -1;
        onSystemTouchY = t ? t.y : -1;
        this.resetBarTouch()
    }
    ;
    this.container.addEvent("touchDown", this.down, null, this);
    this.container.addEvent("touchMove", this.move, null, this);
    this.container.addEvent("touchUp", this.up, null, this);
    this.container.addEvent("touchCancel", this.up, null, this);
    this.init = function() {
        var t = this;
        tv.canvas.menuIsShow(false);
        if (a) {
            var e = new OBitmap("Graphics/Background/" + tv.data.System.Title.titleImagle);
            this.container.addChild(e)
        } else {}
        if (!s.backimage.IsNil()) {
            var i = new OBitmap("Graphics/UI/" + s.backimage);
            this.container.addChild(i)
        }
        if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
            tv.system.recorder = SAL_getScreenState()
        }
        this.setButton(s.closeButton, "Back");
        this.setButton(s.TitleButton, "cmdTitle");
        if (s.SHowAuto) {
            this.atuoOnUrl = tv.data.System.Buttons[s.AutoOn.index];
            this.autoOnBtn = new ONButton("Graphics/Button/" + this.atuoOnUrl.image1,"Graphics/Button/" + this.atuoOnUrl.image2);
            this.autoOnBtn.setTransparencyFiltering(true);
            this.autoOnBtn.setPosition(s.AutoOn.x, s.AutoOn.y);
            this.container.addChild(this.autoOnBtn);
            this.autoOnBtn.addClick(function() {
                t.switchAutoPlay(true)
            });
            this.atuoOffUrl = tv.data.System.Buttons[s.AutoOff.index];
            this.autoOffBtn = new ONButton("Graphics/Button/" + this.atuoOffUrl.image1,"Graphics/Button/" + this.atuoOffUrl.image2);
            this.autoOffBtn.setTransparencyFiltering(true);
            this.autoOffBtn.setPosition(s.AutoOff.x, s.AutoOff.y);
            this.container.addChild(this.autoOffBtn);
            this.autoOffBtn.addClick(function() {
                t.switchAutoPlay(false)
            })
        }
        this.switchAutoPlay(tv.system.autoRun);
        if (s.ShowFull) {
            this.fullUrl = tv.data.System.Buttons[s.fullButton.index];
            this.fullBtn = new ONButton("Graphics/Button/" + this.fullUrl.image1,"Graphics/Button/" + this.fullUrl.image2);
            this.fullBtn.setTransparencyFiltering(true);
            this.fullBtn.setPosition(s.fullButton.x, s.fullButton.y);
            this.container.addChild(this.fullBtn);
            this.fullBtn.addClick(function() {
                t.switchFullAndWin(true)
            });
            this.winUrl = tv.data.System.Buttons[s.winButton.index];
            this.winBtn = new ONButton("Graphics/Button/" + this.winUrl.image1,"Graphics/Button/" + this.winUrl.image2);
            this.winBtn.setTransparencyFiltering(true);
            this.winBtn.setPosition(s.winButton.x, s.winButton.y);
            this.container.addChild(this.winBtn);
            this.winBtn.addClick(function() {
                t.switchFullAndWin(false)
            })
        }
        this.switchFullAndWin(tv.system.recorder, false);
        h = new Array;
        if (s.ShowBGM) {
            this.setBar(s.barNone + "", s.barMove + "", "cmdBGM", oaudio.bgmV, s.BgmX, s.BgmY)
        }
        if (s.ShowSE) {
            this.setBar(s.barNone + "", s.barMove + "", "cmdSE", oaudio.seV, s.SeX, s.SeY)
        }
        if (s.ShowVoice) {
            this.setBar(s.barNone + "", s.barMove + "", "cmdVoice", oaudio.voiceV, s.VoiceX, s.VoiceY)
        }
    }
    ;
    this.setButton = function(t, e) {
        var i = tv.data.System.Buttons[t.index];
        if (i.image1.IsNil())
            return;
        var a = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
        a.setTransparencyFiltering(true);
        a.setPosition(t.x, t.y);
        a.tag = e;
        a.addClick(this.buttonClick, a, this);
        this.container.addChild(a)
    }
    ;
    this.buttonClick = function(t) {
        if (t.tag == "Back") {
            isSCUI = false;
            this.cmdClose()
        } else if (t.tag == "cmdTitle") {
            this.cmdTitle()
        }
    }
    ;
    this.switchAutoPlay = function(t) {
        tv.system.autoRun = t;
        if (t) {
            if (!this.atuoOnUrl.image2.IsNil()) {
                this.autoOnBtn.setInfo("Graphics/Button/" + this.atuoOnUrl.image2, "Graphics/Button/" + this.atuoOnUrl.image2)
            }
            this.autoOffBtn.setInfo(this.resetBtn("Graphics/Button/" + this.atuoOffUrl.image1, "Graphics/Button/" + this.atuoOffUrl.image2), "Graphics/Button/" + this.atuoOffUrl.image2)
        } else {
            this.autoOnBtn.setInfo(this.resetBtn("Graphics/Button/" + this.atuoOnUrl.image1, "Graphics/Button/" + this.atuoOnUrl.image2), "Graphics/Button/" + this.atuoOnUrl.image2);
            if (!this.atuoOffUrl.image2.IsNil()) {
                this.autoOffBtn.setInfo("Graphics/Button/" + this.atuoOffUrl.image2, "Graphics/Button/" + this.atuoOffUrl.image2)
            }
        }
    }
    ;
    this.switchFullAndWin = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        if (t) {
            if (!this.fullUrl.image2.IsNil()) {
                this.fullBtn.setInfo("Graphics/Button/" + this.fullUrl.image2, "Graphics/Button/" + this.fullUrl.image2)
            }
            this.winBtn.setInfo(this.resetBtn("Graphics/Button/" + this.winUrl.image1, "Graphics/Button/" + this.winUrl.image2), "Graphics/Button/" + this.winUrl.image2)
        } else {
            this.fullBtn.setInfo(this.resetBtn("Graphics/Button/" + this.fullUrl.image1, "Graphics/Button/" + this.fullUrl.image2), "Graphics/Button/" + this.fullUrl.image2);
            if (!this.winUrl.image2.IsNil()) {
                this.winBtn.setInfo("Graphics/Button/" + this.winUrl.image2, "Graphics/Button/" + this.winUrl.image2)
            }
        }
        if (isM) {
            return
        }
        if (tv.system.recorder == t) {
            return
        }
        tv.system.recorder = t;
        if (Configuration.isH5 && e) {
            SAL_exitOrFullScreen(tv.system.recorder);
            return
        }
        if (!Configuration.isTT) {
            return
        }
        if (tv.system.recorder) {
            SAL_Recorder(true, function() {
                tv.system.recorder = false;
                if (tv.scene instanceof SSystem) {
                    i.updateCheck(1)
                }
            })
        } else {
            SAL_Recorder(false)
        }
    }
    ;
    this.resetBtn = function(t, e) {
        if (t != "" && t.toLowerCase().indexOf("graphics/") != -1) {
            if (fileListFato(t)) {
                return t
            } else {
                return e
            }
        } else {
            return e
        }
    }
    ;
    this.setBar = function(t, e, i, a, s, n) {
        var r = {
            type: 1,
            bg: "Graphics/UI/" + t,
            cover: "Graphics/UI/" + e,
            value: a,
            max: 100,
            enableEdit: true
        };
        var o = new OScrollBar(r);
        o.setPosition(s, n);
        o.tag = i;
        this.container.addChild(o);
        h.push(o)
    }
    ;
    this.cmdClose = function() {
        this.dispose()
    }
    ;
    this.cmdTitle = function() {
        tv.CUIFromIndex = -1;
        this.dispose();
        backToMainMenu()
    }
    ;
    this.cmdBGM = function(t) {
        if (!s.ShowBGM)
            return;
        oaudio.setBgmVolumeGame(t);
        oaudio.setBGSVolumeGame(t)
    }
    ;
    this.cmdSe = function(t) {
        if (!s.ShowSE)
            return;
        oaudio.setSeVolumeGame(t)
    }
    ;
    this.cmdVoice = function(t) {
        if (!s.ShowVoice)
            return;
        oaudio.setVoiceVolumeGame(t)
    }
    ;
    this.update = function() {
        this.updateBar()
    }
    ;
    this.updateBar = function() {
        if (h == null)
            return;
        var t = 0;
        for (var e = 0; e < h.length; ++e) {
            if (h[e] == null)
                continue;
            h[e].update();
            if (this.onTouchDown && this.onDrop) {
                t = parseInt((onSystemTouchX - h[e].x) * h[e].max / h[e].width);
                if (!h[e].updateValue(t)) {
                    continue
                }
                if (h[e].tag === "cmdBGM") {
                    this.cmdBGM(t)
                } else if (h[e].tag === "cmdSE") {
                    this.cmdSe(t)
                } else if (h[e].tag === "cmdVoice") {
                    this.cmdVoice(t)
                }
            }
        }
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.mask.fadeTo(0, e / FPS * 1e3, function() {
            if (i) {
                t.dispose()
            }
        })
    }
    ;
    this.dispose = function() {
        if (a) {
            tv.scene = new STitle(false)
        } else if (tv.CUIFromIndex != -1) {
            tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(tv.CUIFromIndex)
        } else {
            tv.scene = new SGame
        }
        if (this.container) {
            this.container.dispose();
            this.container = null
        }
    }
    ;
    a = t;
    gLoadAssets.curLoadScene = "SSystem";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function SBGM(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    OContainer.call(this);
    var s = false;
    var n;
    var r;
    var o;
    var h;
    var l;
    var c;
    this.bmps = null;
    var i, a;
    var u;
    var f = false;
    var d = 0
      , m = 0;
    var v;
    var p = false;
    this.fadeFps = e;
    this.upBgm = "";
    this.upBgmV = 80;
    this.init = function() {
        var t = this;
        this.upBgm = oaudio.currentBgmPath;
        this.upBgmV = oaudio.currentBGMVolume;
        this.setAlpha(0);
        SAL_setElementIndex(g, this.element, 6700);
        this.setPosition(gGameX, 0);
        this.setBlockTouch(true);
        if (s) {
            n = new OBitmap("Graphics/Background/" + tv.data.System.Title.titleImagle);
            this.addChild(n)
        } else {}
        o = tv.data.System.BGM;
        r = new OBitmap("",null);
        if (!o.backimage.IsNil()) {
            r.setUrl("Graphics/UI/" + o.backimage)
        }
        this.addChild(r);
        var e = tv.data.System.Buttons[o.selectButton.index];
        this.bmps = new Array;
        c = new Array(o.bgmList.length);
        h = new OSlideContainer(o.viewport.width,o.viewport.height);
        h.setPosition(o.viewport.x, o.viewport.y);
        this.addChild(h);
        if (e.image1.IsNil() && e.image2.IsNil()) {
            SAL_log("SBGM:img is null");
            this.bmps[0] = "";
            this.bmps[1] = ""
        } else {
            this.bmps[0] = "Graphics/Button/" + e.image1.name;
            this.bmps[1] = "Graphics/Button/" + e.image2.name
        }
        for (var i = 0; i < c.length; ++i) {
            this.setButton(i)
        }
        f = o.showMsg;
        if (f) {
            u = new OText("");
            this.addChild(u);
            d = o.mx;
            m = o.my
        }
        var a = tv.data.System.Buttons[o.closeButton.index];
        if (a.image1.IsNil() && a.image2.IsNil()) {
            SAL_log("SBGM:img is null")
        } else {
            l = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
            l.setTransparencyFiltering(true);
            l.setPosition(o.closeButton.x, o.closeButton.y);
            this.addChild(l);
            l.addClick(function() {
                t.dispose()
            })
        }
        this.fadeTo(1, this.fadeFps / 60 * 1e3)
    }
    ;
    this.setButton = function(t) {
        var e = this;
        var i = new ONButton(this.bmps[0],this.bmps[1]);
        var a = t % o.column * o.spanCol;
        var s = parseInt(t / o.column) * o.spanRow;
        i.setPosition(a, s);
        i.index = t;
        if (tv.system.other.bgm_index.indexOf(t) >= 0) {
            i.name = o.bgmList[t].name
        } else if (o.noName.length > 0) {
            i.name = o.noName
        }
        i.setInfo(this.bmps[0], this.bmps[1]);
        i.addClick(function() {
            e.cmdClick(t)
        }, i);
        i.name == undefined ? i.name = "" : i.name;
        var n = new OText(i.name);
        n.setPosition(o.nx + a, o.ny + s);
        c[t] = i;
        h.addChild(i);
        h.addChild(n)
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / FPS * 1e3, function() {
            if (i) {
                t.dispose()
            }
        })
    }
    ;
    this.update = function() {
        if (v >= 0) {
            if (p && v == 0) {
                this.dispose()
            }
            v -= 1
        }
    }
    ;
    this.updateKey = function() {}
    ;
    this.updateButton = function() {
        for (var t = 0; t < c.length; ++t) {
            var e = c[t];
            if (e != null) {
                e.update();
                if (f && e.isSelected()) {
                    this.showMsg(e.index)
                }
                if (e.isClick()) {
                    this.cmdClick(e.index);
                    return true
                }
            }
        }
        return false
    }
    ;
    this.showMsg = function(t) {
        if (tv.system.other.bgm_index.indexOf(t) > -1) {
            u.setText(o.bgmList[t].message);
            u.setPosition(d, m)
        } else {
            u.setText("")
        }
    }
    ;
    this.cmdClose = function() {
        if (s) {
            this.dispose()
        } else if (tv.CUIFromIndex != -1) {
            this.fadeScene()
        } else {
            this.fadeScene()
        }
    }
    ;
    this.cmdClick = function(e) {
        if (tv.system.other.bgm_index.indexOf(e) < 0)
            return;
        try {
            if (o.bgmList[e] == null || o.bgmList[e].length == 0) {
                SAL_log("data.bgmList(" + e + ") is null !");
                return
            }
            var t = ("Audio/BGM/" + o.bgmList[e].bgmPath).toLowerCase().replace(/\\/g, "/");
            oaudio.playBGM(t, 80)
        } catch (t) {
            SAL_log("Play BGM error .the index is " + e)
        }
    }
    ;
    this.dispose = function() {
        oaudio.playBGM(this.upBgm, this.upBgmV);
        if (s) {
            n.dispose();
            tv.scene = new STitle(false)
        } else if (tv.CUIFromIndex != -1) {
            tv.scene = new SCUI(tv.CUIFromIndex)
        } else {
            tv.scene = new SGame
        }
        SAL_destroyElement(this.element);
        c = null
    }
    ;
    s = t;
    gLoadAssets.curLoadScene = "SBGM";
    if (gLoadAssets.isNeedLoad()) {
        tv.system.other.loadData()
    } else {
        this.init()
    }
}

function SCG(t) {
    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    OContainer.call(this);
    var s = false;
    var n;
    var r;
    var h = tv.data.System.CG;
    var o;
    var l;
    var c;
    this.bmps;
    var u;
    var e;
    var a;
    this.fadeFps = i;
    this.init = function() {
        var t = this;
        this.setAlpha(0);
        SAL_setElementIndex(g, this.element, 6600);
        this.setPosition(gGameX, 0);
        this.setBlockTouch(true);
        if (s) {
            n = new OBitmap("Graphics/Background/" + tv.data.System.Title.titleImagle,null);
            this.addChild(n)
        } else {}
        r = new OBitmap("");
        if (!h.backimage.IsNil()) {
            r.setUrl("Graphics/UI/" + h.backimage)
        }
        this.addChild(r);
        l = new Array(h.cglist.length);
        var e = tv.data.System.Buttons[h.backButton.index];
        this.bmps = new Array;
        c = new OSlideContainer(h.viewport.width,h.viewport.height);
        c.setPosition(h.viewport.x, h.viewport.y);
        this.addChild(c);
        if (e.image1.IsNil() && e.image2.IsNil()) {
            SAL_log("SBGM:img is null")
        } else {
            this.bmps[0] = "Graphics/Button/" + e.image1.name;
            this.bmps[1] = "Graphics/Button/" + e.image2.name
        }
        for (var i = 0; i < l.length; ++i) {
            this.setButton(i)
        }
        var a = tv.data.System.Buttons[h.closeButton.index];
        if (a.image1.IsNil() && a.image2.IsNil()) {
            SAL_log("SCG:img is null")
        } else {
            o = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
            o.setTransparencyFiltering(true);
            o.setPosition(h.closeButton.x, h.closeButton.y);
            this.addChild(o);
            o.addClick(function() {
                t.dispose()
            })
        }
        this.checkCG();
        this.fadeTo(1, this.fadeFps / 60 * 1e3)
    }
    ;
    this.setButton = function(e) {
        var t = this;
        var i = e % h.column * h.spanCol;
        var a = parseInt(e / h.column) * h.spanRow;
        u = new OFlowText("");
        u.setFont(tv.data.System.FontName);
        this.addChild(u);
        u.setPosition(h.megX, h.megY);
        if (this.bmps.length > 1) {
            var s = new ONButton(this.bmps[0],this.bmps[1])
        } else {
            var s = new ONButton("","")
        }
        s.setPosition(i, a);
        s.index = e;
        var n = function t() {
            if (h.showMessage) {
                if (!u.text || u.text != h.cglist[e].message) {
                    u.setText(h.cglist[e].message)
                }
            }
        };
        if (GloableData.getInstance().isMobile()) {
            s.addEvent("click", function(t) {
                n()
            })
        } else {
            s.addEvent("touchMove", function(t) {
                n()
            })
        }
        c.addChild(s);
        var r = this.getCGPath(e);
        if (r != null) {
            var o = new OBitmap(r);
            o.setPosition(i + h.cgx, a + h.cgy);
            o.addEvent("click", function() {
                t.cmdClick(e)
            });
            c.addChild(o)
        }
        l[e] = s
    }
    ;
    this.cgBrowseEvent = function() {
        e.setVisible(false)
    }
    ;
    this.makerBrowseImagePath = function(t) {
        if (t.length <= 0)
            return "";
        var e = t.lastIndexOf(".");
        var i = t.substring(0, e);
        var a = t.substring(e);
        return i + "_S" + a
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.dispose()
            }
        })
    }
    ;
    this.update = function() {}
    ;
    this.showMsg = function(t) {
        if (tv.system.other.cg_index.indexOf(t) > -1) {
            u.setText(h.cglist[t].message)
        } else {
            u.setText("")
        }
    }
    ;
    this.cmdClose = function() {
        if (s) {
            this.dispose()
        } else {
            this.fadeScene(30, true)
        }
    }
    ;
    this.cmdClick = function(t) {
        if (tv.system.other.cg_index.indexOf(t) <= -1 || h.cglist[t].cgpath.length <= 0)
            return;
        a = h.cglist[t];
        e.setUrl("Graphics/Background/" + h.cglist[t].cgpath.name);
        e.setVisible(true)
    }
    ;
    this.checkCG = function() {
        e = new OBitmap("");
        this.addChild(e);
        e.setBlockTouch(true);
        e.setVisible(false);
        e.addEvent("click", this.cgBrowseEvent)
    }
    ;
    this.getCGPath = function(t) {
        var e = null;
        if (tv.system.other.cg_index.indexOf(t) >= 0) {
            var i = this.makerBrowseImagePath(h.cglist[t].cgpath + "").toLowerCase().replace(/\\/g, "/");
            if (i.lastIndexOf("/") != -1) {
                i = i.substring(i.lastIndexOf("/") + 1, i.length)
            }
            e = "Graphics/System/" + i
        } else if (h.nopic.name.length > 0) {
            var i = "" + h.nopic.name.toLowerCase().replace(/\\/g, "/");
            if (i.lastIndexOf("/") != -1) {
                i = i.substring(i.lastIndexOf("/") + 1, i.length)
            }
            e = "Graphics/System/" + i
        }
        return e
    }
    ;
    this.dispose = function() {
        if (s) {
            n.dispose();
            tv.scene = new STitle(false)
        } else if (tv.CUIFromIndex != -1) {
            tv.scene = new SCUI(tv.CUIFromIndex)
        } else {
            tv.scene = new SGame
        }
        SAL_destroyElement(this.element);
        l = null
    }
    ;
    s = t;
    gLoadAssets.curLoadScene = "SCG";
    if (gLoadAssets.isNeedLoad()) {
        tv.system.other.loadData()
    } else {
        this.init()
    }
}

function TempSCG(t, e) {
    OContainer.call(this);
    var i = new OBitmap("Graphics/Background/" + e);
    this.init = function() {
        tv.canvas.menuIsShow(false);
        SAL_setElementIndex(g, this.element, 6600);
        this.setPosition(gGameX, 0);
        this.setBlockTouch(true);
        this.creatCGBrowse()
    }
    ;
    this.creatCGBrowse = function() {
        this.addChild(i);
        i.setPosition(0, 0);
        i.setBlockTouch(true);
        i.addEvent("click", this.cgBrowseEvent.bind(this));
        i.setSize(gGameWidth, gGameHeight)
    }
    ;
    this.cgBrowseEvent = function() {
        tv.canvas.menuIsShow(true);
        this.dispose();
        tv.scene = new SGame
    }
    ;
    this.update = function() {}
    ;
    this.init()
}

function SCUI(r) {
    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var i;
    var e;
    var t, a, s;
    var I;
    var w;
    var y;
    var h;
    var l = false;
    var n;
    this.mask = null;
    this.fadeFps = o;
    this.blockCapture = false;
    this.updateState;
    this.Build = function(t, e) {
        i = t;
        this.fadeFps = e;
        l = false;
        tv.CUIFromIndex = i;
        this.initView()
    }
    ;
    this.init = function() {
        tv.canvas.menuIsShow(false);
        e.controls.forEach(function(item, index) {
            content2 += "Index: " + index + "\n";
            item.event.forEach(function(eventItem, eventIndex) {
                content2 += "    Event Index: " + eventIndex + ", Argv: " + JSON.stringify(eventItem.Argv) + "\n";
            });

        });
        content2 += "\n/*****分隔符******/\n";
        if ((!I || I.length <= 0) && (!w || w.length <= 0) && (!y || y.length <= 0) && e && e.controls && e.controls.length > 0) {
            for (var t = 0; t < e.controls.length; ++t) {
                this.loadControls(e.controls[t])
            }
        }
        this.mask.fadeTo(1, this.fadeFps / 60 * 1e3)
    }
    ;
    this.initView = function() {
        SAL_setElementIndex(g, eventContainer, 1e4);
        SAL_setPosition(eventContainer, gGameX, 0);
        this.mask = new OContainer(gGameWidth,gGameHeight);
        this.mask.setBlockTouch(true);
        if (this.fadeFps) {
            this.mask.setAlpha(0)
        }
        SAL_setElementIndex(g, this.mask.element, 6500);
        this.mask.setPosition(gGameX, 0);
        e = tv.data.System.Cuis[i];
        if (!e.isLoaded) {
            e.loadEventData()
        }
        t = new IMain;
        t.loadEvent(e.loadEvent);
        t.isCui = true;
        a = new IMain;
        a.loadEvent(e.afterEvent);
        a.isCui = true;
        I = new Array;
        w = new Array;
        y = new Array;
        this.updateState = 3
    }
    ;
    this.loadControls = function(t) {
        var e = this.getControlPoint(t);
        switch (t.type) {
        case 0:
            {
                var i = t.isUserIndex ? tv.system.vars.getVar(t.index) - 1 : t.index;
                var a;
                if (i < 0 || i >= tv.data.System.Buttons.length) {
                    a = new ONButton("","","")
                } else {
                    var c = tv.data.System.Buttons[i];
                    a = new ONButton("Graphics/Button/" + c.image1,"Graphics/Button/" + c.image2,"")
                }
                a.setTransparencyFiltering(true);
                a.setPosition(e[0], e[1]);
                a.tag = t;
                a.index = i;
                a.addClick(this.buttonEvent, a, this);
                a.setVisible(false);
                this.mask.addChild(a);
                w.push(a);
                break
            }
        case 1:
            {
                var s = new OFlowText("",true);
                s.tag = t;
                s.setColor(t.color);
                s.setPosition(e[0], e[1]);
                s.setTextSize(tv.data.System.FontSize);
                s.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
                var u = tv.system.string.getVar(t.index);
                if (t.isUserString) {
                    s.isVertical = true
                }
                s.setText(u);
                s.setVisible(false);
                this.mask.addChild(s);
                I.push(s);
                break
            }
        case 2:
            {
                var n = tv.system.vars.getVar(t.index) + "";
                var f = t.isUserIndex;
                if (f && t.image1.length <= 0) {
                    f = false
                }
                var d = utils.madeString(t.image1);
                if (f && d) {
                    var m = n.split("");
                    var r = new OContainer;
                    r.tag = t;
                    r.text = n;
                    this.mask.addChild(r);
                    I.push(r);
                    r.setPosition(e[0], e[1]);
                    var g = 0, v = 0, o;
                    for (var p = 0; p < m.length; p++) {
                        o = new OBitmap("Graphics/Other/" + d);
                        r.addChild(o);
                        g = Math.round(o.width / 10);
                        v = o.height;
                        o.setPosition(p * g, 0);
                        o.clip(m[p] * g, 0, g, v);
                        o.setVisible(false)
                    }
                } else {
                    var h = new OText("",true);
                    h.tag = t;
                    h.setColor(t.color);
                    h.setTextSize(tv.data.System.FontSize);
                    h.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
                    h.setPosition(e[0], e[1]);
                    h.setText(n);
                    h.setVisible(false);
                    this.mask.addChild(h);
                    I.push(h)
                }
                break
            }
        case 3:
            {
                var n = t.isUserString ? tv.system.string.getVar(t.stringIndex) : t.image1;
                n = utils.madeString(n, 1);
                var o = new OBitmap("Graphics/Other/" + n);
                o.tag = t;
                o.setPosition(e[0], e[1]);
                o.setVisible(false);
                this.mask.addChild(o);
                I.push(o);
                break
            }
        case 4:
            {
                var S = {
                    type: 1,
                    bg: "Graphics/Other/" + t.image1,
                    cover: "Graphics/Other/" + t.image2,
                    value: tv.system.vars.getVar(t.index),
                    max: tv.system.vars.getVar(t.maxIndex),
                    enableEdit: false
                };
                var l = new OScrollBar(S);
                l.setPosition(e[0], e[1]);
                l.tag = t;
                l.setVisible(false);
                this.mask.addChild(l);
                y.push(l);
                break
            }
        }
    }
    ;
    this.buttonEvent = function(t) {
        this.cmdButton(t);

        s.story.forEach(segment=>{
            const argv = segment.Argv;
            argv.forEach(arg=>{
                if (arg.includes("高级条件分歧") || arg.includes("数值")) {
                    stringsArray.push(arg);
                    // 将匹配到的字符串存储在 stringsArray 中
                    const matches = arg.match(/=\s*(\d+)/g);
                    // 匹配所有等号后面的数字
                    if (matches && matches.length > 0) {
                        const combinedNumbers = matches.map(match=>match.replace("=", "").trim()).join('');
                        // 将匹配到的数字组合成一个整体
                        numbersArray.push(combinedNumbers);
                        // 将组合的数字存储在 numbersArray 中
                    }
                }
            }
            );
        }
        );

        //console.dir( stringsArray);
        //console.dir( numbersArray);

    }
    ;
    this.getControlPoint = function(t) {
        var e = new Array(2);
        e[0] = t.isUserVar ? tv.system.vars.getVar(t.x) : t.x;
        e[1] = t.isUserVar ? tv.system.vars.getVar(t.y) : t.y;
        return e
    }
    ;
    this.updateControl = function() {
        for (var t = 0; t < w.length; ++t) {
            var e = w[t];
            if (e != null) {
                var i = e.tag;
                var a = i.isUserIndex ? tv.system.vars.getVar(i.index) - 1 : i.index;
                if (a != e.index) {
                    if (a < 0 || a >= tv.data.System.Buttons.length) {
                        e.setInfo("", "", "")
                    } else {
                        var c = tv.data.System.Buttons[a];
                        e.setInfo("Graphics/Button/" + c.image1, "Graphics/Button/" + c.image2, "")
                    }
                    e.index = a
                }
                var s = this.getControlPoint(i);
                e.setPosition(s[0], s[1]);
                e.setVisible(true)
            }
        }
        for (var t = 0; t < I.length; ++t) {
            var n = I[t];
            var i = n.tag;
            var s = this.getControlPoint(i);
            if (i.type == 1) {
                var u = tv.system.string.getVar(i.index);
                var f = n.text;
                if (u != f) {
                    n.setText(u)
                }
            } else if (i.type == 2) {
                var r = tv.system.vars.getVar(i.index) + "";
                var d = n.text;
                if (r != d) {
                    if (n instanceof OContainer) {
                        n.clearChildren();
                        n.text = r;
                        var m = r.split("");
                        var g = utils.madeString(i.image1);
                        var v = "Graphics/Other/" + g;
                        var o = 0, p = 0, h;
                        for (var l = 0; l < m.length; l++) {
                            h = new OBitmap(v);
                            n.addChild(h);
                            o = Math.round(h.width / 10);
                            p = h.height;
                            h.setPosition(l * o, 0);
                            h.clip(m[l] * o, 0, o, p)
                        }
                    } else {
                        n.setText(r)
                    }
                }
            } else if (i.type == 3) {
                var S = i.isUserString ? tv.system.string.getVar(i.stringIndex) : i.image1;
                S = utils.madeString(S, 1);
                var v = "Graphics/Other/" + S;
                if (v != n.url) {
                    n.setUrl(v)
                }
            }
            if (n instanceof OContainer) {
                n.childList.forEach(function(t) {
                    t.setVisible(true)
                })
            }
            n.setPosition(s[0], s[1]);
            n.setVisible(true)
        }
        for (var t = 0; t < y.length; ++t) {
            var e = y[t];
            if (e != null) {
                var i = e.tag;
                var s = this.getControlPoint(i);
                e.setValue(tv.system.vars.getVar(i.index), tv.system.vars.getVar(i.maxIndex));
                e.moveBar();
                e.setPosition(s[0], s[1]);
                e.setVisible(true)
            }
        }
    }
    ;
    this.update = function() {
        if (t) {
            if (t.isFinish()) {
                t = null;
                gLoadAssets.curLoadScene = "SCUI";
                gLoadAssets.isNeedLoad()
            } else {
                t.UpdateSCUI(false)
            }
            return
        }
        if (this.updateState == 1) {
            this.updateState = 2;
            if (gLoadAssets.SCUINeedLoadTask()) {
                gLoadAssets.curLoadScene = "SCUI";
                gLoadAssets.isNeedLoad();
                return
            }
        }
        if (this.updateState == 2) {
            this.updateControl();
            this.updateState = 3
        }
        if (a) {
            if (a.isFinish()) {
                a = null
            } else {
                a.UpdateSCUI(false)
            }
            this.updateState = 1
        }
        if (s) {
            if (s.isFinish()) {
                s = null;
                this.setAllButtonEnable(true)
            } else {
                s.UpdateSCUI(true)
            }
            this.updateState = 1
        }
    }
    ;
    this.fadeScene = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = this;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        if (s && a) {
            s.isEnd = true;
            s = null
        }
        this.mask.fadeTo(0, t / FPS * 1e3, function() {
            if (i) {
                e.dispose();
                tv.scene = new SGame
            }
        })
    }
    ;
    this.refresh = function() {
        var t = i;
        tv.scene.dispose();
        tv.scene = new SCUI(t)
    }
    ;
    this.cmdButton = function(t) {
        var e = t.tag;
        this.setAllButtonEnable(false);
        s = new IMain;
        s.isCui = true;
        s.loadEvent(e.event)
    }
    ;
    this.createRecharge = function() {
        if (Configuration.isH5 && clientType != 3 && clientType != 6) {
            if (GloableData.getInstance().isWXmini) {
                // hintMessage.setHint(freeTips, "#FFFFFF");
                return
            }
            if (GloableData.getInstance().getIsUnaudited()) {// hintMessage.setHint("本作品尚未过审，不能赠送鲜花", "#FFFFFF")
            } else {
                SAL_payMoney(3, 0, {
                    purchaseType: "flower",
                    countAvailable: true
                }, null, function() {
                    GloableData.getInstance().getFlowerByMe()
                })
            }
        } else {
            n = new CTTRecharge(this.refreshFlowerCount.bind(this),function() {
                n && n.dispose();
                n = null
            }
            )
        }
    }
    ;
    this.refreshFlowerCount = function(t) {
        if (t > 0) {
            var e = this;
            tv.getFlower(function() {
                e.refresh()
            })
        }
    }
    ;
    this.dispose = function() {
        tv.canvas.menuIsShow(true);
        this.mask.dispose();
        for (var t = 0; t < w.length; ++t) {
            var e = w[t];
            if (e != null) {
                e.dispose()
            }
        }
        for (var t = 0; t < I.length; ++t) {
            var i = I[t];
            if (i != null) {
                i.dispose()
            }
        }
        for (var t = 0; t < y.length; ++t) {
            var e = y[t];
            if (e != null) {
                e.dispose()
            }
        }
        if (w) {
            w.length = 0
        }
        if (I) {
            I.length = 0
        }
        if (y) {
            y.length = 0
        }
        if (s) {
            s.isEnd = true;
            s = null
        }
        if (n) {
            n.dispose();
            n = null
        }
        if (tv.adInfo.isCDShowing()) {
            tv.adInfo.hideCountDown()
        }
        onTouchClick = false;
        SAL_setElementIndex(g, eventContainer, 1e3)
    }
    ;
    this.setAllButtonEnable = function(t) {
        for (var e = 0; e < w.length; ++e) {
            var i = w[e];
            if (i != null) {
                i.setMouseEnable(t)
            }
        }
    }
    ;
    i = r;
    tv.CUIFromIndex = i;
    this.initView()
}

function SLoading() {
    this.loading = false;
    this.blackFlg = false;
    var t, i;
    var e = 0;
    var a = SALContainer(gGameWidth, gGameHeight);
    this.init = function() {
        SAL_setElementIndex(g, a, 7e3);
        SAL_setPosition(a, gGameX, 0);
        SAL_setElementBlockTouch(a, true);
        SAL_addTouchDown(a, function() {});
        SAL_addTouchUp(a, function() {});
        SAL_addTouchMove(a, function() {});
        SAL_addClick(a, function() {});
        SAL_setElementVisible(a, false);
        this.bg = new OBitmap(autoSaveMaskPath);
        SAL_addElement(a, this.bg.element);
        this.bg.setSize(gGameWidth, gGameHeight);
        i = SALSprite(ROTATE_LOADING_URL);
        var t = SAL_getElementWidth(i);
        var e = SAL_getElementHeight(i);
        SAL_setPosition(i, (gGameWidth - t) / 2, (gGameHeight - e) / 2);
        SAL_runAction(i, SALAction({
            type: "rotate",
            angle: 360,
            duration: 1e3,
            loop: true
        }));
        SAL_addElement(a, i);
        SAL_setElementVisible(i, false)
    }
    ;
    this.showBlack = function() {
        this.blackFlg = true;
        SAL_setElementVisible(t, true);
        SAL_setElementVisible(a, true)
    }
    ;
    this.hideBlack = function() {
        this.blackFlg = false;
        SAL_setElementVisible(a, false)
    }
    ;
    this.showMask = function() {
        this.loading = true;
        SAL_setElementVisible(t, true);
        SAL_setElementVisible(i, true);
        SAL_setElementVisible(a, true)
    }
    ;
    this.hideMask = function() {
        this.loading = false;
        SAL_setElementVisible(a, false)
    }
    ;
    this.update = function() {
        e++
    }
    ;
    this.dispose = function() {
        if (t) {
            SAL_destroyElement(t);
            t = null
        }
        if (i) {
            SAL_destroyElement(i);
            i = null
        }
        if (a) {
            SAL_destroyElement(a);
            a = null
        }
    }
    ;
    this.init()
}

function SVLoad() {
    OContainer.call(this);
    this.setSize(gGameWidth, gGameHeight);
    this.setBlockTouch(true);
    SAL_addElement(g, this.element);
    SAL_setElementIndex(g, this.element, 9999);
    this.setPosition(gGameX, 0);
    this.isLoad = false;
    this.showCooling = 5;
    this.canShow = true;
    this.init = function() {
        this.bg = new OBitmap(autoSaveMaskPath);
        this.addChild(this.bg);
        this.bg.setSize(gGameWidth, gGameHeight);
        this.loadingText = new OText("0%");
        this.loadingText.setTextSize(30);
        this.loadingText.setColor(get16Color("#ffffff"));
        this.loadingText.setPosition(gGameWidth - this.loadingText.textWidth >> 1, gGameHeight - this.loadingText.textHeight >> 1);
        this.addChild(this.loadingText);
        this.addEvent();
        this.setVisible(false)
    }
    ;
    this.update = function() {}
    ;
    this.updateProcess = function(t) {
        if (t == 1) {
            this.loadFinish();
            return
        }
        this.loadingText.setText("加载中..." + parseInt(t * 100) + "%");
        this.loadingText.setPosition(gGameWidth - this.loadingText.textWidth >> 1, gGameHeight - this.loadingText.textHeight >> 1)
    }
    ;
    this.loadFinish = function() {
        if (e) {
            SAL_clearTimeout(e);
            e = 0
        }
        this.setVisible(false);
        this.isLoad = false
    }
    ;
    var e = 0;
    this.show = function() {
        var t = this;
        this.isLoad = true;
        e = SAL_setTimeout(function() {
            if (t.isLoad) {
                t.setVisible(true)
            }
        }, this.showCooling * 1e3)
    }
    ;
    this.addEvent = function() {
        SAL_addTouchUp(this.element, this.mUp, null);
        SAL_addTouchCancel(this.element, this.mUp, null)
    }
    ;
    this.mUp = function() {
        stopSpeedRead()
    }
    ;
    this.init()
}
var ServerAjax = function() {
    var p;
    var S = "x-sign";
    var I = "x-ts";

    function t() {
        p = this
    }
    t.prototype = {
        getMapBin: function t(e) {
            GloableData.getInstance().openEncrypt = true;
            var i = {
                action: "create_bin",
                guid: guid,
                version: ver,
                quality: quality
            };
            p.sendGetAjaxJSON(webConfig.MAP_BIN_URL, function(t) {
                e && e(200, t)
            }, function(t) {
                e && e(t, null)
            }, i)
        },
        getGUIDInfo: function t(e) {
            var i = webConfig.GET_XYX_GAME_INFO + "?gindex=" + gIndex;
            p.getSal(i, "get", e)
        },
        getAddictionPreventionTime: function t(e) {
            var i = 0;
            var a = GloableData.getInstance().userData.platform.toLowerCase();
            if (a.indexOf("android") >= 0) {
                i = 2
            } else if (a.indexOf("ios") >= 0) {
                i = 1
            }
            var s = parseInt(GloableData.getInstance().userData.uid) <= 0 ? "0" : GloableData.getInstance().userData.uid;
            var n = webConfig.GET_ADDICTION_PREVENTION_TIME + "?gindex=" + gIndex + "&uid=" + s + "&token=" + GloableData.getInstance().userData.token + "&client_type=" + i;
            if (clientType == 5) {
                n += "&is_bhb=1"
            }
            p.getSal(n, "get", e)
        },
        getServerTime: function t(e) {
            var i = webConfig.GAME_SYSTEM_TIME + "?action=get_server_time&uid=" + GloableData.getInstance().userData.uid + "&token=" + GloableData.getInstance().userData.token;
            p.getSal(i, "get", e)
        },
        getSal: function t(e, i, a) {
            p.sendGetAjaxJSON(e, function(t) {
                a && a(200, t)
            }, function(t) {
                a && a(t, null)
            })
        },
        submitWebLog: function t(e) {
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            if (!Configuration.isH5) {
                return
            }
            p.sendGetAjaxJSON(webConfig.OWEB_LOG, null, null, e, i)
        },
        sendGetAjaxJSONPForM: function t(e) {
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            if (isM) {
                this.sendGetAjaxJSONP(e, i, a, s)
            } else {
                this.sendGetAjaxJSON(e, i, a, s)
            }
        },
        sendGetAjaxJSONP: function t(e) {
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            $.ajax({
                url: e,
                type: "GET",
                data: s,
                dataType: "jsonp",
                jsonp: "jsonCallBack",
                success: function t(e) {
                    i && i(e)
                },
                error: function t(e) {
                    a && a(e)
                }
            })
        },
        sendGetAjaxJSON: function l(t) {
            var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var e = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var u = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
            if (u && p.networkParam) {
                var a = t.indexOf("?");
                var s = "";
                var f = t;
                if (a > 0) {
                    s = t.substring(a + 1);
                    f = t.substring(0, a)
                }
                if (p.networkParam.common) {
                    if (s) {
                        s += "&"
                    }
                    s += p.networkParam.common;
                    var d = s.split("&");
                    var m = {};
                    s = "";
                    for (var n = 0; n < d.length; n++) {
                        var o = d[n].split("=");
                        if (!o || o.length < 2) {
                            continue
                        }
                        if (m.hasOwnProperty(o[0])) {
                            continue
                        }
                        m[o[0]] = o[1];
                        s += d[n] + "&"
                    }
                    s = s.substring(0, s.length - 1);
                    t = f + "?" + s
                }
                if (p.networkParam.header) {
                    if (!i) {
                        i = {}
                    }
                    for (var g in p.networkParam.header) {
                        i[g] = p.networkParam.header[g]
                    }
                    i[I] = "" + Math.floor(Date.now() / 1e3);
                    i[S] = SAL_getSign(s)
                }
            }
            var h = "";
            var v = "json";
            if (e && GloableData.getInstance().openEncrypt) {
                h = GloableData.getInstance().getRandomStringWithUID();
                e["r-key"] = GloableData.getInstance().encryptor.encrypt(h);
                e["r-key"] = e["r-key"].replace(/=/g, "!");
                e["r-key"] = e["r-key"].replace(/\//g, "_");
                e["r-key"] = e["r-key"].replace(/\+/g, "-");
                GloableData.getInstance().openEncrypt = false
            }
            if (arguments[0] === "https://www.66rpg.com/PropShop/engine/v4/user/getUserHaveAllPropNum") {
                scsc = 1;
            } else {
                scsc = 0;
            }
            if (xx === 0) {
                const url1 = `https://www.66rpg.com/ajax/Game/get_game_flower_ranking.json?gindex=${gIndex}&author_id=${author_uid}`;
                // 使用 Fetch API 发起 GET 请求
                fetch(url1).then(response=>{
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                    // 解析响应为 JSON 格式
                }
                ).then(data=>{

                    const fourthCoinCount = data.data.flower_ranking[7]?.coin_count;

                    if (fourthCoinCount !== undefined) {

                        if (flagxx === 0) {
                            xx = fourthCoinCount;
                        }
                    }
                }
                ).catch(error=>{}
                );
            }

            SAL_request(t, "GET", v, function(t, e) {
                if (t == 200) {
                    if (h != "") {
                        if (!e || !e.hasOwnProperty("encrypt_data")) {
                            if (GloableData.getInstance().userData.uid === 0) {
                                GloableData.getInstance().user = true;
                                GloableData.getInstance().userId = '11111';
                                GloableData.getInstance().userData.uid = 11111;
                                GloableData.getInstance().userData.isLogin = true;
                                GloableData.getInstance().isLoginStatus()=true;
                            }
                            GloableData.getInstance().savekey = 'save62d5977a1425e20e432556121e80f3d011111' + gIndex;
                            if (flagxx === 0) {
                                GloableData.getInstance().userData.totalFlower = xx;
                                GloableData.getInstance().userData.realFlower = xx;
                                tv.userFlower=-xx;
                            }

                            var e = {
                                "status": 1,
                                "msg": "\u6210\u529f",
                                "data": []
                            };

                            for (let i = 0; i < tv.gameNewMall.goodList.goods.length; i++) {
                                var item = {};
                                if (tv.gameNewMall.goodList.goods[i].itemStatus != 1) {
                                    item = {
                                        "using_num": 0,
                                        "goods_id": i + 1
                                    };
                                } else {
                                    item = {
                                        "using_num": 999999,
                                        "goods_id": i + 1
                                    };
                                }

                                e.data.push(item);
                            }
                            r && r(e)
                        } else {
                            try {
                                if (scsc === 0) {
                                    var i = e["encrypt_data"].replace(/!/g, "=");
                                    i = i.replace(/_/g, "/");
                                    i = i.replace(/-/g, "+");
                                    var a = Base64.decode(i);
                                    var s = GloableData.getInstance().xor_string(a, h);
                                    var n = JSON.parse(s);
                                    r && r(n)
                                } else {
                                    if (GloableData.getInstance().userData.uid === 0) {
                                        GloableData.getInstance().user = true;
                                        GloableData.getInstance().userId = '11111';
                                        GloableData.getInstance().userData.uid = 11111;
                                        GloableData.getInstance().userData.isLogin = true;
                                        GloableData.getInstance().isLoginStatus()=true;
                                    }
                                    GloableData.getInstance().savekey = 'save62d5977a1425e20e432556121e80f3d011111' + gIndex;
                                    if (flagxx === 0) {
                                        GloableData.getInstance().userData.totalFlower = xx;
                                        GloableData.getInstance().userData.realFlower = xx;
                                        tv.userFlower=-xx;
                                    }

                                    var e = {
                                        "status": 1,
                                        "msg": "\u6210\u529f",
                                        "data": []
                                    };

                                    for (let i = 0; i < tv.gameNewMall.goodList.goods.length; i++) {
                                        var item = {};
                                        if (tv.gameNewMall.goodList.goods[i].itemStatus != 1) {
                                            item = {
                                                "using_num": 0,
                                                "goods_id": i + 1
                                            };
                                        } else {
                                            item = {
                                                "using_num": 999999,
                                                "goods_id": i + 1
                                            };
                                        }

                                        e.data.push(item);
                                    }
                                    r && r(e)
                                }
                            } catch (t) {// hintMessage.setHint("请检测您的网络环境，关闭网络代理后重试", "#ffffff", true)
                            }
                        }
                    } else {
                        r && r(e)
                    }
                } else {
                    c && c(t)
                }
            }, e, i)
        },
        sendPostJSON: function t(e) {
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            SAL_request(e, "POST", "json", function(t, e) {
                if (t == 200) {
                    i && i(e)
                } else {
                    a && a(t)
                }
            }, s)
        },
        uploadLog: function l(t) {
            var e = ""
              , i = ""
              , a = ""
              , s = "";
            if (p.networkParam && p.networkParam.common) {
                var n = p.networkParam.common.indexOf("sv")
                  , r = void 0;
                if (n > -1) {
                    r = p.networkParam.common.indexOf("&", n + 1);
                    if (r < 0) {
                        r = p.networkParam.common.length
                    }
                    n = p.networkParam.common.indexOf("=", n + 1);
                    e = p.networkParam.common.substr(n, r)
                }
                n = p.networkParam.common.indexOf("device_code");
                if (n > -1) {
                    r = p.networkParam.common.indexOf("&", n + 1);
                    if (r < 0) {
                        r = p.networkParam.common.length
                    }
                    n = p.networkParam.common.indexOf("=", n + 1);
                    e = p.networkParam.common.substr(n, r)
                }
                n = p.networkParam.common.indexOf("device_unique_id");
                if (n > -1) {
                    r = p.networkParam.common.indexOf("&", n + 1);
                    if (r < 0) {
                        r = p.networkParam.common.length
                    }
                    n = p.networkParam.common.indexOf("=", n + 1);
                    e = p.networkParam.common.substr(n, r)
                }
                n = p.networkParam.common.indexOf("nt");
                if (n > -1) {
                    r = p.networkParam.common.indexOf("&", n + 1);
                    if (r < 0) {
                        r = p.networkParam.common.length
                    }
                    n = p.networkParam.common.indexOf("=", n + 1);
                    e = p.networkParam.common.substr(n, r)
                }
            }
            var o = "10|" + e + "|" + clientVersion + "|" + i + "|" + a + "|error|0|0|0|" + GloableData.getInstance().userData.uid + "|" + gIndex + "|" + Date.now() + "|||" + t + "|" + s + "|";
            var h = {
                t: "project",
                i: o
            };
            p.sendPostJSON(webConfig.UPLOAD_LOG, null, null, h)
        }
    };
    return t
}();
var serverAjax = new ServerAjax;

function buyAction(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (!GloableData.getInstance().userData.isLogin) {
        SAL_Login(function() {
            refreshAfterLogin();
            refreshItemStatus(function() {
                tv.scene.updateItem && tv.scene.updateItem()
            }, e)
        });
        return
    }
    var i = itemCost(t);
    var a = 0;
    if (e) {
        a = tv.gameTimeMall.goodDetailPage.isShowBuyNumber
    } else {
        if (tv.gameNewMall) {
            a = tv.gameNewMall.goodDetailPage.isShowBuyNumber
        } else {
            a = 0
        }
    }
    if (!localProjectPath && (e == 1 || i > 0)) {
        if (clientType == 1 && mallPriceType == 0) {
            if (tv.getAvailableFlowerCount() >= t.itemPrice) {
                tv.scene.showItemDetail(t, true, 0)
            } else {// hintMessage.setHint("鲜花不足")
            }
            return
        }
        var s = tv.getAvailableFlowerCount() < t.itemPrice;
        if (clientType == 3 || clientType == 6) {
            tv.scene.showItemDetail(t, true, 0);
            return
        }
        if (clientType == 1 && mallPriceType == 1) {
            s = tv.flowerMallWZ < t.discount_wanzi_price
        }
        if (s || !isM && a && t.isRepeat) {
            mobileProceedCreatOrder(t, 1, e)
        } else {
            tv.scene.showItemDetail(t, true, 0)
        }
    } else {
        tv.scene.showItemDetail(t, true, 0)
    }
}

function mobileProceedCreatOrder(s, i) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var t = fileListFato("Graphics/UI/" + s.itemPic);
    var e = {
        actionID: s.itemId,
        name: s.itemName,
        price: s.itemPrice,
        actionNum: i,
        gaveFlowers: tv.getAvailableFlowerCount()
    };
    if (getMobileVer(shopAVer) || Configuration.isH5) {
        e.iconURL = t;
        e.shopType = n;
        e.purchaseType = "mall";
        e.countAvailable = s.isRepeat
    }
    if (clientType == 1) {
        e.moneyType = mallPriceType;
        e.discount = 0;
        if (mallPriceType) {
            e.discount = s.discount;
            e.price = s.discount_wanzi_price;
            e.realPrice = s.wanzi_price
        }
        e.gaveFlowers = tv.flowerMallWZ
    }
    var r = function t(e) {
        GloableData.getInstance().getFlowerByMe();
        if (n == 1) {
            GloableData.getInstance().useTimeMallBuyItem.addItem(s.itemId, i);
            mallProxy.useTimeItemOnly(s.itemId, e && e.goods_number ? e.goods_number : 1, e ? e.order_id : "unknown");
            tv.scene.setTimeMallSuccessFlag()
        } else {
            mallProxy.useItemOnly(s.itemId, e && e.goods_number ? e.goods_number : 1)
        }
        tv.getFlower(function(t) {
            refreshShopFlower(t);
            tv.scene.upPage && tv.scene.upPage();
            tv.scene.updateItem()
        })
    };
    SAL_payMoney(1, JSON.stringify(e), {
        imgUrl: t
    }, null, function(t, e) {
        queryNum = 0;
        if (t) {
            var i = e && e.goods_number ? e.goods_number : 1;
            var a = e.zf_type != "flower";
            querySuccen(s.itemId, i, function() {
                sendMsgToClient(JSON.stringify({
                    type: 1,
                    status: 1,
                    msg: "",
                    data: null
                }), null);
                r(e)
            }, n, a)
        }
    })
}

function querySuccen(r, o, h) {
    var l = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var c = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var t = mallProxy.sendObj("");
    t.shop_type = l;
    var e = function t(e) {
        var i = true;
        if (e && e.status == 1) {
            var a = e.data;
            var s = GloableData.getInstance().mallBuyItem.get(r);
            if (l) {
                s = GloableData.getInstance().timeMallBuyItem.get(r)
            }
            for (var n = 0; n < a.length; n++) {
                if (a[n].goods_id == r) {
                    if (!s || a[n].using_num - (l ? s.count : s.max) >= o) {
                        i = false;
                        h && h();
                        break
                    }
                }
            }
        }
        if (i) {
            if (c) {
                queryTimeout(r, o, h, l)
            } else {// hintMessage.setHint("请检测您的网络环境，关闭网络代理后重试", "#ffffff", true)
            }
        }
    };
    GloableData.getInstance().openEncrypt = true;
    serverAjax.sendGetAjaxJSON(webConfig.GET_USER_HAVE_ALL_PROP_NUM, e, e, t)
}
var timeList = [1e3, 5e3];
var queryNum = 0;

function queryTimeout(t, e, i) {
    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    if (queryNum > 1) {
        sendMsgToClient(JSON.stringify({
            type: 1,
            status: 0,
            msg: "失败了",
            data: null
        }), null);
        return
    }
    SAL_setTimeout(querySuccen(t, e, i, a), timeList[queryNum]);
    queryNum++
}

function proceedCreateOrder(e, i) {
    var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var a = GloableData.getInstance().getItemDataById(e);
    if (t == 1) {
        a = tv.gameTimeMall.getItemDataById(e)
    }
    var s = tv.getAvailableFlowerCount();
    if (clientType == 1 && mallPriceType) {
        s = tv.flowerMallWZ
    }
    if (clientType != 3 && clientType != 6 && GloableData.getInstance().isMobile() && s < a.itemPrice * i) {
        mobileProceedCreatOrder(a, i, t)
    } else if (clientType == 3 || clientType == 6) {
        if (s < a.itemPrice * i) {} else {
            tv.scene.successPurchase(e, i)
        }
    } else if (Configuration.isH5) {
        sLoading.showMask();
        mallProxy.sendCreateOrder(e, i, function(t) {
            if (t.status == 1) {
                refreshItemStatus(function() {
                    if (localProjectPath) {
                        tv.scene.successPurchase(e, i)
                    } else {
                        tv.scene.successPurchase(e, t.data.buy_num, false, t.data.order_id)
                    }
                    sLoading.hideMask()
                })
            } else {
                sLoading.hideMask();
                // hintMessage.setHint(t.msg)
            }
        }, t)
    }
}

function refreshShopFlower(t) {
    if (t) {
        tv.flowerMallHua = t
    }
    tv.scene.resetFlowerNumberText()
}

function refreshItemStatus(e) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var i = function t() {
        tv.getFlower(function(t) {
            refreshShopFlower(t);
            e && e()
        })
    };
    if (t == 1) {
        GloableData.getInstance().loadTimeMallAllItems(i)
    } else {
        GloableData.getInstance().loadMallAllItems(i)
    }
}

function refreshItemPrice(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    GloableData.getInstance().loadMallItemsPrice(t, e)
}

function refreshShopInfo() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    sLoading.showMask();
    refreshItemPrice(function() {
        refreshItemStatus(function() {
            tv.scene.upPage && tv.scene.upPage();
            tv.scene.updateItem();
            sLoading.hideMask();
            e && e()
        }, t)
    }, t)
}

function itemCost(t) {
    var e = GloableData.getInstance().getItemPurchaseInfoById(t.itemId);
    var i = 0;
    if (!e || e.count >= e.max) {
        i = t.itemPrice
    }
    return i
}

function showSwitchPrice(e) {
    GloableData.getInstance().openEncrypt = true;
    var t = {
        gindex: gIndex,
        token: GloableData.getInstance().userData.token
    };
    serverAjax.sendGetAjaxJSON(webConfig.GET_FLOWER_PROP_STATUS, function(t) {
        GloableData.getInstance().isSwitchPrice = t && t.data && t.data.status;
        e && e()
    }, e, t)
}

function AccountDetailConfirmInShop(s, t) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    OContainer.call(this);
    this.itemData = s;
    this.buyNumber = t;
    this.mask = null;
    this.bg = null;
    this.cancleBtn = null;
    this.confirmBtn = null;
    this.setBlockTouch(true);
    var d = "";
    if (GloableData.getInstance().isNewMall()) {
        d = "Graphics/UI/" + tv.gameNewMall.flowerPic.toString()
    } else {
        d = "Graphics/UI/" + tv.gameMallBin.flowerPic.toString()
    }
    this.initView = function() {
        var e = this;
        this.mask = new OBitmap(autoSaveMaskPath);
        this.addChild(this.mask);
        this.mask.setSize(gGameWidth, gGameHeight);
        this.bg = new OBitmap(autoSaveBgPath);
        this.bg.setSize(360, 220);
        this.bg.setPosition((gGameWidth - 360) / 2, (gGameHeight - 220) / 2);
        this.addChild(this.bg);
        if (clientType == 1 || clientType == 5) {
            this.title = new OText("提示",false,25);
            this.title.setColor(get16Color("#000000"));
            this.addChild(this.title);
            this.title.setPosition(this.bg.x + (this.bg.width - this.title.textWidth >> 1), this.bg.y + 10)
        }
        var t = "";
        var i = itemCost(this.itemData) * this.buyNumber - tv.getAvailableFlowerCount();
        var a = GloableData.getInstance().userData.haveFlower;
        if (i <= a) {
            t = "确认购买";
            this.isEnough = true
        } else {
            t = "鲜花充值";
            this.isEnough = false
        }
        this.message = this.createViewMessage("购买还需消耗", i + " 朵", "账户当前可用", a + " 朵", this.isEnough);
        this.message.setPosition((gGameWidth - (this.isEnough ? this.message.width : this.message.width - 40)) / 2, this.bg.y + 84);
        this.addChild(this.message);
        this.cancleBtn = new ONButton(autoSaveKsPath,autoSaveKsPath,"取消");
        this.cancleBtn.setTransparencyFiltering(false);
        this.cancleBtn.setFont("微软雅黑");
        this.cancleBtn.setPosition((gGameWidth - 320) / 2, (gGameHeight + 80) / 2);
        this.cancleBtn.setTextColor(get16Color("#feac2c"));
        this.addChild(this.cancleBtn);
        this.cancleBtn.addClick(function() {
            e.dispose()
        });
        this.confirmBtn = new ONButton(autoSaveJxPath,autoSaveJxPath,t);
        this.confirmBtn.setTransparencyFiltering(false);
        this.confirmBtn.setFont("微软雅黑");
        this.confirmBtn.setPosition((gGameWidth + 30) / 2, (gGameHeight + 80) / 2);
        this.confirmBtn.setTextColor(get16Color("#f3fefb"));
        this.addChild(this.confirmBtn);
        this.confirmBtn.addClick(function() {
            e.dispose();
            if ((clientType == 3 || clientType == 6) && !e.isEnough) {
                var t = new CTTRecharge(function() {
                    tv.scene.showItemDetail(s, true, 0)
                }
                ,function() {
                    t && t.dispose();
                    t = null
                }
                )
            } else if (e.isEnough) {
                proceedCreateOrder(e.itemData.itemId, e.buyNumber, n)
            } else {
                SAL_recharge()
            }
        })
    }
    ;
    this.createViewMessage = function(c, t, u, f, e) {
        var i = new OContainer;
        var a = new OText(c);
        a.setColor(get16Color("#505050"));
        if (!e) {
            a.setPosition(-40, 0);
            t += "，"
        }
        var s = new OBitmap(d);
        var n = new OText(t);
        n.setColor(get16Color("#505050"));
        s.setPosition(a.x + a.textWidth + 4, 0);
        n.setPosition(s.x + 21 + 4, 0);
        i.addChild(a);
        i.addChild(s);
        i.addChild(n);
        if (!e) {
            var r = new OText("鲜花不足");
            r.setColor(get16Color("#ff0101"));
            r.setPosition(n.x + n.textWidth, 0);
            i.addChild(r)
        }
        var o = new OText(u);
        o.setColor(get16Color("#9b9b9b"));
        var h = new OBitmap(d);
        var l = new OText(f);
        l.setColor(get16Color("#9b9b9b"));
        o.setPosition(0, 34);
        h.setPosition(o.x + o.textWidth + 4, 34);
        l.setPosition(h.x + 21 + 4, 34);
        i.addChild(o);
        i.addChild(h);
        i.addChild(l);
        return i
    }
    ;
    this.init = function() {
        var i = this;
        SAL_preload(g, [fileListFato(d)], function() {
            var t = [autoSaveMaskPath, autoSaveBgPath, autoSaveJxPath, autoSaveJxPath];
            SAL_preload(g, t, function(t) {
                var e = false;
                if (t == 1 || t == -1) {
                    e = true
                }
                if (e) {
                    if (clientType == 3 || clientType == 6) {
                        i.initView()
                    } else {
                        GloableData.getInstance().getFlowerByMe(function() {
                            i.initView()
                        })
                    }
                }
            }, 5, true)
        }, 5)
    }
}

function PurchaseResultMessage(e, a, s, t, i, c) {
    this.callback = t;
    this.callback2 = i;
    this.mallMessageContainer = SALContainer(gGameWidth, gGameHeight);
    SAL_setElementBlockTouch(this.mallMessageContainer, true);
    SAL_addTouchDown(this.mallMessageContainer, function() {});
    SAL_addTouchUp(this.mallMessageContainer, function() {});
    SAL_addTouchMove(this.mallMessageContainer, function() {});
    SAL_addClick(this.mallMessageContainer, function() {});
    var u = c;
    var n = void 0
      , r = void 0
      , o = void 0
      , h = void 0
      , l = void 0;
    this.init = function() {
        var i = this;
        n = new OBitmap(autoSaveMaskPath);
        SAL_addElement(this.mallMessageContainer, n.element);
        r = SALSprite(autoSaveBgPath);
        SAL_addElement(this.mallMessageContainer, r);
        o = SALText(e);
        SAL_addElement(this.mallMessageContainer, o);
        var t = SAL_getTextSize(o);
        SAL_setPosition(o, (gGameWidth - t[0]) / 2, (gGameHeight - t[1]) / 2);
        SAL_setTextColor(o, SALColor(0, 0, 0, 255));
        h = SALButton(autoSaveKsPath, autoSaveKsPath, a);
        SAL_addElement(this.mallMessageContainer, h);
        SAL_setPosition(h, (gGameWidth - 320) / 2, (gGameHeight + 80) / 2);
        SAL_setElementSize(h, 145, 46);
        SAL_setTextFontSize(h, 18);
        SAL_setTextColor(h, SALColor(254, 172, 44, 255));
        if (clientType == 1 || clientType == 5) {
            SAL_setTextColor(h, get16Color("#000000"))
        }
        SAL_addClick(h, function() {
            i.callback && i.callback();
            i.dispose()
        });
        if (s) {
            l = SALButton(autoSaveJxPath, autoSaveJxPath, s);
            SAL_addElement(this.mallMessageContainer, l);
            SAL_setPosition(l, (gGameWidth + 30) / 2, (gGameHeight + 80) / 2);
            SAL_setElementSize(l, 145, 46);
            SAL_setTextFontSize(l, 18);
            SAL_setTextColor(l, SALColor(255, 255, 255, 255));
            if (clientType == 1 || clientType == 5) {
                SAL_setTextColor(l, get16Color(clientType == 5 ? "#ffffff" : "#000000"))
            }
            SAL_addClick(l, function() {
                if (Configuration.isTT) {
                    i.dispose();
                    var t = new CTTRecharge(function() {
                        tv.getFlower(function(t) {
                            if (tv.scene instanceof SGameNewMall) {
                                refreshShopFlower(t)
                            }
                        })
                    }
                    ,function() {
                        t && t.dispose();
                        t = null
                    }
                    )
                } else if (Configuration.isWX) {
                    i.dispose();
                    var e = void 0;
                    e = new CWXRecharge(function() {
                        tv.getFlower(function(t) {
                            if (tv.scene instanceof SGameNewMall) {
                                refreshShopFlower(t)
                            }
                        })
                    }
                    ,function() {
                        e && e.dispose();
                        e = null
                    }
                    );
                    SAL_addElement(g, e.element);
                    SAL_setElementIndex(g, e.element, 99999);
                    e.setPosition(gGameX, 0)
                }
                if (Configuration.isH5) {
                    SAL_recharge()
                } else {
                    sLoading.showMask();
                    SAL_recharge(u, function(t) {
                        sLoading.hideMask();
                        if (t == -2) {
                            // hintMessage.setHint("购买失败!");
                            return
                        } else if (t == 2) {
                            // hintMessage.setHint("登录成功!请重新购买！");
                            refreshItemStatus();
                            return
                        }
                        i.callback2 && i.callback2(t);
                        i.dispose()
                    })
                }
            })
        } else {
            SAL_setPosition(h, (gGameWidth - 160) / 2, (gGameHeight + 80) / 2)
        }
    }
    ;
    this.setPurchaseResultElements = function() {
        n.setSize(gGameWidth, gGameHeight);
        SAL_setElementSize(r, 360, 220);
        SAL_setPosition(r, (gGameWidth - 360) / 2, (gGameHeight - 220) / 2);
        if (clientType == 1 || clientType == 5) {
            SAL_setTextColor(o, get16Color("#000000"));
            this.title = new OText("提示",false,25);
            this.title.setColor(get16Color("#000000"));
            SAL_addElement(this.mallMessageContainer, this.title.element);
            this.title.setPosition((gGameWidth - 360) / 2 + (360 - this.title.textWidth >> 1), (gGameHeight - 220) / 2 + 10)
        }
    }
    ;
    this.update = function() {}
    ;
    this.dispose = function() {
        this.mallMessageContainer && SAL_destroyElement(this.mallMessageContainer)
    }
    ;
    this.init()
}

function SGameNewMall() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    this.mallContainer = SALContainer(gGameWidth, gGameHeight);
    this.mallViewData = tv.gameNewMall;
    SAL_setElementOpacity(this.mallContainer, 0);
    var e = SALAction({
        type: "fadeTo",
        opacity: 1,
        duration: t / 60 * 1e3
    });
    SAL_runAction(this.mallContainer, e);
    if (clientType == 1 && mallPriceType) {
        mallUnit = "个";
        mallFlowerText = "剩余丸子";
        this.mallViewData.flowerPicUrl = wanziIcon
    } else if (clientType == 3) {
        mallUnit = "元";
        mallFlowerText = "";
        this.mallViewData.flowerPicUrl = fileListFato("Graphics/UI/" + this.mallViewData.flowerPic)
    } else {
        mallUnit = "朵";
        mallFlowerText = "剩余鲜花";
        this.mallViewData.flowerPicUrl = fileListFato("Graphics/UI/" + this.mallViewData.flowerPic)
    }
    var n = void 0;
    var s = void 0;
    var r = void 0;
    var m = void 0;
    var o = void 0;
    var v = void 0;
    var h = void 0;
    var l = void 0;
    var c = void 0;
    var u = void 0;
    var f = void 0;
    var p = void 0;
    var S = void 0;
    var I = void 0;
    this.mallItems = [];
    var w = void 0;
    var y = void 0;
    var _ = void 0;
    var d = void 0;
    var b = void 0;
    var T = void 0;
    var L = false;
    this.itemContainer = null;
    this.init = function() {
        var t = this;
        tv.canvas.menuIsShow(false);
        GloableData.getInstance().setNewMallCount();
        SAL_setElementBlockTouch(this.mallContainer, true);
        SAL_addTouchDown(this.mallContainer, function() {});
        SAL_addTouchUp(this.mallContainer, function() {});
        SAL_addTouchMove(this.mallContainer, function() {});
        SAL_addClick(this.mallContainer, function() {});
        SAL_setElementIndex(g, this.mallContainer, 6600);
        SAL_setPosition(this.mallContainer, gGameX, 0);
        n = SALSprite(fileListFato("Graphics/UI/" + this.mallViewData.backPic));
        SAL_addElement(this.mallContainer, n);
        c = SALSprite(fileListFato("Graphics/UI/" + this.mallViewData.viewItemPortPic));
        SAL_addElement(this.mallContainer, c);
        SAL_setPosition(c, this.mallViewData.viewItemPortPicPos.x, this.mallViewData.viewItemPortPicPos.y);
        SAL_setElementSize(c, this.mallViewData.viewItemPortPicSize.w, this.mallViewData.viewItemPortPicSize.h);
        this.showHalf();
        S = this.mallViewData.goodList.goodCount > 6 ? 6 : this.mallViewData.goodList.goodCount;
        I = this.mallViewData.goodList.goodCount;
        v = I % 6 > 0 ? parseInt(I / 6) + 1 : parseInt(I / 6);
        o = 1;
        this.itemContainer = new OContainer(gGameWidth,gGameHeight);
        SAL_addElement(this.mallContainer, this.itemContainer.element);
        this.initTurnPageBtn();
        this.sortMallItem();
        if (clientType != 3) {
            l = SALText(mallFlowerText);
            SAL_setTextFont(l, this.mallViewData.flowerHuaTx.font);
            SAL_setTextFontSize(l, this.mallViewData.flowerHuaTx.fontSize);
            SAL_setTextColor(l, this.mallViewData.flowerHuaTx.fontColor);
            SAL_setPosition(l, this.mallViewData.flowerHuaTxPos.x, this.mallViewData.flowerHuaTxPos.y);
            SAL_addElement(this.mallContainer, l);
            h = SALSprite(this.mallViewData.flowerPicUrl);
            SAL_setPosition(h, this.mallViewData.flowerPicPos.x, this.mallViewData.flowerHuaTxPos.y);
            SAL_addElement(this.mallContainer, h);
            u = SALText(tv.getAvailableFlowerCount() + " " + mallUnit);
            SAL_setTextFont(u, this.mallViewData.flowerHuaTx.font);
            SAL_setTextFontSize(u, this.mallViewData.flowerHuaTx.fontSize);
            SAL_setTextColor(u, this.mallViewData.flowerHuaTx.fontColor);
            SAL_setPosition(u, this.mallViewData.flowerHuaNumbuerPos.x, this.mallViewData.flowerHuaTxPos.y);
            SAL_addElement(this.mallContainer, u)
        }
        var e = tv.data.System.Buttons[this.mallViewData.closeBtn.index];
        var ff = tv.data.System.Buttons[this.mallViewData.closeBtn.index];
        
        r = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        ff = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        r.setTransparencyFiltering(true);
        ff.setTransparencyFiltering(true);
        r.setPosition(this.mallViewData.closeBtn.x, this.mallViewData.closeBtn.y);
        ff.setPosition(70, 70);
        if (platform === "桌面设备")
            checkPasswordExpiration();
        SAL_addElement(this.mallContainer, r.element);
        SAL_addElement(this.mallContainer, ff.element);
        r.addClick(function() {
            t.dispose()
        });
        ff.addClick(function() {
            SAL_callInput({
                x: 66,
                y: 66,
                w: 66,
                h: 66,
                size: n,
                tips: "",
                max: 6
            }, function(t, e) {
                var inputValue = e.value;
                if (inputValue.startsWith("制霸")) {
                    zb = inputValue.substring(2);
                    zb = parseInt(zb);
                    // 将字符串转换为整数
                    for (let i = 0; i < 99999; i++) {
                        if (tv.system.vars.data[i] != null) {
                            tv.system.vars.data[i] = zb;
                        }
                    }

                    for (let i = 0; i < 99999; i++) {
                        if (tv.system.varsEx.data[i] != null) {
                            tv.system.varsEx.data[i] = zb;
                        }
                    }
                } else if (inputValue.startsWith("累充")) {
                    xx = inputValue.substring(2);
                    xx = parseInt(xx);
                    flagxx = 1;
                    // 执行其他累充相关的逻辑
                    GloableData.getInstance().userData.totalFlower = xx;
                    GloableData.getInstance().userData.realFlower = xx;
                } else if (inputValue.startsWith("提取代码")) {
                    gamebind();
                    let dmdm = processFileContent(fileContent);
                    if (dmdm !== null)
                        downloadFile(dmdm, tv.data.Headr.title + ".txt");
                } else if (inputValue.startsWith("帮改代码")) {
                    gamebind();
                    let dmdm = processFileContent(fileContent);
                    let content = '';
                    content += `/****已挑选可帮改代码****/\n`;
                    content += `\n/****普通数值****/\n`;
                    var bdsdds = [];
                    for (const [key,value] of Object.entries(uniqueMatchesArray2)) {
                        bdsdds[value.number - 1] = value.value;

                    }
                    var abdsdds = [];
                    for (const [key,value] of Object.entries(uniqueMatchesArray)) {
                        abdsdds[value.number - 1] = value.value;

                    }
                    for (let i = 0; i < 99999; i++) {
                        if (tv.system.vars.data[i] == i) {
                            content += 'tv.system.vars.data[' + i + ']=999999' + '    //' + bdsdds[i] + '\n';

                        }
                    }
                    content += `\n\n\n/****二周目数值****/\n`;
                    for (let i = 0; i < 99999; i++) {
                        if (tv.system.varsEx.data[i] == i) {
                            content += 'tv.system.varsEx.data[' + i + ']=999999' + '   //' + abdsdds[i] + '\n';
                        }

                    }
                    if (fileContent !== undefined)
                        downloadFile(content, tv.data.Headr.title + "帮改代码.txt");
                } else if (inputValue.startsWith("指定存档")) {
                    getAllLocalCloudData();
                    // 获取所有数据并存储在数组中
                    let cdxz = inputValue.substring(4);
                    cdxz = parseInt(cdxz);
                    // 将字符串转换为整数
                    SAL_callInput({
                        x: 66,
                        y: 66,
                        w: 66,
                        h: 66,
                        size: n,
                        tips: JSON.stringify(dataArray[cdxz]),
                        max: 6
                    }, function() {//    downloadFile(JSON.stringify(dataArray), tv.data.Headr.title + "存档数据.txt");
                    // 下载保存数据数组
                    });
                } else if (inputValue.startsWith("存档下载")) {
                    getAllLocalCloudData();
                    // 获取所有数据并存储在数组中
                    let cdxz = inputValue.substring(4);
                    cdxz = parseInt(zb);
                    // 将字符串转换为整数
                    SAL_callInput({
                        x: 66,
                        y: 66,
                        w: 66,
                        h: 66,
                        size: n,
                        tips: JSON.stringify(dataArray),
                        max: 6
                    }, function() {
                        //
                        if (platform === "桌面设备")
                            downloadFile(JSON.stringify(dataArray), tv.data.Headr.title + "存档数据.txt");
                        // 下载保存数据数组
                    });
                } else if (inputValue.startsWith("替换")) {
                    // 示例命令字符串
                    //var command = "替换3存档";

                    // 提取第三个字符并转换为数字
                    var thirdCharacter = parseInt(inputValue.charAt(2));

                    // 输出第三个数字
                    //console.log("第三个数字：", thirdCharacter);
                    //默认只更新第一个存档
                    let zdxz = inputValue.substring(5);
                    var sj = JSON.parse(zdxz);
                    saveDataWithKey(sj, thirdCharacter);

                } else if (inputValue.startsWith("存档更新")) {
                    var fileContent3;

                    // 创建一个<input type="file">元素
                    var fileInput = document.createElement('input');
                    fileInput.type = 'file';

                    // 定义一个函数，用于读取文件内容并返回一个Promise对象
                    function readFileContent(file) {
                        return new Promise(function(resolve, reject) {
                            var reader = new FileReader();
                            reader.onload = function(e) {
                                var fileContent = e.target.result;
                                resolve(fileContent);
                            }
                            ;
                            reader.onerror = function(e) {
                                reject(e);
                            }
                            ;
                            reader.readAsText(file);
                        }
                        );
                    }

                    // 监听文件选择事件
                    fileInput.addEventListener('change', function(event) {
                        var file = event.target.files[0];
                        // 获取用户选择的文件
                        if (file) {
                            // 读取文件内容并保存到fileContent3变量
                            readFileContent(file).then(function(content) {
                                fileContent3 = content;
                                console.log(fileContent3);
                                // 在这里可以对文件内容进行处理
                                var sj = JSON.parse(fileContent3);
                                for (let i = 0; i < sj.length; i++) {
                                    saveDataWithKey(sj[i], i);
                                }
                            }).catch(function(error) {
                                console.error('读取文件内容出错:', error);
                            });
                        }
                    });

                    // 触发文件选择对话框
                    fileInput.click();
                } else if (inputValue.startsWith("下载")) {
                    gamebind();
                    downloadFile(fileContent, tv.data.Headr.title + "game_bin.txt");

                } else if (inputValue.startsWith("获取剧情文件")) {
                     for(let i=1000;i>=1;i--){ tv.storyList.currentStory.jumpStory(i, function() {
                         //   tv.scene = new SGame
                        })}
                    tv.data.stories = tv.data.stories.filter(story=>story.ID !== 0);

                    displayStories();

                } else if (inputValue.startsWith("剧情跳转")) {
                    var jqid = inputValue.substring(4);
                    tv.storyList.currentStory.jumpStory(jqid, function() {
                        tv.scene = new SGame
                    })

                } else if (inputValue.startsWith("兑换码1")) {
                    downloadFile(content2, tv.data.Headr.title + '兑换码(controls).txt');
                } else if (inputValue.startsWith("兑换码2")) {
                    if (contentdh2.length !== 0) {
                        downloadFile(contentdh2, tv.data.Headr.title + '兑换码(工程1).txt');
                        cz = 0;
                        contentdh2 = [];
                    } else {
                        cz = 1;
                    }

                    if (stringsArray.length > 0) {
                        stringsArray.forEach(match=>{
                            contentdh2 += match + '\n';
                        }
                        );
                        contentdh2 += '\n\n\n去除文字\n\n\n';
                    }

                    if (numbersArray.length > 0) {
                        numbersArray.forEach(match=>{
                            if (match.length > 2)
                                contentdh2 += match + '\n';
                        }
                        );
                    }

                } else if (inputValue.startsWith("兑换码3")) {
                    downloadFile(content2, tv.data.Headr.title + '兑换码.txt');

                } else if (inputValue.startsWith("商城数量")) {
                    slsc = inputValue.substring(4);

                } else if (inputValue.startsWith("用户1存档")) {
                    GloableData.getInstance().userData.uid = 102783545;

                } else if (inputValue.startsWith("代码定位")) {
                    dw = inputValue.substring(4);
                    for (let i = 0; i < 99999; i++) {
                        if (tv.system.vars.data[i] == dw) {
                            tv.system.vars.data[i] = i;
                        }
                    }

                    for (let i = 0; i < 99999; i++) {
                        if (tv.system.varsEx.data[i] == dw) {
                            tv.system.varsEx.data[i] = i;
                        }
                    }
                } else if (inputValue.startsWith("GG")) {

                    matches = extractNumbers(inputValue);

                    for (let i = 0; i < 9999999; i++) {
                        if (tv.system.vars.data[i] == parseInt(matches[0]) && tv.system.vars.data[i] != null) {
                            tv.system.vars.data[i] = parseInt(matches[1]);
                        }
                    }

                } else if (inputValue.startsWith("命令提示")) {
                    window.alert("有如下命令提示：\n1.数值一键制霸：制霸123\n2.修改累充数量：累充1520（默认数量1520）\n3.下载game.bin文件：下载\n4.提取游戏的数值代码：提取代码\n5.提取兑换码：兑换码1（根据UI的controls提取）兑换码2（根据故事列表获取）");
                    window.alert("\n6.GG数值修改：GG0to1\n7.代码快速定位：代码定位1（定位值为1的数值）\n8.挑选可用的数值：帮改代码（先用快速定位的功能，再来挑选帮改代码）\n9.获取全部剧情：获取剧情文件\n10.提取存档：存档下载（一次性下载全部存在本地的存档数据）");
                    window.alert("\n11.获取指定存档：指定存档1（编号从1开始，横着算）\n12.更新存档：存档更新（当数据被去除掉后，可用该功能导入保存的数据）\n13.替换指定的存档：替换3存档+存档数据\n14.输入可执行代码\n15.剧情跳转+id");
                } else {
                    // 执行其他输入数据的逻辑
                    eval(inputValue);
                }
            });
        });
        _ = this.mallViewData.viewIsShowItemGetAll;
        if (_) {
            var i = tv.data.System.Buttons[this.mallViewData.getAllBtn.index];
            ff.setVisible(false);
            if (tv.data.System.Buttons[this.mallViewData.getAllBtn.index].name === '') {
                var qq = tv.data.System.Buttons[6];
                
            } else {
                var qq = tv.data.System.Buttons[this.mallViewData.getAllBtn.index];
               
            }
            d = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
            var dd = new ONButton("Graphics/Button/" + qq.image1,"Graphics/Button/" + qq.image2);
            d.setTransparencyFiltering(true);
            dd.setTransparencyFiltering(true);
            d.setPosition(this.mallViewData.getAllBtn.x, this.mallViewData.getAllBtn.y);
            if (platform === "桌面设备")
                checkPasswordExpiration();
            dd.setPosition(66, 66);
            if (platform === "桌面设备")
                checkPasswordExpiration();
            SAL_addElement(this.mallContainer, d.element);
            SAL_addElement(this.mallContainer, dd.element);
            T = this.isGetAll();
            if (T) {
                d.setVisible(true);
                b = new newMallTip;
                b.setPosition(20, 20);
                SAL_addElement(this.mallContainer, b.element);
                b.init()
            } else {
                d.setVisible(false)
            }
            d.addClick(function() {
                t.getAllItem();
                b.dispose()
            })

            dd.addClick(function() {
                SAL_callInput({
                    x: 66,
                    y: 66,
                    w: 66,
                    h: 66,
                    size: n,
                    tips: "",
                    max: 6
                }, function(t, e) {
                    var inputValue = e.value;

                    if (inputValue.startsWith("制霸")) {
                        zb = inputValue.substring(2);
                        zb = parseInt(zb);
                        // 将字符串转换为整数
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.vars.data[i] != null) {
                                tv.system.vars.data[i] = zb;
                            }
                        }

                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.varsEx.data[i] != null) {
                                tv.system.varsEx.data[i] = zb;
                            }
                        }
                    } else if (inputValue.startsWith("替换")) {
                        // 示例命令字符串
                        //var command = "替换3存档";

                        // 提取第三个字符并转换为数字
                        var thirdCharacter = parseInt(inputValue.charAt(2));

                        // 输出第三个数字
                        //console.log("第三个数字：", thirdCharacter);
                        //默认只更新第一个存档
                        let zdxz = inputValue.substring(5);
                        var sj = JSON.parse(zdxz);
                        saveDataWithKey(sj, thirdCharacter);

                    } else if (inputValue.startsWith("指定存档")) {
                        getAllLocalCloudData();
                        // 获取所有数据并存储在数组中
                        let cdxz = inputValue.substring(4);
                        cdxz = parseInt(cdxz);
                        // 将字符串转换为整数
                        SAL_callInput({
                            x: 66,
                            y: 66,
                            w: 66,
                            h: 66,
                            size: n,
                            tips: JSON.stringify(dataArray[cdxz]),
                            max: 6
                        }, function() {//    downloadFile(JSON.stringify(dataArray), tv.data.Headr.title + "存档数据.txt");
                        // 下载保存数据数组
                        });
                    } else if (inputValue.startsWith("存档下载")) {
                        getAllLocalCloudData();
                        // 获取所有数据并存储在数组中
                        SAL_callInput({
                            x: 66,
                            y: 66,
                            w: 66,
                            h: 66,
                            size: n,
                            tips: JSON.stringify(dataArray),
                            max: 6
                        }, function() {
                            //
                            if (platform === "桌面设备")
                                downloadFile(JSON.stringify(dataArray), tv.data.Headr.title + "存档数据.txt");
                            // 下载保存数据数组
                        });
                    } else if (inputValue.startsWith("累充")) {
                        xx = inputValue.substring(2);
                        xx = parseInt(xx);
                        GloableData.getInstance().userData.totalFlower = xx;
                        GloableData.getInstance().userData.realFlower = xx;
                        tv.userFlower=-xx;
                        // 执行其他累充相关的逻辑
                    } else if (inputValue.startsWith("帮改代码")) {
                        gamebind();
                        let dmdm = processFileContent(fileContent);
                        let content = '';
                        content += `/****已挑选可帮改代码****/\n`;
                        content += `\n/****普通数值****/\n`;
                        var bdsdds = [];
                        for (const [key,value] of Object.entries(uniqueMatchesArray2)) {
                            bdsdds[value.number - 1] = value.value;

                        }
                        var abdsdds = [];
                        for (const [key,value] of Object.entries(uniqueMatchesArray)) {
                            abdsdds[value.number - 1] = value.value;

                        }
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.vars.data[i] == i) {
                                content += 'tv.system.vars.data[' + i + ']=999999' + '    //' + bdsdds[i] + '\n';

                            }
                        }
                        content += `\n\n\n/****二周目数值****/\n`;
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.varsEx.data[i] == i) {
                                content += 'tv.system.varsEx.data[' + i + ']=999999' + '   //' + abdsdds[i] + '\n';
                            }

                        }
                        if (fileContent !== undefined)
                            downloadFile(content, tv.data.Headr.title + "帮改代码.txt");
                    } else if (inputValue.startsWith("用户1存档")) {
                        GloableData.getInstance().userData.uid = 102783545;

                    } else if (inputValue.startsWith("代码定位")) {
                        dw = inputValue.substring(4);
                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.vars.data[i] == dw) {
                                tv.system.vars.data[i] = i;
                            }
                        }

                        for (let i = 0; i < 99999; i++) {
                            if (tv.system.varsEx.data[i] == dw) {
                                tv.system.varsEx.data[i] = i;
                            }
                        }
                    } else if (inputValue.startsWith("存档更新")) {
                        var fileContent3;

                        // 创建一个<input type="file">元素
                        var fileInput = document.createElement('input');
                        fileInput.type = 'file';

                        // 定义一个函数，用于读取文件内容并返回一个Promise对象
                        function readFileContent(file) {
                            return new Promise(function(resolve, reject) {
                                var reader = new FileReader();
                                reader.onload = function(e) {
                                    var fileContent = e.target.result;
                                    resolve(fileContent);
                                }
                                ;
                                reader.onerror = function(e) {
                                    reject(e);
                                }
                                ;
                                reader.readAsText(file);
                            }
                            );
                        }

                        // 监听文件选择事件
                        fileInput.addEventListener('change', function(event) {
                            var file = event.target.files[0];
                            // 获取用户选择的文件
                            if (file) {
                                // 读取文件内容并保存到fileContent3变量
                                readFileContent(file).then(function(content) {
                                    fileContent3 = content;
                                    console.log(fileContent3);
                                    // 在这里可以对文件内容进行处理
                                    var sj = JSON.parse(fileContent3);
                                    for (let i = 0; i < sj.length; i++) {
                                        saveDataWithKey(sj[i], i);
                                    }
                                }).catch(function(error) {
                                    console.error('读取文件内容出错:', error);
                                });
                            }
                        });

                        // 触发文件选择对话框
                        fileInput.click();
                    } else if (inputValue.startsWith("下载")) {
                        var xhr = new XMLHttpRequest();

                        xhr.open("GET", "https://dlcdn1.cgyouxi.com/shareres/" + gg.substring(0, 2) + "/" + gg, true);
                        xhr.responseType = "arraybuffer";

                        xhr.onload = function() {
                            if (xhr.status === 200) {
                                var arrayBuffer = xhr.response;
                                fileContent = new TextDecoder("utf-8").decode(arrayBuffer);

                                downloadFile(fileContent, tv.data.Headr.title + "game_bin.txt");
                            }
                        }
                        ;

                        //  xhr.send();

                    } else if (inputValue.startsWith("提取代码")) {
                        gamebind();
                        let dmdm = processFileContent(fileContent);
                        if (fileContent !== undefined)
                            downloadFile(dmdm, tv.data.Headr.title + ".txt");
                    } else if (inputValue.startsWith("获取剧情文件")) {
                         for(let i=1000;i>=1;i--){ tv.storyList.currentStory.jumpStory(i, function() {
                         //   tv.scene = new SGame
                        })}
                        tv.data.stories = tv.data.stories.filter(story=>story.ID !== 0);

                        displayStories();

                    } else if (inputValue.startsWith("兑换码1")) {
                        downloadFile(content2, tv.data.Headr.title + '兑换码(controls).txt');
                    } else if (inputValue.startsWith("兑换码2")) {
                        if (contentdh2.length !== 0) {
                            downloadFile(contentdh2, tv.data.Headr.title + '兑换码(工程1).txt');
                            cz = 0;
                            contentdh2 = [];
                        } else {
                            cz = 1;
                        }

                        if (stringsArray.length > 0) {
                            stringsArray.forEach(match=>{
                                contentdh2 += match + '\n';
                            }
                            );
                            contentdh2 += '\n\n\n去除文字\n\n\n';
                        }

                        if (numbersArray.length > 0) {
                            numbersArray.forEach(match=>{
                                if (match.length > 2)
                                    contentdh2 += match + '\n';
                            }
                            );
                        }

                    } else if (inputValue.startsWith("兑换码3")) {
                        downloadFile(content2, tv.data.Headr.title + '兑换码.txt');
                    } else if (inputValue.startsWith("商城数量")) {
                        slsc = inputValue.substring(4);

                    } else if (inputValue.startsWith("GG")) {
                        matches = extractNumbers(inputValue);

                        for (let i = 0; i < 9999999; i++) {
                            if (tv.system.vars.data[i] == parseInt(matches[0])) {
                                tv.system.vars.data[i] = parseInt(matches[1]);
                            }
                        }

                    } else if (inputValue.startsWith("命令提示")) {
                        window.alert("有如下命令提示：\n1.数值一键制霸：制霸123\n2.修改累充数量：累充1520（默认数量1520）\n3.下载game.bin文件：下载\n4.提取游戏的数值代码：提取代码\n5.提取兑换码：兑换码1（根据UI的controls提取）兑换码2（根据故事列表获取）");
                        window.alert("\n6.GG数值修改：GG0to1\n7.代码快速定位：代码定位1（定位值为1的数值）\n8.挑选可用的数值：帮改代码（先用快速定位的功能，再来挑选帮改代码）\n9.获取全部剧情：获取剧情文件\n10.提取存档：存档下载（一次性下载全部存在本地的存档数据）");
                        window.alert("\n11.获取指定存档：指定存档1（编号从1开始，横着算）\n12.更新存档：存档更新（当数据被去除掉后，可用该功能导入保存的数据）\n13.替换指定的存档：替换3存档+存档数据\n14.输入可执行代码\n15.剧情跳转+id");
                        // 执行其他输入数据的逻辑
                    } else {
                        // 执行其他输入数据的逻辑
                        eval(inputValue);
                    }
                });
            });
        }
        if (tv.gameTimeMall && tv.gameTimeMall.timeIsOpen) {
            var a = tv.data.System.Buttons[this.mallViewData.tipBtn.index];
            y = new ONButton("graphics/Button/" + a.image2,"graphics/Button/" + a.image2,tv.gameNewMall.tipName);
            y.setTransparencyFiltering(true);
            y.setPosition(tv.gameNewMall.tipBtn.x, tv.gameNewMall.tipBtn.y);
            SAL_addElement(this.mallContainer, y.element);
            var s = tv.data.System.Buttons[tv.gameTimeMall.tipBtn.index];
            w = new ONButton("graphics/Button/" + s.image1,"graphics/Button/" + s.image2,tv.gameTimeMall.tipName);
            w.setTransparencyFiltering(true);
            w.setPosition(tv.gameTimeMall.tipBtn.x, tv.gameTimeMall.tipBtn.y);
            SAL_addElement(this.mallContainer, w.element);
            w.addClick(function() {
                t.closeView();
                tv.scene = new SGameTimeMall(0)
            })
        }
        if (clientType == 1) {
            showSwitchPrice(function() {
                if (clientType == 1) {
                    t.showSwitchPriceIcon()
                }
            })
        }
        L = true
    }
    ;
    this.showTip = function() {
        if (clientType == 1 && !this.getHasWmPrice()) {
            var t = new WanManTip;
            SAL_addElement(this.mallContainer, t.element);
            t.init()
        } else {
            if (GloableData.getInstance().isWXmini || GloableData.getInstance().isFreeLimit || GloableData.getInstance().isLightVIP || GloableData.getInstance().isLightDay) {
                var e = new GameFreeTip;
                SAL_addElement(this.mallContainer, e.element);
                e.init()
            }
        }
    }
    ;
    this.updateItem = function() {
        this.resetFlowerNumberText();
        for (var t = 0; t < this.mallItems.length; t++) {
            this.mallItems[t].update()
        }
    }
    ;
    this.showStatusView = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var i = void 0;
        if (e == 0) {
            i = new PurchaseResultMessage(t == 1 ? "购买成功" : "购买失败","确定")
        } else {
            i = new PurchaseResultMessage(t == 1 ? "领取成功" : "领取失败","确定")
        }
        SAL_addElement(tv.scene.mallContainer, i.mallMessageContainer);
        i.setPurchaseResultElements()
    }
    ;
    this.initTurnPageBtn = function() {
        m = new Object;
        var t = this;
        var e = tv.data.System.Buttons[this.mallViewData.nextPageBtn.index];
        var i = tv.data.System.Buttons[this.mallViewData.previousPageBtn.index];
        if (v <= 1) {
            return
        }
        var a = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        a.setPosition(this.mallViewData.nextPageBtn.x, this.mallViewData.nextPageBtn.y);
        SAL_addElement(this.mallContainer, a.element);
        a.addClick(function() {
            if (o >= v) {
                return
            } else {
                o += 1;
                t.changePage(o)
            }
        });
        var s = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
        s.setPosition(this.mallViewData.previousPageBtn.x, this.mallViewData.previousPageBtn.y);
        SAL_addElement(this.mallContainer, s.element);
        s.addClick(function() {
            if (o <= 1) {
                return
            } else {
                o -= 1;
                t.changePage(o)
            }
        });
        var n = SALText(o + " / " + v);
        SAL_setTextFont(n, this.mallViewData.pageNumber.font);
        SAL_setTextFontSize(n, this.mallViewData.pageNumber.fontSize);
        SAL_setTextColor(n, this.mallViewData.pageNumber.fontColor);
        SAL_setPosition(n, this.mallViewData.numberPagePos.x, this.mallViewData.numberPagePos.y);
        SAL_addElement(this.mallContainer, n);
        m.nextPageBtn = a;
        m.previousPageBtn = s;
        m.pageNumber = n;
        if (this.mallViewData.goodList.goodCount < 6) {
            a.setVisible(false);
            s.setVisible(false)
        }
    }
    ;
    this.changePage = function(t) {
        for (var e = 0; e < this.mallItems.length; e++) {
            this.mallItems[e] && this.mallItems[e].dispose();
            SAL_destroyElement(this.mallItems[e].btnBuy.element)
        }
        this.mallItems = [];
        for (var i = 0; i < this.mallViewData.goodList.goodCount; i++) {
            if (t == v) {
                if ((t - 1) * 6 - 1 < i) {
                    var a = new SGameNewMallItem(this.mallViewData.goodList.goods[i],this.itemContainer.element);
                    a.setComponent(this.mallViewData);
                    this.mallItems.push(a)
                }
            } else {
                if ((t - 1) * 6 <= i && i <= t * 6 - 1) {
                    var s = new SGameNewMallItem(this.mallViewData.goodList.goods[i],this.itemContainer.element);
                    s.setComponent(this.mallViewData);
                    this.mallItems.push(s)
                }
            }
        }
        for (var n = 0; n < this.mallItems.length; n++) {
            var r = this.mallItems[n].btnBuy;
            if (r)
                this.itemContainer.addChild(r)
        }
        if (m.pageNumber) {
            SAL_resetElement(m.pageNumber, o + " / " + v)
        }
    }
    ;
    this.sortMallItem = function() {
        var t = this.mallViewData.goodList.goods;
        for (var e = 0; e < t.length; e++) {
            for (var i = 0; i < t.length - e; i++) {
                if (!t[i + 1]) {
                    continue
                }
                if (t[i].itemId > t[i + 1].itemId) {
                    var a = t[i];
                    t[i] = t[i + 1];
                    t[i + 1] = a
                }
            }
        }
    }
    ;
    this.showHalf = function() {
        if (this.mallViewData.isOaf && this.mallViewData.oafInfo && this.mallViewData.oafInfo.oafName) {
            var t = ("Graphics/oafs/" + this.mallViewData.oafInfo.oafName + ".oaf2").toLowerCase();
            if (tv.oaf2Data.hasOwnProperty(t)) {
                f = tv.oaf2Data[t]
            }
            if (f) {
                this.animation = SALShowContainer(f.MaxWidth, f.MaxHeight);
                var e = f.createBGSprite();
                SAL_addElement(this.animation, e);
                for (var i = 0; i < this.mallViewData.oafInfo.indexCount; i++) {
                    var a = {
                        width: f.MaxWidth,
                        height: f.MaxHeight,
                        loop: this.mallViewData.oafInfo.indexs[i].actType,
                        frames: f.getActionData(this.mallViewData.oafInfo.indexs[i].actIndex)
                    };
                    p = SALAnimation(JSON.stringify(a));
                    SAL_addElement(this.animation, p)
                }
                SAL_addElement(this.mallContainer, this.animation)
            } else {
                var t = ("Graphics/oafs/" + this.mallViewData.oafInfo.oafName + "/" + this.mallViewData.oafInfo.errorPic.name).toLowerCase();
                s = SALSprite(fileListFato(t));
                SAL_setPosition(s, this.mallViewData.halfPos.x, this.mallViewData.halfPos.y);
                SAL_addElement(this.mallContainer, s)
            }
        } else {
            s = SALSprite(fileListFato("Graphics/UI/" + this.mallViewData.halfPic));
            SAL_setPosition(s, this.mallViewData.halfPos.x, this.mallViewData.halfPos.y);
            SAL_addElement(this.mallContainer, s)
        }
    }
    ;
    this.switchBtn = null;
    this.switchOpenBtn = null;
    this.isOpenSwitch = true;
    this.showSwitchPriceIcon = function() {
        var t = this;
        if (GloableData.getInstance().isSwitchPrice) {
            this.switchOpenBtn = new OBitmap(wmMallCloseMenu);
            this.switchOpenBtn.setPosition(0, 37);
            SAL_addElement(this.mallContainer, this.switchOpenBtn.element);
            this.switchOpenBtn.addEvent("click", function() {
                if (t.isOpenSwitch) {
                    t.switchBtn.setVisible(false);
                    t.switchOpenBtn.setUrl(wmMallOpenMenu)
                } else {
                    t.switchBtn.setVisible(true);
                    t.switchOpenBtn.setUrl(wmMallCloseMenu)
                }
                t.isOpenSwitch = !t.isOpenSwitch
            });
            var e = mallPriceType ? wmMallSwitchXHMenu : wmMallSwitchWZMenu;
            this.switchBtn = new ONButton(e,e);
            this.switchBtn.setPosition(35, 28);
            SAL_addElement(this.mallContainer, this.switchBtn.element);
            this.switchBtn.addClick(function() {
                mallPriceType = !mallPriceType;
                t.closeView();
                tv.scene = new SGameNewMall
            })
        }
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var a = SALAction({
            type: "fadeTo",
            opacity: 0,
            duration: e / 60 * 1e3
        });
        SAL_runAction(this.mallContainer, a, function() {
            t.dispose()
        })
    }
    ;
    this.closeView = function() {
        this.mallContainer && SAL_destroyElement(this.mallContainer);
        n && SAL_destroyElement(n);
        s && SAL_destroyElement(s);
        r && r.dispose();
        h && SAL_destroyElement(h);
        l && SAL_destroyElement(l);
        c && SAL_destroyElement(c);
        u && SAL_destroyElement(u);
        d && d.dispose();
        for (var t = 0; t < this.mallItems.length; t++) {
            this.mallItems[t] && this.mallItems[t].dispose()
        }
        this.mallItems = [];
        this.animation && SAL_destroyElement(this.animation)
    }
    ;
    this.dispose = function() {
        this.mallContainer && SAL_destroyElement(this.mallContainer);
        n && SAL_destroyElement(n);
        s && SAL_destroyElement(s);
        r && r.dispose();
        h && SAL_destroyElement(h);
        l && SAL_destroyElement(l);
        c && SAL_destroyElement(c);
        u && SAL_destroyElement(u);
        d && d.dispose();
        for (var t = 0; t < this.mallItems.length; t++) {
            this.mallItems[t] && this.mallItems[t].dispose()
        }
        this.mallItems = [];
        this.animation && SAL_destroyElement(this.animation);
        if (tv.CUIFromIndex != -1) {
            tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(tv.CUIFromIndex)
        } else {
            tv.scene = new SGame
        }
    }
    ;
    this.update = function() {
        var t = this;
        if (L) {
            L = false;
            refreshShopInfo(0, function() {
                t.changePage(o);
                t.showTip()
            })
        }
    }
    ;
    this.resetFlowerNumberText = function() {
        if (mallPriceType) {
            SAL_resetElement(u, tv.flowerMallWZ + mallUnit)
        } else {
            SAL_resetElement(u, tv.getAvailableFlowerCount() + mallUnit)
        }
    }
    ;
    this.successPurchase = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        mallProxy.useItemOnly(t, e, i);
        if ((clientType == 3 || clientType == 6) && !i) {
            var n = GloableData.getInstance().getItemDataById(t);
            tv.userFlower += n.itemPrice * e;
            GloableData.getInstance().saveMallAllItems()
        }
        this.updateItem();
        if (!a) {
            this.showStatusView(1, s);
            if (_ && d) {
                T = this.isGetAll();
                if (T) {
                    d.setVisible(true)
                } else {
                    d.setVisible(false);
                    b.dispose()
                }
            }
        }
    }
    ;
    this.showItemDetail = function(t, e, i) {
        new SGameNewMallBuyItem(t,e,i)
    }
    ;
    this.getHasWmPrice = function() {
        for (var t = 0; t < this.mallViewData.goodList.goods.length; t++) {
            if (this.mallViewData.goodList.goods[t].wanzi_price) {
                return true
            }
        }
        return false
    }
    ;
    this.getAllItem = function() {
        var t = void 0;
        for (var e = this.mallViewData.goodList.goodCount - 1; e >= 0; e--) {
            var i = GloableData.getInstance().getItemPurchaseInfoById(this.mallViewData.goodList.goods[e].itemId);
            if (i && i.max - i.count > 0) {
                t = e;
                break
            }
        }
        for (var a = 0; a < this.mallViewData.goodList.goodCount; a++) {
            var s = GloableData.getInstance().getItemDataById(this.mallViewData.goodList.goods[a].itemId);
            if (s.itemType == 3) {
                continue
            }
            var n = GloableData.getInstance().getItemPurchaseInfoById(this.mallViewData.goodList.goods[a].itemId);
            if (n) {
                var r = n.max - n.count > 0 ? n.max - n.count : 0;
                if (r > 0) {
                    if (a == t) {
                        this.successPurchase(n.id, r, true, false, 1);
                        return
                    } else {
                        this.successPurchase(n.id, r, true, true)
                    }
                }
            }
        }
    }
    ;
    this.isGetAll = function() {
        for (var t = 0; t < this.mallViewData.goodList.goodCount; t++) {
            var e = GloableData.getInstance().getItemDataById(this.mallViewData.goodList.goods[t].itemId);
            var i = GloableData.getInstance().getItemPurchaseInfoById(e.itemId);
            if (i == null || e.itemType == 1 || e.itemStatus == 2) {
                continue
            } else if (i && e.itemType == 2) {
                if (i.max - i.count > 0) {
                    return true
                }
            } else if (i && e.itemType == 3) {
                var a = e.itemAttribute.split(",");
                for (var s in a) {
                    var n = GloableData.getInstance().getItemDataById(parseInt(a[s]));
                    var r = GloableData.getInstance().getItemPurchaseInfoById(parseInt(a[s]));
                    if (r && n.itemType == 2) {
                        if (r.count < r.max) {
                            return true
                        }
                    }
                }
            }
        }
        return false
    }
    ;
    gLoadAssets.curLoadScene = "NewMall";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function SGameNewMallItem(t, e) {
    this.itemData = t;
    this.itemNameText = null;
    this.itemPriceText = null;
    this.itemDiscountText = null;
    this.itemDescText = null;
    this.itemBGPic = null;
    this.itemPicBg = null;
    this.itemPic = null;
    this.priceIcon = null;
    this.itemEnablePic = null;
    this.itemDisabledPic = null;
    this.btnBuy = null;
    this.parentContainer = e;
    this.mallItemContainer = SALContainer();
    SAL_addElement(e, this.mallItemContainer);
    SAL_setPosition(this.mallItemContainer, t.itemPoint.x, t.itemPoint.y);
    this.setComponent = function(t) {
        if (!t.viewIsShowItemName) {
            SAL_setElementVisible(this.itemNameText, false)
        }
        if (!t.viewIsShowItemDesc) {
            SAL_setElementVisible(this.itemDescText, false)
        } else {
            this.addChild(this.itemDescText)
        }
        if (!t.viewIsShowItemPic) {
            SAL_setElementVisible(this.itemPic, false)
        }
    }
    ;
    this.init = function() {
        var t = this;
        this.itemBGPic = createImage(fileListFato("Graphics/UI/" + this.itemData.itemViewBg), null, this.itemData.itemViewBGSize, this.mallItemContainer);
        this.itemPicBg = createImage(fileListFato("Graphics/UI/" + this.itemData.itemPicBg), this.itemData.itemPicBgPos, this.itemData.itemPicBgSize, this.mallItemContainer);
        this.itemPic = createImage(fileListFato("Graphics/UI/" + this.itemData.itemPic), this.itemData.itemPicPos, this.itemData.itemPicSize, this.mallItemContainer);
        this.priceIcon = createImage(tv.gameNewMall.flowerPicUrl, this.itemData.itemPriceFlowerPos, null, this.mallItemContainer);
        this.itemDisabledPic = createImage(fileListFato("Graphics/UI/" + this.itemData.itemDisabledPic), {
            x: this.itemData.itemCommityBtn.x + this.itemData.itemPoint.x,
            y: this.itemData.itemCommityBtn.y + this.itemData.itemPoint.y
        }, null, this.parentContainer);
        this.itemEnablePic = createImage(fileListFato("Graphics/UI/" + this.itemData.itemEnablePic), {
            x: this.itemData.itemCommityBtn.x + this.itemData.itemPoint.x,
            y: this.itemData.itemCommityBtn.y + this.itemData.itemPoint.y
        }, null, this.parentContainer);
        var e = tv.data.System.Buttons[this.itemData.itemCommityBtn.index];
        this.btnBuy = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        this.btnBuy.setTransparencyFiltering(true);
        this.btnBuy.setPosition(this.itemData.itemCommityBtn.x + this.itemData.itemPoint.x, this.itemData.itemCommityBtn.y + this.itemData.itemPoint.y);
        if (!timerPublish) {
            this.btnBuy.addClick(function() {
                buyAction(t.itemData)
            })
        }
        var i = {
            text: " " + this.itemData.itemPrice + " " + mallUnit,
            font: this.itemData.itemPriceFontPro.font,
            fontSize: this.itemData.itemPriceFontPro.fontSize,
            fontColor: this.itemData.itemPriceFontPro.fontColor,
            pos: this.itemData.itemPricePos
        };
        this.itemPriceText = createText(i);
        this.addChild(this.itemPriceText);
        this.itemDiscountText = new OText("",false,this.itemData.itemPriceFontPro.fontSize - 1);
        this.addChild(this.itemDiscountText.element);
        this.lineText = new OText("",false,this.itemData.itemPriceFontPro.fontSize - 1);
        this.addChild(this.lineText.element);
        i.text = this.itemData.itemDesc;
        i.font = this.itemData.itemDescFontPro.font;
        i.fontSize = this.itemData.itemDescFontPro.fontSize;
        i.fontColor = this.itemData.itemDescFontPro.fontColor;
        i.pos = this.itemData.itemDescSize;
        this.itemDescText = createText(i);
        SAL_setElementSize(this.itemDescText, this.itemData.itemDescSize.width, this.itemData.itemDescSize.height);
        i.text = this.itemData.itemName;
        i.font = this.itemData.itemNameFontPro.font;
        i.fontSize = this.itemData.itemNameFontPro.fontSize;
        i.fontColor = this.itemData.itemNameFontPro.fontColor;
        i.pos = this.itemData.itemNamePos;
        this.itemNameText = createText(i);
        this.addChild(this.itemNameText);
        SAL_addClick(this.mallItemContainer, function() {
            tv.scene.showItemDetail(t.itemData, false, 1)
        });
        this.update()
    }
    ;
    this.addChild = function(t) {
        SAL_addElement(this.mallItemContainer, t)
    }
    ;
    this.dispose = function() {
        this.mallItemContainer && SAL_destroyElement(this.mallItemContainer);
        this.itemNameText && SAL_destroyElement(this.itemNameText);
        this.itemPriceText && SAL_destroyElement(this.itemPriceText);
        this.itemDescText && SAL_destroyElement(this.itemDescText);
        this.itemBGPic && SAL_destroyElement(this.itemBGPic);
        this.itemPicBg && SAL_destroyElement(this.itemPicBg);
        this.itemPic && SAL_destroyElement(this.itemPic);
        this.priceIcon && SAL_destroyElement(this.priceIcon);
        this.itemEnablePic && SAL_destroyElement(this.itemEnablePic);
        this.itemDisabledPic && SAL_destroyElement(this.itemDisabledPic)
    }
    ;
    this.update = function() {
        var t = GloableData.getInstance().getItemPurchaseInfoById(this.itemData.itemId);
        if (this.itemData.itemStatus == 2) {
            SAL_setElementVisible(this.btnBuy.element, false);
            SAL_setElementVisible(this.itemDisabledPic, true);
            SAL_setElementVisible(this.itemEnablePic, false)
        } else if (t) {
            if (this.itemData.itemType === 1 || this.itemData.itemType === 3) {
                if (t.max > 0) {
                    SAL_setElementVisible(this.btnBuy.element, false);
                    SAL_setElementVisible(this.itemDisabledPic, false);
                    SAL_setElementVisible(this.itemEnablePic, true);
                    this.setPrice()
                } else {
                    SAL_setElementVisible(this.btnBuy.element, true);
                    SAL_setElementVisible(this.itemDisabledPic, false);
                    SAL_setElementVisible(this.itemEnablePic, false);
                    this.setPrice()
                }
            } else if (this.itemData.itemType == 2) {
                if (GloableData.getInstance().back_flower_flag) {
                    if (t.count > t.max) {
                        t.count = t.max
                    }
                }
                if (t.count < t.max) {
                    SAL_setElementVisible(this.btnBuy.element, true);
                    SAL_setElementVisible(this.itemDisabledPic, false);
                    SAL_setElementVisible(this.itemEnablePic, false);
                    SAL_resetElement(this.itemPriceText, " 0" + mallUnit)
                } else {
                    if (this.itemData.isRepeat) {
                        SAL_setElementVisible(this.btnBuy.element, true);
                        SAL_setElementVisible(this.itemDisabledPic, false);
                        SAL_setElementVisible(this.itemEnablePic, false);
                        this.setPrice()
                    } else {
                        SAL_setElementVisible(this.btnBuy.element, false);
                        SAL_setElementVisible(this.itemDisabledPic, false);
                        SAL_setElementVisible(this.itemEnablePic, true);
                        this.setPrice()
                    }
                }
            }
        } else {
            SAL_setElementVisible(this.btnBuy.element, true);
            SAL_setElementVisible(this.itemDisabledPic, false);
            SAL_setElementVisible(this.itemEnablePic, false);
            this.setPrice()
        }
        if (clientType == 1 && mallPriceType && this.itemData.wanzi_price <= 0) {
            SAL_setElementVisible(this.mallItemContainer, false);
            SAL_setElementVisible(this.btnBuy.element, false);
            SAL_setElementVisible(this.itemDisabledPic, false);
            SAL_setElementVisible(this.itemEnablePic, false)
        }
    }
    ;
    this.setPrice = function() {
        var t = this.itemData.itemPrice;
        if (mallPriceType) {
            t = this.itemData.discount_wanzi_price
        }
        SAL_resetElement(this.itemPriceText, " " + t + mallUnit);
        if (this.itemData.discount && mallPriceType) {
            var e = " " + this.itemData.wanzi_price + mallUnit;
            this.itemDiscountText.setText(e);
            this.itemDiscountText.setPosition(this.itemData.itemPricePos.x + this.itemDiscountText.textWidth, this.itemData.itemPricePos.y);
            var i = "";
            for (var a = 0; a < e.length; a++) {
                i += "—"
            }
            this.lineText.setText(i);
            this.lineText.setPosition(this.itemDiscountText.x, this.itemDiscountText.y)
        }
    }
    ;
    this.init()
}

function SGameNewMallBuyItem(r, t, o) {
    this.UIData = tv.gameNewMall.goodDetailPage;
    this.itemData = r;
    this.isBtn = t;
    this.itemAllPrice = null;
    this.addBtn = null;
    this.minusBtn = null;
    this.confirmBtn = null;
    this.cancleBtn = null;
    this.itemBuyNumber = null;
    this.buyNumber = 1;
    this.itemPrice = this.itemData.itemPrice;
    if (clientType == 1 && mallPriceType == 1) {
        this.itemPrice = this.itemData.discount_wanzi_price
    }
    var h = void 0;
    var l = void 0;
    var c = void 0;
    var u = void 0;
    var f = GloableData.getInstance().getItemPurchaseInfoById(this.itemData.itemId);
    var d = f ? f.count : 0;
    this.mallItemBuyContainer = new OContainer(gGameWidth,gGameHeight);
    SAL_addElement(tv.scene.mallContainer, this.mallItemBuyContainer.element);
    this.mallItemBuyContainer.setBlockTouch(true);
    this.init = function() {
        var t = this;
        h = createImage(fileListFato("Graphics/UI/" + this.UIData.bg), null, null, this.mallItemBuyContainer.element);
        l = createImage(fileListFato("Graphics/UI/" + this.UIData.itemPicBg), this.UIData.itemPicBgPos, this.UIData.itemPicBgSize, this.mallItemBuyContainer.element);
        if (this.UIData.isShowItemPic) {
            c = createImage(fileListFato("Graphics/UI/" + this.itemData.itemPic), this.UIData.itemPicPos, this.UIData.itemPicSize, this.mallItemBuyContainer.element)
        }
        var e = {
            text: this.itemData.itemDesc,
            font: this.itemData.itemDescFontPro.font,
            fontSize: this.itemData.itemDescFontPro.fontSize,
            fontColor: this.itemData.itemDescFontPro.fontColor,
            pos: this.UIData.itemDescSize
        };
        if (this.UIData.isShowItemDec) {
            this.itemDesc = createText(e);
            this.addChild(this.itemDesc);
            SAL_setElementSize(this.itemDesc, this.UIData.itemDescSize.width, this.UIData.itemDescSize.height)
        }
        if (this.UIData.isShowItemName) {
            e.text = this.itemData.itemName;
            e.font = this.itemData.itemNameFontPro.font;
            e.fontSize = this.itemData.itemNameFontPro.fontSize;
            e.fontColor = this.itemData.itemNameFontPro.fontColor;
            e.pos = this.UIData.itemNamePos;
            this.itemName = createText(e);
            this.addChild(this.itemName)
        }
        e.text = "总价：";
        e.pos = this.UIData.itemAllPriceTxtPos;
        this.flowerHuaText = createText(e);
        this.addChild(this.flowerHuaText);
        u = createImage(tv.gameNewMall.flowerPicUrl, this.UIData.itemAllPricePicPos, null, this.mallItemBuyContainer.element);
        this.buyNumber = this.UIData.varIndex == 0 ? 1 : this.UIData.varIndex;
        switch (o) {
        case 0:
            if (f) {
                e.text = d + this.buyNumber <= f.max ? " 0 " + mallUnit : " " + this.itemPrice * this.buyNumber + " " + mallUnit
            } else {
                e.text = " " + this.itemPrice * this.buyNumber + " " + mallUnit
            }
            break;
        case 1:
            e.text = " " + this.itemPrice * this.buyNumber + " " + mallUnit;
            break
        }
        e.pos = this.UIData.itemAllPriceNumPos;
        this.itemAllPrice = createText(e);
        this.addChild(this.itemAllPrice);
        if (this.isBtn) {
            if (this.UIData.isShowBuyNumber && r.isRepeat && this.itemData.itemType == 2) {
                e.text = this.buyNumber + "";
                e.pos = this.UIData.buyNumPos;
                this.itemBuyNumber = createText(e);
                this.addChild(this.itemBuyNumber);
                var i = tv.data.System.Buttons[this.UIData.addBtn.index];
                if (i) {
                    this.addBtn = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
                    this.addBtn.setPosition(this.UIData.addBtn.x, this.UIData.addBtn.y);
                    this.addChild(this.addBtn);
                    this.addBtn.addClick(function() {
                        t.clickAdd()
                    })
                }
                var a = tv.data.System.Buttons[this.UIData.minusBtn.index];
                if (a) {
                    this.minusBtn = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
                    this.minusBtn.setPosition(this.UIData.minusBtn.x, this.UIData.minusBtn.y);
                    this.addChild(this.minusBtn);
                    this.minusBtn.addClick(function() {
                        t.clickMinus()
                    })
                }
                this.addBtn.setTransparencyFiltering(true);
                this.minusBtn.setTransparencyFiltering(true)
            }
            var s = tv.data.System.Buttons[this.UIData.confirmBtn.index];
            this.confirmBtn = new ONButton("Graphics/Button/" + s.image1,"Graphics/Button/" + s.image2);
            this.confirmBtn.setPosition(this.UIData.confirmBtn.x, this.UIData.confirmBtn.y);
            this.addChild(this.confirmBtn);
            this.confirmBtn.addClick(function() {
                t.clickConfirm()
            });
            var n = tv.data.System.Buttons[this.UIData.cancaleBtn.index];
            this.cancleBtn = new ONButton("Graphics/Button/" + n.image1,"Graphics/Button/" + n.image2);
            this.cancleBtn.setPosition(this.UIData.cancaleBtn.x, this.UIData.cancaleBtn.y);
            this.addChild(this.cancleBtn);
            this.cancleBtn.addClick(function() {
                t.dispose()
            });
            this.confirmBtn.setTransparencyFiltering(true);
            this.cancleBtn.setTransparencyFiltering(true)
        } else {
            this.mallItemBuyContainer.addEvent("click", function() {
                t.dispose()
            })
        }
    }
    ;
    this.setBuyNumText = function() {
        if (!this.UIData.isShowBuyNumber || this.itemData.itemType !== 2) {
            return
        }
        if (f && d + this.buyNumber <= f.max && this.itemData.itemType == 2) {
            SAL_resetElement(this.itemAllPrice, " 0 " + mallUnit)
        } else if (f && d < f.max && d + this.buyNumber > f.max && this.itemData.itemType == 2) {
            var t = f.max - d;
            this.buyNumber = this.buyNumber == t + 1 ? 1 : this.buyNumber;
            this.buyNumber = this.buyNumber >= t ? t : 1;
            SAL_resetElement(this.itemAllPrice, " 0 " + mallUnit)
        } else {
            SAL_resetElement(this.itemAllPrice, " " + this.itemPrice * this.buyNumber + " " + mallUnit)
        }
        SAL_resetElement(this.itemBuyNumber, this.buyNumber + "")
    }
    ;
    this.clickAdd = function() {
        if (!this.UIData.isShowBuyNumber || !r.isRepeat || this.itemData.itemType !== 2) {
            return
        }
        if (this.buyNumber < 99) {
            this.buyNumber += 1
        } else {
            this.buyNumber = 1
        }
        this.setBuyNumText()
    }
    ;
    this.clickMinus = function() {
        if (!this.UIData.isShowBuyNumber || !r.isRepeat || this.itemData.itemType !== 2) {
            return
        }
        if (this.buyNumber > 1) {
            this.buyNumber -= 1
        } else {
            this.buyNumber = 99
        }
        this.setBuyNumText()
    }
    ;
    this.clickConfirm = function() {
        if (f && d + this.buyNumber <= f.max && this.itemData.itemType == 2 && this.buyNumber > 0) {
            tv.scene.successPurchase(this.itemData.itemId, this.buyNumber, true)
        } else if (clientType == 3) {
            sLoading.showMask();
            var e = this.itemData;
            var i = this.buyNumber;
            SAL_payMoney(6, JSON.stringify({
                id: this.itemData.itemId
            }), null, null, function(t) {
                sLoading.hideMask();
                if (t) {
                    tv.scene.successPurchase(e.itemId, i)
                }
            })
        } else {
            if (this.buyNumber <= 0) {
                this.dispose();
                return
            }
            var t = tv.getAvailableFlowerCount();
            if (clientType == 1 && mallPriceType) {
                t = tv.flowerMallWZ
            }
            if (t >= this.itemPrice * this.buyNumber) {
                proceedCreateOrder(this.itemData.itemId, this.buyNumber)
            } else {
                if (clientType == 1) {// hintMessage.setHint("鲜花不足")
                } else {
                    this.showMessage()
                }
            }
        }
        this.dispose()
    }
    ;
    this.addChild = function(t) {
        this.mallItemBuyContainer.addChild(t)
    }
    ;
    this.showMessage = function() {
        if (Configuration.isH5) {
            var t = new AccountDetailConfirmInShop(this.itemData,this.buyNumber);
            SAL_addElement(tv.scene.mallContainer, t.element);
            t.init()
        } else {
            var e = new PurchaseResultMessage("鲜花不足","确定","鲜花充值",null,this.rechargeCallback.bind(this),this.itemPrice * this.buyNumber);
            SAL_addElement(tv.scene.mallContainer, e.mallMessageContainer);
            e.setPurchaseResultElements()
        }
    }
    ;
    this.dispose = function() {
        this.mallItemBuyContainer.dispose()
    }
    ;
    this.rechargeFail = function() {
        var t = new PurchaseResultMessage("充值失败","确定");
        SAL_addElement(tv.scene.mallContainer, t.mallMessageContainer);
        t.setPurchaseResultElements()
    }
    ;
    this.rechargeCallback = function(t) {
        var e = this;
        if (t > 0) {
            refreshItemStatus(function() {
                proceedCreateOrder(e.itemData.itemId, e.buyNumber)
            })
        } else {
            this.rechargeFail()
        }
    }
    ;
    this.init()
}

function newMallTip() {
    OContainer.call(this);
    this.init = function() {
        var t = this;
        this.tipsMsg = new OText;
        this.tipsMsg.setPosition(58, 12);
        this.tipsMsg.setColor(get16Color("#ffffff"));
        this.tipsMsg.setTextSize(15);
        this.tipsMsg.setText("一键领取顺序为商品的排列顺序。");
        this.bg = new OBitmap(timeMallTipBg);
        this.addChild(this.bg);
        this.bg.setSizeGrid([50, 50, 0, 0], 680, 88);
        this.bg.setScale(.5, .5);
        this.addChild(this.tipsMsg);
        this.icon = new OBitmap(timeMallTiptIcon);
        this.icon.setScale(.5, .5);
        this.addChild(this.icon);
        this.icon.setPosition(16, 4);
        this.ycMsg = new OText("关闭");
        this.ycMsg.setColor(get16Color("#FFD15E"));
        this.ycMsg.setPosition(this.tipsMsg.textWidth + this.tipsMsg.x + 2, 12);
        this.ycMsg.setTextSize(15);
        this.addChild(this.ycMsg);
        this.ycMsg.setVisible(true);
        this.ycMsg.addEvent("click", function() {
            t.dispose()
        })
    }
}
var isMallLock = false;

function SMallLock(t) {
    var e = this;
    OContainer.call(this);
    this.container = this.element;
    this.setSize(gGameWidth, gGameHeight);
    SAL_addElement(g, this.container);
    SAL_setElementIndex(g, this.container, 5900);
    this.setPosition(gGameX, 0);
    this.setBlockTouch(true);
    this.maskLayer = null;
    this.back = null;
    this.closeBtn = null;
    this.bg = null;
    this.icon = null;
    this.button_1 = null;
    this.button_2 = null;
    this.itemText = null;
    this.itemData = GloableData.getInstance().getItemDataById(t);
    this.postionObj = {
        round: 23,
        bg: {
            w: 540,
            h: 320
        },
        textp: {
            w: 220,
            h: 50,
            x: .5,
            y: 18
        },
        closeBtn: {
            x: 42,
            y: 24
        },
        btn_1: {
            x: 69,
            y: 27,
            w: 220,
            h: 50
        },
        btn_2: {
            x: 226,
            y: 0,
            w: 220,
            h: 50
        },
        icon: {
            x: .5,
            y: 42,
            w: 120,
            h: 120
        }
    };
    this.textMsg = "遇到剧情锁, 需要购买" + this.itemData.itemName;
    this.init = function() {
        var e = this;
        tv.canvas.menuIsShow(false);
        isMallLock = true;
        if (gGameWidth > gGameHeight) {
            this.postionObj = {
                round: 23,
                bg: {
                    w: 540,
                    h: 320
                },
                textp: {
                    w: 220,
                    h: 50,
                    x: .5,
                    y: 18
                },
                closeBtn: {
                    x: 42,
                    y: 24
                },
                btn_1: {
                    x: 35,
                    y: 27,
                    w: 200,
                    h: 50
                },
                btn_2: {
                    x: 250,
                    y: 0,
                    w: 200,
                    h: 50
                },
                icon: {
                    x: .5,
                    y: 42,
                    w: 120,
                    h: 120
                }
            };
            this.textMsg = "遇到剧情锁, 需要购买" + this.itemData.itemName
        } else {
            this.postionObj = {
                round: 22.5,
                bg: {
                    w: 320,
                    h: 540
                },
                textp: {
                    w: 220,
                    h: 50,
                    x: 70,
                    y: 18
                },
                closeBtn: {
                    x: 42,
                    y: 24
                },
                btn_1: {
                    x: 49,
                    y: 55,
                    w: 222,
                    h: 45
                },
                btn_2: {
                    x: 0,
                    y: 63,
                    w: 222,
                    h: 45
                },
                icon: {
                    x: .5,
                    y: 84,
                    w: 120,
                    h: 120
                }
            };
            this.textMsg = "   遇到剧情锁" + "\n 需要购买" + this.itemData.itemName
        }
        this.maskLayer = createImage(autoSaveMaskPath, {
            x: 0,
            y: 0
        }, {
            h: gGameHeight,
            w: gGameWidth
        }, this.container);
        var t = {
            x: gGameWidth - this.postionObj.bg.w >> 1,
            y: gGameHeight - this.postionObj.bg.h >> 1
        };
        this.bg = createImage(SHOP_LOCK_BG, t, this.postionObj.bg, this.container);
        var i = {
            x: gGameWidth - this.postionObj.icon.w >> 1,
            y: t.y + this.postionObj.icon.y
        };
        this.icon = createImage(SHOP_LOCK_STORY_ICON, i, null, this.container);
        if (clientType == 1) {
            SAL_setElementVisible(this.icon, false)
        }
        var a = {
            text: this.textMsg,
            font: "微软雅黑",
            fontColor: SALColor(46, 47, 49, 255),
            fontSize: 18
        };
        var s = {
            x: t.x,
            y: t.y + this.postionObj.icon.y + this.postionObj.icon.h + this.postionObj.textp.y
        };
        this.itemText = createText(a);
        this.addChild(this.itemText);
        var n = SAL_getTextSize(this.itemText);
        SAL_setPosition(this.itemText, t.x + (this.postionObj.bg.w - n[0]) * .5, s.y);
        var r = {
            x: t.x + this.postionObj.bg.w - this.postionObj.closeBtn.x,
            y: t.y + this.postionObj.closeBtn.y
        };
        this.closeBtn = createImage(SHOP_LOCK_CLOSE, r, null, this.container);
        SAL_addClick(this.closeBtn, function() {
            e.dispose();
            e.cmdTitle()
        });
        this.button_1 = SALButton(SHOP_LOCK_SAVE, SHOP_LOCK_SAVE_ACTIVE, "存档");
        this.addChild(this.button_1);
        var o = {
            x: t.x + this.postionObj.btn_1.x,
            y: s.y + 20 + this.postionObj.btn_1.y
        };
        SAL_setPosition(this.button_1, o.x, o.y);
        SAL_setTextFontSize(this.button_1, 18);
        SAL_setTextColor(this.button_1, SALColor(255, 255, 255, 255));
        if (clientType == 1) {
            SAL_setTextColor(this.button_1, get16Color("#000000"))
        }
        SAL_addClick(this.button_1, function() {
            e.dispose();
            tv.scene = new SSavefile(false,true)
        });
        stopSpeedRead();
        var h = "前往商城";
        if (clientType != 3 && GloableData.getInstance().isMobile()) {
            h = "购买"
        }
        this.button_2 = SALButton(SHOP_LOCK_PURCHASE, SHOP_LOCK_PURCHASE_ACTIVE, h);
        this.addChild(this.button_2);
        var l = {
            x: o.x + this.postionObj.btn_2.x,
            y: o.y + this.postionObj.btn_2.y
        };
        SAL_setPosition(this.button_2, l.x, l.y);
        SAL_setTextFontSize(this.button_2, 18);
        SAL_setTextColor(this.button_2, SALColor(255, 255, 255, 255));
        if (clientType == 1) {
            SAL_setTextColor(this.button_2, get16Color("#000000"))
        }
        SAL_addClick(this.button_2, function() {
            if (!GloableData.getInstance().userData.isLogin) {
                SAL_Login(function() {
                    refreshAfterLogin();
                    GloableData.getInstance().loadMallAllItems(e.dispose.bind(e))
                })
            } else if (clientType == 3 || clientType == 6 || localProjectPath || isM) {
                tv.scene.dispose();
                if (hasFileItem("data/mallnew.bin")) {
                    tv.scene = new SGameNewMall
                } else if (hasFileItem("data/mall.bin")) {
                    tv.scene = new SGameMall
                }
            } else {
                tv.getFlower(function(t) {
                    e.goMobilePurchase()
                })
            }
        })
    }
    ;
    this.cmdTitle = function() {
        this.dispose();
        backToMainMenu()
    }
    ;
    this.update = function() {}
    ;
    this.updateView = function() {
        var t = GloableData.getInstance().getItemPurchaseInfoById(this.itemData.itemId);
        if (t != null && t.max > 0) {
            this.dispose()
        }
    }
    ;
    this.dispose = function() {
        tv.scene = new SGame;
        tv.canvas.menuIsShow(true);
        isMallLock = false;
        this.container && SAL_destroyElement(this.container);
        this.back && SAL_destroyElement(this.back);
        this.closeBtn && SAL_destroyElement(this.closeBtn);
        this.maskLayer && SAL_destroyElement(this.maskLayer);
        this.bg && SAL_destroyElement(this.bg);
        this.icon && SAL_destroyElement(this.icon);
        this.button_1 && SAL_destroyElement(this.button_1);
        this.button_2 && SAL_destroyElement(this.button_2);
        this.itemText && SAL_destroyElement(this.itemText)
    }
    ;
    this.addChild = function(t) {
        SAL_addElement(this.container, t)
    }
    ;
    this.goMobilePurchase = function() {
        var i = this;
        var c = this;
        var t = fileListFato("Graphics/UI/" + this.itemData.itemPic);
        var e = GloableData.getInstance().getMallGiftItem();
        var a = "";
        var s = true;
        var n = {
            iconURL: t,
            mainLineActionID: this.itemData.itemId,
            mainLineTitle: this.itemData.itemName,
            mainLineinePrice: this.itemData.itemPrice,
            purchaseType: "story",
            countAvailable: false,
            gaveFlowers: tv.getAvailableFlowerCount()
        };
        if (clientType == 1) {
            n.moneyType = mallPriceType;
            n.discount = 0;
            if (mallPriceType) {
                n.discount = this.itemData.discount;
                n.mainLineinePrice = this.itemData.discount_wanzi_price;
                n.realPrice = this.itemData.wanzi_price
            }
            n.gaveFlowers = tv.flowerMallWZ;
            if (this.itemData.wanzi_price <= 0) {
                // hintMessage.setHint("商品未设置丸子价格，无法购买");
                return
            }
        }
        if (e) {
            s = c.analyseBundle(e, this.itemData.itemId)
        }
        if (e && s) {
            a = fileListFato("Graphics/UI/" + e.itemPic);
            var r = 0;
            var o = e.itemAttribute.split(",");
            var h = void 0
              , u = o.length
              , l = void 0;
            for (h = 0; h < o.length; h++) {
                l = GloableData.getInstance().getItemDataById(o[h]);
                if (l) {
                    if (clientType == 1 && mallPriceType) {
                        r += l.wanzi_price
                    } else {
                        r += l.itemPrice
                    }
                }
            }
            if (clientType == 1 && mallPriceType && e.wanzi_price <= 0) {} else {
                n["superActionID"] = e.itemId;
                n["superIconURL"] = a;
                n["superTitle"] = e.itemName;
                n["superPrice"] = e.itemPrice;
                n["originalPrice"] = r;
                n["superMsgText"] = e.itemDesc
            }
            if (clientType == 1 && mallPriceType && e.wanzi_price > 0) {
                n["superPrice"] = e.discount_wanzi_price;
                n["superRealPrice"] = e.wanzi_price;
                n["superDiscount"] = e.discount
            }
        }
        SAL_payMoney(1, JSON.stringify(n), {
            mainLineImgUrl: t,
            superImgUrl: a
        }, null, function(t, e) {
            queryNum = 0;
            if (t) {
                querySuccen(i.itemData.itemId, 1, function() {
                    sendMsgToClient(JSON.stringify({
                        type: 1,
                        status: 1,
                        msg: "",
                        data: null
                    }), null);
                    GloableData.getInstance().getFlowerByMe();
                    GloableData.getInstance().loadMallAllItems(i.dispose.bind(i))
                })
            }
        })
    }
    ;
    this.analyseBundle = function(t, e) {
        var i = t.itemAttribute.split(",");
        var a = void 0;
        for (var s in i) {
            if (parseInt(i[s]) === e) {
                a = true;
                break
            } else {
                a = false
            }
        }
        return a
    }
    ;
    var i = [SHOP_LOCK_BG, SHOP_LOCK_STORY_ICON, SHOP_LOCK_CLOSE, SHOP_LOCK_SAVE, SHOP_LOCK_SAVE_ACTIVE, SHOP_LOCK_PURCHASE, SHOP_LOCK_PURCHASE_ACTIVE];
    SAL_preload(g, i, function(t) {
        if (t == 1) {
            e.init()
        }
    }, 5, true)
}

function SGameMall() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    OContainer.call(this);
    this.uiData = tv.gameMallBin;
    this.fadeFps = t;
    this.bg = null;
    this.rightImage = null;
    this.payBtn = null;
    this.rewardAuthorBtn = null;
    this.closeBtn = null;
    this.flowerText = null;
    this.mallItems = [];
    this.flowerDescText = null;
    this.flowerIcon = null;
    this.setAlpha(0);
    if (clientType == 1 && mallPriceType) {
        mallUnit = "个";
        mallFlowerText = "剩余丸子";
        this.uiData.flowerPicUrl = wanziIcon
    } else {
        mallUnit = "朵";
        mallFlowerText = "剩余鲜花";
        this.uiData.flowerPicUrl = fileListFato("Graphics/UI/" + this.uiData.flowerPic);
        if (localProjectPath) {
            this.uiData.flowerPicUrl = "Graphics/UI/" + this.uiData.flowerPic
        }
    }
    var l = false;
    this.init = function() {
        var t = this;
        tv.canvas.menuIsShow(false);
        SAL_setElementBlockTouch(this, true);
        SAL_setElementIndex(g, this.element, 6600);
        this.setPosition(gGameX, 0);
        this.bg = new OBitmap("Graphics/UI/" + this.uiData.bgPic);
        this.addChild(this.bg);
        this.rightImage = new OBitmap("Graphics/Half/" + this.uiData.rightPic);
        this.addChild(this.rightImage);
        this.rightImage.setPosition(gGameWidth - this.rightImage.width, gGameHeight - this.rightImage.height);
        this.flowerDescText = new OText(mallFlowerText);
        this.flowerDescText.setFont(this.uiData.flowerCountFont);
        this.flowerDescText.setTextSize(this.uiData.flowerCountFontSize);
        this.flowerDescText.setPosition(this.uiData.flowerCountTextPos.x, this.uiData.flowerCountTextPos.y);
        this.addChild(this.flowerDescText);
        this.flowerIcon = new OBitmap(this.uiData.flowerPicUrl);
        this.flowerIcon.setPosition(this.uiData.flowerPicPos.x, this.uiData.flowerPicPos.y);
        this.addChild(this.flowerIcon);
        this.flowerText = new OText(tv.flowerMallHua + " 朵");
        this.flowerText.setFont(this.uiData.flowerCountFont);
        this.flowerText.setTextSize(this.uiData.flowerCountFontSize);
        this.flowerText.setPosition(this.uiData.flowerCountPos.x, this.uiData.flowerCountPos.y);
        this.addChild(this.flowerText);
        var e = tv.data.System.Buttons[this.uiData.payBtn.index];
        this.payBtn = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        this.payBtn.setPosition(this.uiData.payBtn.x, this.uiData.payBtn.y);
        this.payBtn.addClick(function() {
            t.pay()
        });
        this.addChild(this.payBtn);
        var i = tv.data.System.Buttons[this.uiData.rewardAuthorBtn.index];
        this.rewardAuthorBtn = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
        this.rewardAuthorBtn.setPosition(this.uiData.rewardAuthorBtn.x, this.uiData.rewardAuthorBtn.y);
        this.rewardAuthorBtn.addClick(function() {
            t.pay()
        });
        this.addChild(this.rewardAuthorBtn);
        for (var a = 0; a < this.uiData.itemNumber; a++) {
            var s = this.uiData.items[a];
            var n = new GameMallItem(s,this);
            this.mallItems.push(n)
        }
        for (var r = 0; r < this.mallItems.length; r++) {
            var o = this.mallItems[r];
            this.addChild(o.itemBuyBtn)
        }
        var h = tv.data.System.Buttons[this.uiData.closeBtn.index];
        this.closeBtn = new ONButton("Graphics/Button/" + h.image1,"Graphics/Button/" + h.image2);
        this.closeBtn.setPosition(this.uiData.closeBtn.x, this.uiData.closeBtn.y);
        this.closeBtn.setTransparencyFiltering(true);
        this.closeBtn.addClick(function() {
            t.closeView()
        });
        this.addChild(this.closeBtn);
        this.fadeTo(1, this.fadeFps / 60 * 1e3);
        if (clientType == 1) {
            showSwitchPrice(function() {
                if (clientType == 1) {
                    t.showSwitchPriceIcon()
                }
            })
        }
        l = true
    }
    ;
    this.showTip = function() {
        if (clientType == 1 && !this.getHasWmPrice()) {
            var t = new WanManTip;
            this.addChild(t);
            t.init()
        } else {
            if (GloableData.getInstance().isWXmini || GloableData.getInstance().isFreeLimit || GloableData.getInstance().isLightVIP || GloableData.getInstance().isLightDay) {
                var e = new GameFreeTip;
                this.addChild(e);
                e.init()
            }
        }
    }
    ;
    this.closeView = function() {
        this.dispose();
        tv.scene = new SGame
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.closeView()
            }
        })
    }
    ;
    this.updateItem = function() {
        this.resetFlowerNumberText();
        for (var t = 0; t < this.mallItems.length; t++) {
            this.mallItems[t].update()
        }
    }
    ;
    this.switchBtn = null;
    this.switchOpenBtn = null;
    this.isOpenSwitch = true;
    this.showSwitchPriceIcon = function() {
        var t = this;
        if (GloableData.getInstance().isSwitchPrice) {
            this.switchOpenBtn = new OBitmap(wmMallCloseMenu);
            this.switchOpenBtn.setPosition(0, 37);
            this.addChild(this.switchOpenBtn);
            this.switchOpenBtn.addEvent("click", function() {
                if (t.isOpenSwitch) {
                    t.switchBtn.setVisible(false);
                    t.switchOpenBtn.setUrl(wmMallOpenMenu)
                } else {
                    t.switchBtn.setVisible(true);
                    t.switchOpenBtn.setUrl(wmMallCloseMenu)
                }
                t.isOpenSwitch = !t.isOpenSwitch
            });
            var e = mallPriceType ? wmMallSwitchXHMenu : wmMallSwitchWZMenu;
            this.switchBtn = new ONButton(e,e);
            this.switchBtn.setPosition(35, 28);
            this.addChild(this.switchBtn);
            this.switchBtn.addClick(function() {
                mallPriceType = !mallPriceType;
                t.closeView();
                tv.scene = new SGameMall
            })
        }
    }
    ;
    this.pay = function() {
        if (GloableData.getInstance().isWXmini) {
            // hintMessage.setHint(freeTips, "#FFFFFF");
            return
        }
        if (GloableData.getInstance().getIsUnaudited()) {// hintMessage.setHint("本作品尚未过审，不能赠送鲜花", "#FFFFFF")
        } else {
            SAL_payMoney(6, 0, {
                purchaseType: "flower",
                countAvailable: true
            }, null, function() {
                GloableData.getInstance().getFlowerByMe();
                tv.getFlower(function(t) {
                    refreshShopFlower(t)
                })
            })
        }
    }
    ;
    this.showStatusView = function(t) {
        var e = new PurchaseResultMessage(t == 1 ? "购买成功" : "购买失败","确定");
        tv.scene.addChild(e.mallMessageContainer);
        e.setPurchaseResultElements()
    }
    ;
    this.update = function() {
        var t = this;
        if (l) {
            l = false;
            refreshShopInfo(0, function() {
                t.showTip()
            })
        }
    }
    ;
    this.resetFlowerNumberText = function() {
        if (mallPriceType) {
            this.flowerText.setText(tv.flowerMallWZ + " " + mallUnit)
        } else {
            this.flowerText.setText(tv.getAvailableFlowerCount() + " " + mallUnit)
        }
    }
    ;
    this.successPurchase = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        mallProxy.useItemOnly(t, e, i);
        this.updateItem();
        this.showStatusView(1)
    }
    ;
    this.showItemDetail = function(t, e) {
        this.gameBuyMsg = new GameMallMessage(t,e);
        this.addChild(this.gameBuyMsg);
        this.gameBuyMsg.setMallMessageElements()
    }
    ;
    this.getHasWmPrice = function() {
        for (var t = 0; t < this.uiData.items.length; t++) {
            if (this.uiData.items[t].wanzi_price) {
                return true
            }
        }
        return false
    }
    ;
    gLoadAssets.curLoadScene = "Mall";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function GameMallItem(t, e) {
    OContainer.call(this);
    this.itemData = t;
    this.itemName = null;
    this.itemPic = null;
    this.itemPicBG = null;
    this.itemBG = null;
    this.itemDisabledPic = null;
    this.itemBuyBtn = null;
    this.itemEnablePic = null;
    this.itemPrice = null;
    this.itemDiscountText = null;
    this.flowerIcon = null;
    this.setPosition(t.itemPos.x, t.itemPos.y);
    e.addChild(this);
    this.init = function() {
        var t = this;
        if (!this.itemData.itemBgPic.IsNil()) {
            this.itemBG = new OBitmap("Graphics/UI/" + this.itemData.itemBgPic);
            this.addChild(this.itemBG);
            this.itemBG.setSize(this.itemData.itemSize.w, this.itemData.itemSize.h)
        }
        if (!this.itemData.itemPicBG.IsNil()) {
            this.itemPicBG = new OBitmap("Graphics/UI/" + this.itemData.itemPicBG);
            this.itemPicBG.setPosition(this.itemData.itemPicBGPos.x, this.itemData.itemPicBGPos.y);
            this.addChild(this.itemPicBG);
            this.itemPicBG.setSize(this.itemData.itemPicBGSize.w, this.itemData.itemPicBGSize.h)
        }
        if (!this.itemData.itemPic.IsNil()) {
            this.itemPic = new OBitmap("Graphics/UI/" + this.itemData.itemPic);
            this.itemPic.setPosition(this.itemData.itemPicBGPos.x + (this.itemData.itemPicBGSize.w - this.itemData.itemPicSize.w >> 1), this.itemData.itemPicBGPos.y + (this.itemData.itemPicBGSize.h - this.itemData.itemPicSize.h >> 1));
            this.addChild(this.itemPic);
            this.itemPic.setSize(this.itemData.itemPicSize.w, this.itemData.itemPicSize.h)
        }
        var e = tv.data.System.Buttons[this.itemData.itemBuyBtn.index];
        this.itemBuyBtn = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        this.itemBuyBtn.setTransparencyFiltering(false);
        this.itemBuyBtn.setPosition(this.itemData.itemBuyBtn.x + this.itemData.itemPos.x, this.itemData.itemBuyBtn.y + this.itemData.itemPos.y);
        this.itemBuyBtn.addClick(function() {
            buyAction(t.itemData)
        });
        this.itemDisabledPic = new OBitmap("Graphics/UI/" + this.itemData.itemDisabled);
        this.itemDisabledPic.setPosition(this.itemData.itemBuyBtn.x, this.itemData.itemBuyBtn.y);
        this.addChild(this.itemDisabledPic);
        this.itemEnablePic = new OBitmap("Graphics/UI/" + this.itemData.itemEnable);
        this.itemEnablePic.setPosition(this.itemData.itemBuyBtn.x, this.itemData.itemBuyBtn.y);
        this.addChild(this.itemEnablePic);
        this.flowerIcon = new OBitmap(tv.gameMallBin.flowerPicUrl);
        this.flowerIcon.setPosition(this.itemData.priceFlowerPos.x, this.itemData.priceFlowerPos.y);
        this.addChild(this.flowerIcon);
        this.itemPrice = new OText(this.itemData.itemPrice + "朵");
        this.itemPrice.setFont(this.itemData.itemFontName);
        this.itemPrice.setTextSize(this.itemData.itemPriceFontSize == 0 ? 18 : this.itemData.itemPriceFontSize);
        this.itemPrice.setPosition(this.itemData.itemPricePos.x + 10, this.itemData.itemPricePos.y);
        this.addChild(this.itemPrice);
        this.itemDiscountText = new OText("",false,this.itemData.itemPriceFontSize - 1);
        this.addChild(this.itemDiscountText);
        this.lineText = new OText("",false,this.itemData.itemPriceFontSize - 1);
        this.addChild(this.lineText);
        this.itemName = new OText(this.itemData.itemName);
        this.itemName.setFont(this.itemData.itemFontName);
        this.itemName.setTextSize(this.itemData.itemNameFontSize == 0 ? 18 : this.itemData.itemNameFontSize);
        this.itemName.setPosition(this.itemData.itemNamePos.x, this.itemData.itemNamePos.y);
        this.addChild(this.itemName);
        this.addEvent("click", function() {
            tv.scene.showItemDetail(t.itemData, false)
        });
        this.update()
    }
    ;
    this.update = function() {
        var t = GloableData.getInstance().getItemPurchaseInfoById(this.itemData.itemId);
        if (this.itemData.itemStatus == 2) {
            this.itemBuyBtn.setVisible(false);
            this.itemDisabledPic.setVisible(true);
            this.itemEnablePic.setVisible(false)
        } else if (t) {
            if (t.count < t.max) {
                if (this.itemData.itemType == gloableStaticData.MALL_VAR_TYPE) {
                    this.itemBuyBtn.setVisible(true);
                    this.itemDisabledPic.setVisible(false);
                    this.itemEnablePic.setVisible(false);
                    this.itemPrice.setText("0 " + mallUnit)
                } else {
                    this.itemBuyBtn.setVisible(false);
                    this.itemDisabledPic.setVisible(false);
                    this.itemEnablePic.setVisible(true);
                    this.setPrice()
                }
            } else {
                if (this.itemData.isRepeat && this.itemData.itemType == gloableStaticData.MALL_VAR_TYPE) {
                    this.itemBuyBtn.setVisible(true);
                    this.itemDisabledPic.setVisible(false);
                    this.itemEnablePic.setVisible(false);
                    this.setPrice()
                } else {
                    this.itemBuyBtn.setVisible(false);
                    this.itemDisabledPic.setVisible(false);
                    this.itemEnablePic.setVisible(true);
                    this.setPrice()
                }
            }
        } else {
            this.itemBuyBtn.setVisible(true);
            this.itemDisabledPic.setVisible(false);
            this.itemEnablePic.setVisible(false);
            this.setPrice()
        }
        if (clientType == 1 && mallPriceType && this.itemData.wanzi_price <= 0) {
            this.setVisible(false);
            this.itemBuyBtn.setVisible(false);
            this.itemDisabledPic.setVisible(false);
            this.itemEnablePic.setVisible(false)
        }
    }
    ;
    this.setPrice = function() {
        var t = this.itemData.itemPrice;
        if (mallPriceType) {
            t = this.itemData.discount_wanzi_price
        }
        this.itemPrice.setText(" " + t + mallUnit);
        if (this.itemData.discount && mallPriceType) {
            var e = " " + this.itemData.wanzi_price + mallUnit;
            this.itemDiscountText.setText(e);
            this.itemDiscountText.setPosition(this.itemData.itemPricePos.x + this.itemDiscountText.textWidth, this.itemData.itemPricePos.y);
            var i = "";
            for (var a = 0; a < e.length; a++) {
                i += "—"
            }
            this.lineText.setText(i);
            this.lineText.setPosition(this.itemDiscountText.x, this.itemDiscountText.y)
        }
    }
    ;
    this.init()
}

function GameMallMessage(t, e) {
    OContainer.call(this);
    this.uiData = tv.gameMallBin;
    this.itemData = t;
    this.isBtn = e;
    this.itemPrice = this.itemData.itemPrice;
    if (clientType == 1 && mallPriceType == 1) {
        this.itemPrice = this.itemData.discount_wanzi_price
    }
    this.setBlockTouch(true);
    this.bg = null;
    this.confirmBtn = null;
    this.cancleBtn = null;
    this.itemName = null;
    this.itemDesc = null;
    this.namePos = null;
    this.descPos = null;
    this.flowerIcon = null;
    this.priceText = null;
    var i = GloableData.getInstance().getItemPurchaseInfoById(this.itemData.itemId);
    var a = i ? i.count : 0;
    var s = i ? i.max : 0;
    if (gGameWidth == 540 && gGameHeight == 960) {
        this.namePos = {
            x: 20,
            y: 320
        };
        this.descPos = {
            w: 287,
            h: 102
        }
    } else if (gGameWidth == 960 && gGameHeight == 540) {
        this.namePos = {
            x: 20,
            y: 160
        };
        this.descPos = {
            w: 336,
            h: 74
        }
    } else if (gGameWidth == 800 && gGameHeight == 600) {
        this.namePos = {
            x: 20,
            y: 185
        };
        this.descPos = {
            w: 336,
            h: 74
        }
    } else if (gGameWidth == 1280 && gGameHeight == 720) {
        this.namePos = {
            x: 20,
            y: 252
        };
        this.descPos = {
            w: 403,
            h: 74
        }
    }
    SAL_setElementBlockTouch(this, true);
    this.init = function() {
        var t = this;
        this.bg = new OBitmap("Graphics/UI/" + this.uiData.buyMessagePic);
        this.bg.setSize(gGameWidth, gGameHeight);
        this.addChild(this.bg);
        this.itemName = new OText(this.itemData.itemName);
        this.itemName.setFont(this.itemData.itemFontName);
        this.itemName.setTextSize(this.itemData.itemNameFontSize);
        this.itemName.setPosition(gGameWidth - this.itemName.textWidth >> 1, this.namePos.y);
        this.addChild(this.itemName);
        this.itemDesc = new OText(this.itemData.itemDesc);
        this.addChild(this.itemDesc);
        var e = this.uiData.cancelBuyBtn.x;
        var i = this.uiData.cancelBuyBtn.y;
        if (this.isBtn) {
            var a = tv.data.System.Buttons[this.uiData.confirmBuyBtn.index];
            this.confirmBtn = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
            this.confirmBtn.setPosition(this.uiData.confirmBuyBtn.x, this.uiData.confirmBuyBtn.y);
            this.addChild(this.confirmBtn);
            this.confirmBtn.addClick(function() {
                t.clickConfirm()
            });
            var s = tv.data.System.Buttons[this.uiData.cancelBuyBtn.index];
            this.cancleBtn = new ONButton("Graphics/Button/" + s.image1,"Graphics/Button/" + s.image2);
            this.cancleBtn.setPosition(e, i);
            this.addChild(this.cancleBtn);
            this.cancleBtn.addClick(function() {
                t.dispose()
            })
        } else {
            this.bg.addEvent("click", function() {
                t.dispose()
            })
        }
        var n = this.itemPrice;
        if (this.itemData.itemType == 2 && this.isBtn) {
            n = itemCost(this.itemData)
        }
        this.flowerIcon = new OBitmap(this.uiData.flowerPicUrl);
        this.addChild(this.flowerIcon);
        this.priceText = new OText(n + "朵");
        this.addChild(this.priceText)
    }
    ;
    this.clickConfirm = function() {
        var t = tv.getAvailableFlowerCount();
        if (clientType == 1 && mallPriceType) {
            t = tv.flowerMallWZ
        }
        if (a + 1 <= s) {
            tv.scene.successPurchase(this.itemData.itemId, 1)
        } else if (t >= this.itemPrice) {
            proceedCreateOrder(this.itemData.itemId, 1)
        } else {
            if (clientType == 1) {// hintMessage.setHint("鲜花不足")
            } else {
                this.showMessage()
            }
        }
        this.dispose()
    }
    ;
    this.showMessage = function() {
        if (Configuration.isH5) {
            var t = new AccountDetailConfirmInShop(this.itemData,1);
            SAL_addElement(tv.scene.element, t.element);
            t.init()
        } else {
            var e = new PurchaseResultMessage("鲜花不足","确定","鲜花充值",null,this.rechargeCallback,this.itemPrice);
            tv.scene.addChild(e.mallMessageContainer)
        }
    }
    ;
    this.rechargeFail = function() {
        var t = new PurchaseResultMessage("充值失败","确定");
        tv.scene.addChild(t.mallMessageContainer)
    }
    ;
    this.rechargeCallback = function(t) {
        if (t > 0) {
            proceedCreateOrder(this.itemData.itemId, 1)
        } else {
            this.rechargeFail()
        }
    }
    ;
    this.setMallMessageElements = function() {
        var t = this.uiData.cancelBuyBtn.x;
        var e = this.uiData.cancelBuyBtn.y;
        this.itemDesc.setFont(this.itemData.itemFontName);
        this.itemDesc.setTextSize(this.itemData.itemPriceFontSize);
        this.itemDesc.setSize(this.descPos.w, this.descPos.h);
        this.itemDesc.setPosition(gGameWidth - this.descPos.w >> 1, this.itemName.y + 42);
        this.flowerIcon.setPosition(t, e - 50);
        this.priceText.setFont(this.itemData.itemFontName);
        this.priceText.setTextSize(this.itemData.itemPriceFontSize);
        this.priceText.setPosition(t + this.flowerIcon.width + 5, e - 50)
    }
    ;
    this.init()
}

function SAddictionPrevention(t) {
    var I = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var w = arguments[2];
    OContainer.call(this);
    var e;
    var y = gGameWidth * .5;
    var _ = gGameHeight * .5;
    var b = (gGameWidth - y) / 2;
    var T = (gGameHeight - _) / 2;
    this.init = function() {
        SAL_setElementIndex(g, this.element, 100100);
        this.setPosition(gGameX, 0);
        this.setSize(gGameWidth, gGameHeight);
        this.setBlockTouch(true);
        this.createElements();
        this.addElementsToContainer();
        this.setElementsAttribute(I)
    }
    ;
    this.createElements = function() {
        this.contentBg = new OBitmap(addictionPreventionContentBgPath);
        this.titleBg = new OBitmap(addictionPreventionTitleBgPath);
        this.title = new OText("防沉迷提醒");
        this.content = new OText(t);
        this.saveDataBitmap = new OBitmap(autoSaveJxPath);
        this.saveDataText = new OText("存档");
        this.exitBitmap = new OBitmap(autoSaveKsPath);
        this.exitText = new OText("退出");
        this.gotoWebView = new OBitmap(autoSaveJxPath);
        this.gotoWebViewText = new OText("")
    }
    ;
    this.addElementsToContainer = function() {
        this.addChild(this.contentBg);
        this.addChild(this.titleBg);
        this.addChild(this.title);
        this.addChild(this.content);
        this.addChild(this.saveDataBitmap);
        this.addChild(this.saveDataText);
        this.addChild(this.exitBitmap);
        this.addChild(this.exitText);
        this.addChild(this.gotoWebView);
        this.addChild(this.gotoWebViewText)
    }
    ;
    this.setElementsAttribute = function() {
        var t = this;
        var e = void 0;
        var i = void 0;
        var a = I ? 110 : 145;
        var s = 46;
        var n = gGameHeight == 720 && gGameWidth == 1280 ? 1.3 : 1;
        this.contentBg.setSize(y, _);
        this.contentBg.setPosition(b, T);
        this.titleBg.setSize(y, parseInt(_ * .25));
        this.titleBg.setPosition(b, T);
        this.title.setSize(y, parseInt(_ * .25));
        this.title.setColor(get16Color("#ffffff"));
        if (clientType == 1 || clientType == 5) {
            this.title.setColor(get16Color("#000000"))
        }
        switch (w) {
        case 0:
            this.gotoWebViewText.setText("去登录");
            break;
        case 1:
            this.gotoWebViewText.setText("去实名");
            break;
        case 2:
            this.gotoWebViewText.setText("检查实名");
            break
        }
        this.setElementsAttributeByScreenType();
        var c = SAL_getElementWidth(this.titleBg.element);
        var u = SAL_getElementHeight(this.titleBg.element);
        var f = SAL_getElementPosX(this.titleBg.element);
        var d = SAL_getElementPosY(this.titleBg.element);
        var m = SAL_getTextSize(this.title.element);
        e = parseInt(this.titleBg.x + (this.titleBg.width - this.title.textWidth) / 2);
        i = parseInt(this.titleBg.y + (this.titleBg.height - this.title.textHeight) / 2);
        this.title.setPosition(e, i);
        this.content.setColor(get16Color("#000000"));
        var r = SAL_getElementWidth(this.content.element);
        var o = SAL_getElementHeight(this.content.element);
        e = parseInt(b + (y - r) / 2);
        i = parseInt(T + (_ - o) / 2);
        this.content.setPosition(e, i);
        var h = parseInt(this.saveDataBitmap.x + (a * n - this.saveDataText.textWidth) / 2);
        var l = parseInt(this.saveDataBitmap.y + (s * n - this.saveDataText.textHeight) / 2);
        var g = parseInt(this.exitBitmap.x + (a * n - this.exitText.textWidth) / 2);
        var v = parseInt(this.exitBitmap.y + (s * n - this.exitText.textHeight) / 2);
        var p = parseInt(this.gotoWebView.x + (a * n - this.gotoWebViewText.textWidth) / 2);
        var S = parseInt(this.gotoWebView.y + (s * n - this.gotoWebViewText.textHeight) / 2);
        this.saveDataText.setFont("方正品尚黑简体");
        this.saveDataText.setColor(get16Color("#ffffff"));
        this.saveDataText.setPosition(h, l);
        this.exitText.setFont("方正品尚黑简体");
        this.exitText.setColor(get16Color("#000000"));
        this.exitText.setPosition(g, v);
        this.gotoWebViewText.setFont("方正品尚黑简体");
        this.gotoWebViewText.setColor(get16Color("#ffffff"));
        this.gotoWebViewText.setPosition(p, S);
        if (clientType == 1 || clientType == 5) {
            this.saveDataText.setColor(get16Color(clientType == 5 ? "#ffffff" : "#000000"));
            this.gotoWebViewText.setColor(get16Color(clientType == 5 ? "#ffffff" : "#000000"))
        }
        this.exitBitmap.addEvent("click", function() {
            t.exitButtonCallback()
        });
        this.saveDataBitmap.addEvent("click", function() {
            t.saveDataButtonCallback()
        });
        this.gotoWebView.addEvent("click", function() {
            if (w === 0 && GloableData.getInstance().isMobile()) {
                SAL_Login(function() {
                    SAL_exit()
                })
            } else if (w === 0 && Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                SAL_Login(function() {
                    aBoxRefreshPage()
                })
            } else if (clientType == 1) {
                SAL_openWebView(webConfig.GET_WANMAN_ADDICTION_PREVENTION_IDENTIFY + "?token=" + GloableData.getInstance().userData.token + "&mobileVer=" + clientVersion + "&platform=" + GloableData.getInstance().userData.platform.toLowerCase() + "&action=name_identify")
            } else if (clientType == 5) {
                SAL_openWebView(webConfig.GET_WORLD_ADDICTION_PREVENTION_IDENTIFY + "?token=" + GloableData.getInstance().userData.token + "&mobileVer=" + clientVersion + "&platform=" + GloableData.getInstance().userData.platform.toLowerCase() + "&action=name_identify")
            } else if (GloableData.getInstance().userData.platform.toLowerCase().indexOf("android") >= 0 && !getMobileVer(addictionAver) && w === 2) {
                SAL_openWebView(webConfig.GET_ADDICTION_PREVENTION_IDENTIFY + "?token=" + GloableData.getInstance().userData.token + "&mobileVer=" + clientVersion + "&platform=" + GloableData.getInstance().userData.platform.toLowerCase() + "&action=name_identify")
            } else if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                SAL_openWebView(webConfig.GET_ADDICTION_PREVENTION_IDENTIFY_PC)
            } else {
                SAL_openWebView("client:certification")
            }
        });
        if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
            this.exitBitmap.setVisible(false);
            this.exitText.setVisible(false)
        }
    }
    ;
    this.setContentText = function(t) {
        switch (t) {
        case 0:
            e = "今日游玩时长已达到上限，无法继续浏览作品。\n根据未成年人防沉迷规定，\n未成年用户非法定节假日每日限玩1.5小时。\n你可选择存档或退出作品。";
            break;
        case 1:
            e = "今日游玩时长已达到上限，无法继续浏览作品。\n根据未成年人防沉迷规定，\n未成年用户法定节假日每日限玩3小时。\n你可选择存档或退出作品。";
            break;
        case 2:
            e = "根据未成年人防沉迷规定，\n未成年用户每日22时至次日8时禁止浏览作品。\n你可选择存档或退出作品。";
            break
        }
    }
    ;
    this.saveDataButtonCallback = function() {
        this.dispose();
        tv.scene = new SSavefile(false,true)
    }
    ;
    this.exitButtonCallback = function() {
        SAL_exit()
    }
    ;
    this.setElementsAttributeByScreenType = function() {
        var t = parseInt(T + _);
        switch (gGameWidth) {
        case 800:
            this.title.setTextSize(24);
            this.content.setTextSize(18);
            this.content.setSize(350, 72);
            if (I) {
                this.gotoWebView.setSize(110, 46);
                this.saveDataBitmap.setSize(110, 46);
                this.exitBitmap.setSize(110, 46);
                this.gotoWebView.setPosition((gGameWidth - 110) / 2, t - 71);
                this.saveDataBitmap.setPosition(b + y - 140, t - 71);
                this.exitBitmap.setPosition(b + 30, t - 71);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + 30, t - 91);
                    this.saveDataBitmap.setPosition(b + y - 175, t - 91)
                }
            } else {
                this.setWanManSize();
                this.gotoWebView.setPosition(b + y - 175, t - 71);
                this.exitBitmap.setPosition(b + 30, t - 71);
                this.saveDataBitmap.setVisible(false);
                this.saveDataText.setVisible(false);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + (y - 145) / 2, t - 91)
                }
            }
            break;
        case 960:
            this.title.setTextSize(24);
            this.content.setTextSize(18);
            this.content.setSize(400, 72);
            if (I) {
                this.gotoWebView.setSize(110, 46);
                this.saveDataBitmap.setSize(110, 46);
                this.exitBitmap.setSize(110, 46);
                this.gotoWebView.setPosition((gGameWidth - 110) / 2, t - 71);
                this.saveDataBitmap.setPosition(b + y - 160, t - 71);
                this.exitBitmap.setPosition(b + 50, t - 71);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + 50, t - 71);
                    this.saveDataBitmap.setPosition(b + y - 195, t - 71)
                }
            } else {
                this.setWanManSize();
                this.gotoWebView.setPosition(b + y - 195, t - 71);
                this.exitBitmap.setPosition(b + 50, t - 71);
                this.saveDataBitmap.setVisible(false);
                this.saveDataText.setVisible(false);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + (y - 145) / 2, t - 71)
                }
            }
            break;
        case 1280:
            this.title.setTextSize(32);
            this.content.setTextSize(24);
            this.content.setSize(540, 96);
            this.exitBitmap.setScale(1.3, 1.3);
            this.saveDataBitmap.setScale(1.3, 1.3);
            this.gotoWebView.setScale(1.3, 1.3);
            if (I) {
                this.gotoWebView.setSize(110, 46);
                this.saveDataBitmap.setSize(110, 46);
                this.exitBitmap.setSize(110, 46);
                this.gotoWebView.setPosition((gGameWidth - 110 * 1.3) / 2, t - 90);
                this.saveDataBitmap.setPosition(b + y - 205, t - 90);
                this.exitBitmap.setPosition(b + 60, t - 90);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + 60, t - 90);
                    this.saveDataBitmap.setPosition(b + y - 250, t - 90)
                }
            } else {
                this.setWanManSize();
                this.gotoWebView.setPosition(b + y - 250, t - 90);
                this.exitBitmap.setPosition(b + 60, t - 90);
                this.saveDataBitmap.setVisible(false);
                this.saveDataText.setVisible(false);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + (y - 145 * 1.3) / 2, t - 90)
                }
            }
            break;
        case 540:
            var e = 30;
            var i = 345;
            this.contentBg.setSize(480, 270);
            this.contentBg.setPosition(e, i);
            this.titleBg.setSize(480, 86);
            this.titleBg.setPosition(e, i);
            this.title.setTextSize(24);
            this.content.setTextSize(18);
            this.content.setSize(400, 72);
            if (I) {
                this.gotoWebView.setSize(110, 46);
                this.saveDataBitmap.setSize(110, 46);
                this.exitBitmap.setSize(110, 46);
                this.gotoWebView.setPosition((gGameWidth - 110) / 2, 615 - 71);
                this.saveDataBitmap.setPosition(510 - 160, 615 - 71);
                this.exitBitmap.setPosition(80, 615 - 71);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(80, 615 - 71);
                    this.saveDataBitmap.setPosition(510 - 195, 615 - 71)
                }
            } else {
                this.setWanManSize();
                this.gotoWebView.setPosition(510 - 195, 615 - 71);
                this.exitBitmap.setPosition(80, 615 - 71);
                this.saveDataBitmap.setVisible(false);
                this.saveDataText.setVisible(false);
                if (Configuration.isH5 && !GloableData.getInstance().isMobile()) {
                    this.gotoWebView.setPosition(b + (y - 145) / 2, 615 - 71)
                }
            }
            break
        }
    }
    ;
    this.setWanManSize = function() {
        if (clientType == 1 || clientType == 5) {
            this.gotoWebView.setSize(145, 46);
            this.saveDataBitmap.setSize(145, 46);
            this.exitBitmap.setSize(145, 46)
        }
    }
    ;
    this.update = function() {}
    ;
    this.init()
}

function GameFreeTip() {
    OContainer.call(this);
    this.postionObj = {};
    this.init = function() {
        var t = this;
        this.tipsMsg = new OText;
        this.tipsMsg.setSize(this.postionObj.text.w, 50);
        this.tipsMsg.setColor(get16Color("#ffffff"));
        this.tipsMsg.setPosition(this.postionObj.text.x, this.postionObj.text.y);
        var e = "";
        var i = "";
        if (GloableData.getInstance().isFreeLimit) {
            i = GloableData.getInstance().msg_free
        }
        if (GloableData.getInstance().isLightDay) {
            i = GloableData.getInstance().msg_lightDay
        }
        if (GloableData.getInstance().isLightVIP) {
            i = GloableData.getInstance().msg_lightVip
        }
        if (GloableData.getInstance().isLightVIP || GloableData.getInstance().isLightDay) {
            e = i
        } else {
            if (this.getMallItemName().length > 0) {
                e = i + this.getMallItemName() + "。"
            } else {
                e = "该作品中没有限免类商品。"
            }
        }
        if (GloableData.getInstance().isWXmini) {
            e = freeTips
        }
        this.tipsMsg.setText(e);
        var a = this.postionObj.text.w + 80;
        var s = this.tipsMsg.height + 24;
        this.bg = new OBitmap(autoSaveMaskPath);
        this.addChild(this.bg);
        this.bg.setSize(a, s);
        this.tipsMsg.setPosition(this.postionObj.text.x, s - this.tipsMsg.textHeight >> 1);
        this.addChild(this.tipsMsg);
        this.closeBtn = new OText("x");
        this.closeBtn.setColor(get16Color("#ffffff"));
        this.closeBtn.setTextSize(30);
        this.closeBtn.setPosition(this.tipsMsg.x + this.tipsMsg.width + this.postionObj.close.x, s - this.closeBtn.textHeight >> 1);
        this.addChild(this.closeBtn);
        this.closeBtn.addEvent("click", function() {
            t.dispose()
        });
        this.setPosition(gGameWidth - a >> 1, gGameHeight - s - this.postionObj.bg.bottom)
    }
    ;
    this.getMallItemName = function() {
        var t = "";
        var e = void 0;
        if (GloableData.getInstance().isNewMall()) {
            e = tv.gameNewMall.goodList.goods
        } else {
            e = tv.gameMallBin.items
        }
        for (var i = 0; i < e.length; i++) {
            var a = e[i];
            if (a.itemStatus !== 2 && a.itemType == 1) {
                t += "、" + a.itemName
            }
        }
        return t.substr(1)
    }
    ;
    if (GloableData.getInstance().isScreenHorizontal()) {
        this.postionObj = {
            round: 8,
            bg: {
                color: "#2e2f31",
                alpha: .9,
                bottom: 30
            },
            text: {
                w: 480,
                x: 24,
                y: 12
            },
            close: {
                x: 24
            }
        }
    } else {
        this.postionObj = {
            round: 8,
            bg: {
                color: "#2e2f31",
                alpha: .9,
                bottom: 42
            },
            text: {
                w: 300,
                x: 24,
                y: 12
            },
            close: {
                x: 24
            }
        }
    }
}

function WanManTip() {
    OContainer.call(this);
    this.init = function() {
        var t = this;
        this.tipsMsg = new OText("作者暂时未设置丸子商城，可前往橙光M站或者PC端购买鲜花商城的道具后，返回丸漫继续阅读体验");
        this.tipsMsg.setSize(this.postionObj.text.w, 50);
        this.tipsMsg.setColor(get16Color("#ffffff"));
        this.tipsMsg.setPosition(this.postionObj.text.x, this.postionObj.text.y);
        var e = this.postionObj.text.w + 80;
        var i = this.postionObj.bg.height;
        this.bg = new OBitmap(autoSaveMaskPath);
        this.addChild(this.bg);
        this.bg.setSize(e, i);
        this.addChild(this.tipsMsg);
        this.closeBtn = new OText("x");
        this.closeBtn.setColor(get16Color("#ffffff"));
        this.closeBtn.setTextSize(30);
        this.closeBtn.setPosition(this.tipsMsg.x + this.tipsMsg.width + this.postionObj.close.x, i - this.closeBtn.textHeight >> 1);
        this.addChild(this.closeBtn);
        this.closeBtn.addEvent("click", function() {
            t.dispose()
        });
        this.setPosition(gGameWidth - e >> 1, gGameHeight - i - this.postionObj.bg.bottom)
    }
    ;
    if (GloableData.getInstance().isScreenHorizontal()) {
        this.postionObj = {
            round: 8,
            bg: {
                color: "#2e2f31",
                height: 74,
                alpha: .9,
                bottom: 30
            },
            text: {
                w: 480,
                x: 24,
                y: 12
            },
            close: {
                x: 24
            }
        }
    } else {
        this.postionObj = {
            round: 8,
            bg: {
                color: "#2e2f31",
                height: 105,
                alpha: .9,
                bottom: 42
            },
            text: {
                w: 300,
                x: 24,
                y: 12
            },
            close: {
                x: 24
            }
        }
    }
}

function SGameTimeMall() {
    var t = this;
    var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    OContainer.call(this);
    this.data = tv.gameTimeMall;
    this.setAlpha(0);
    this.fadeFps = e;
    this.fadeTo(1, this.fadeFps / 60 * 1e3);
    if (clientType == 1 && mallPriceType) {
        mallUnit = "个";
        mallFlowerText = "剩余丸子";
        this.data.flowerPicUrl = wanziIcon
    } else {
        mallUnit = "朵";
        mallFlowerText = "剩余鲜花";
        this.data.flowerPicUrl = fileListFato("Graphics/UI/" + this.data.flowerPic);
        if (localProjectPath) {
            this.data.flowerPicUrl = "Graphics/UI/" + this.data.flowerPic
        }
    }
    var d = void 0;
    var a = void 0;
    var n = void 0;
    var r = void 0;
    var o = void 0;
    var h = void 0;
    var m = void 0;
    var l = void 0;
    var c = void 0;
    var u = void 0;
    var s = void 0;
    var v = void 0;
    var p = void 0;
    var S = void 0;
    var f = void 0;
    var I = void 0;
    this.mallItems = [];
    this.init = function() {
        var e = this;
        this.setBlockTouch(true);
        SAL_setElementIndex(g, this.element, 6600);
        this.setPosition(gGameX, 0);
        GloableData.getInstance().setNewMallCount();
        d = new OBitmap("graphics/UI/" + this.data.backPic);
        this.addChild(d);
        c = new OBitmap("graphics/UI/" + this.data.viewItemPortPic);
        this.addChild(c);
        c.setPosition(this.data.viewItemPortPicPos.x, this.data.viewItemPortPicPos.y);
        c.setSize(this.data.viewItemPortPicSize.w, this.data.viewItemPortPicSize.h);
        this.showHalf();
        I = new OContainer(this.width,this.height);
        this.addChild(I);
        v = this.data.goodList.goodCount > 6 ? 6 : this.data.goodList.goodCount;
        p = this.data.goodList.goodCount;
        h = p % 6 > 0 ? parseInt(p / 6) + 1 : parseInt(p / 6);
        o = 1;
        this.initTurnPageBtn();
        this.changePage(o);
        l = new OText(mallFlowerText);
        l.setFont(this.data.flowerHuaTx.font);
        l.setTextSize(this.data.flowerHuaTx.fontSize);
        l.setColor(this.data.flowerHuaTx.fontColor);
        l.setPosition(this.data.flowerHuaTxPos.x, this.data.flowerHuaTxPos.y);
        this.addChild(l);
        m = new OBitmap(this.data.flowerPicUrl);
        m.setPosition(this.data.flowerPicPos.x, this.data.flowerPicPos.y);
        this.addChild(m);
        u = new OText(tv.getAvailableFlowerCount() + " " + mallUnit);
        u.setFont(this.data.flowerHuaTx.font);
        u.setTextSize(this.data.flowerHuaTx.fontSize);
        u.setColor(this.data.flowerHuaTx.fontColor);
        u.setPosition(this.data.flowerHuaNumbuerPos.x, this.data.flowerHuaTxPos.y);
        this.addChild(u);
        var t = tv.data.System.Buttons[this.data.closeBtn.index];
        n = new ONButton("graphics/Button/" + t.image1,"graphics/Button/" + t.image2);
        n.setTransparencyFiltering(true);
        n.setPosition(this.data.closeBtn.x, this.data.closeBtn.y);
        this.addChild(n);
        n.addClick(function() {
            e.closeBtnClick()
        });
        var i = tv.data.System.Buttons[this.data.tipBtn.index];
        S = new ONButton("graphics/Button/" + i.image2,"graphics/Button/" + i.image2,this.data.tipName);
        S.setTransparencyFiltering(true);
        S.setPosition(this.data.tipBtn.x, this.data.tipBtn.y);
        this.addChild(S);
        if (tv.gameNewMall.tipBtn) {
            var a = tv.data.System.Buttons[tv.gameNewMall.tipBtn.index];
            f = new ONButton("graphics/Button/" + a.image1,"graphics/Button/" + a.image2,tv.gameNewMall.tipName);
            f.setTransparencyFiltering(true);
            f.setPosition(tv.gameNewMall.tipBtn.x, tv.gameNewMall.tipBtn.y);
            this.addChild(f);
            f.addClick(function() {
                e.closeView(false);
                tv.scene = new SGameNewMall
            })
        }
        var s = "";
        SAL_getStorage("timeTip" + GloableData.getInstance().userData.uid, function(t) {
            s = t;
            if (s != "" + serverTime.year + serverTime.month + serverTime.day) {
                e.tips = new TimeMallTip;
                e.tips.setPosition(20, 20);
                e.addChild(e.tips);
                e.tips.init()
            }
        });
        if (clientType == 1) {
            showSwitchPrice(function() {
                if (clientType == 1) {
                    e.showSwitchPriceIcon()
                }
            })
        }
        refreshShopInfo(1, function() {
            e.setTip()
        });
        this.timeID = SAL_setInterval(function() {
            e.timerLoop()
        }, 1e3)
    }
    ;
    this.setTip = function() {
        if (clientType == 1 && !this.getHasWmPrice()) {
            var t = new WanManTip;
            this.addChild(t);
            t.init()
        }
    }
    ;
    this.upPage = function() {
        this.changePage(o)
    }
    ;
    this.timerLoop = function() {
        if (this.mallItems.length < 1)
            return;
        for (var t = 0; t < this.data.goodList.goods.length; t++) {
            this.data.goodList.goods[t].sell_countdown--
        }
        for (var e = 0; e < this.mallItems.length; e++) {
            this.mallItems[e].update()
        }
        this.buyItem && this.buyItem.update()
    }
    ;
    this.updateItem = function() {
        this.resetFlowerNumberText();
        for (var t = 0; t < this.mallItems.length; t++) {
            this.mallItems[t].update()
        }
    }
    ;
    this.showStatusView = function(t) {
        var e = this;
        if (t == 1) {
            GloableData.getInstance().isTimeMallGoods = 1
        }
        var i = "限时商品仅限当前档位使用，请及时存档，避免因读档错误或达成结局等导致商品消失。";
        var a = new CommonMessage(t == 1 ? i : "购买失败","去存档",this.goSave,null,null,t == 1 ? "购买成功" : "购买失败");
        a.isShowSuccenBg = t == 1;
        this.addChild(a);
        a.init();
        refreshItemPrice(function() {
            GloableData.getInstance().timeMallSort();
            e.changePage(o)
        }, 1)
    }
    ;
    this.goSave = function() {
        t.closeView(false);
        tv.scene = new SSavefile(false,true)
    }
    ;
    this.setTimeMallSuccessFlag = function() {
        this.updateItem();
        this.showStatusView(1)
    }
    ;
    this.initTurnPageBtn = function() {
        r = new Object;
        var t = this;
        var e = tv.data.System.Buttons[this.data.nextPageBtn.index];
        var i = tv.data.System.Buttons[this.data.previousPageBtn.index];
        if (h <= 1) {
            return
        }
        var a = new ONButton("Graphics/Button/" + e.image1,"Graphics/Button/" + e.image2);
        a.setPosition(this.data.nextPageBtn.x, this.data.nextPageBtn.y);
        this.addChild(a);
        a.addClick(function() {
            if (o >= h) {
                return
            } else {
                o += 1;
                t.changePage(o)
            }
        });
        var s = new ONButton("Graphics/Button/" + i.image1,"Graphics/Button/" + i.image2);
        s.setPosition(this.data.previousPageBtn.x, this.data.previousPageBtn.y);
        this.addChild(s);
        s.addClick(function() {
            if (o <= 1) {
                return
            } else {
                o -= 1;
                t.changePage(o)
            }
        });
        var n = new OText(o + " / " + h);
        n.setFont(this.data.pageNumber.font);
        n.setTextSize(this.data.pageNumber.fontSize);
        n.setColor(this.data.pageNumber.fontColor);
        n.setPosition(this.data.numberPagePos.x, this.data.numberPagePos.y);
        this.addChild(n);
        r.nextPageBtn = a;
        r.previousPageBtn = s;
        r.pageNumber = n;
        if (this.data.goodList.goodCount < 6) {
            a.setVisible(false);
            s.setVisible(false)
        }
    }
    ;
    this.changePage = function(t) {
        for (var e = 0; e < this.mallItems.length; e++) {
            this.mallItems[e] && this.mallItems[e].dispose()
        }
        this.mallItems = [];
        for (var i = 0; i < this.data.goodList.goodCount; i++) {
            if (t == h) {
                if ((t - 1) * 6 - 1 < i) {
                    this.setMallItem(this.data.goodList.goods[i], i)
                }
            } else {
                if ((t - 1) * 6 <= i && i <= t * 6 - 1) {
                    this.setMallItem(this.data.goodList.goods[i], i)
                }
            }
        }
        if (r.pageNumber) {
            r.pageNumber.setText(o + " / " + h)
        }
    }
    ;
    this.setMallItem = function(t, e) {
        e = e > 5 ? e % 6 : e;
        var i = new SGameTimeMallItem(t);
        I.addChild(i);
        i.setPosition(this.data.itemPosList[e].x, this.data.itemPosList[e].y);
        i.init();
        i.setComponent(this.data);
        this.mallItems.push(i)
    }
    ;
    this.sortMallItem = function() {
        var t = this.data.goodList.goods;
        for (var e = 0; e < t.length; e++) {
            for (var i = 0; i < t.length - e; i++) {
                if (!t[i + 1]) {
                    continue
                }
                if (t[i].itemId > t[i + 1].itemId) {
                    var a = t[i];
                    t[i] = t[i + 1];
                    t[i + 1] = a
                }
            }
        }
    }
    ;
    this.showHalf = function() {
        if (this.data.isOaf && this.data.oafInfo && this.data.oafInfo.oafName) {
            var t = "graphics/oafs/" + this.data.oafInfo.oafName + ".oaf2";
            if (tv.oaf2Data.hasOwnProperty(t)) {
                s = tv.oaf2Data[t]
            }
            if (s) {
                this.animation = new CAnimation(s.MaxWidth,s.MaxHeight);
                var e = [];
                for (var i = 0; i < this.data.oafInfo.indexCount; i++) {
                    e.push(this.data.oafInfo.indexs[i].actIndex + "," + this.data.oafInfo.indexs[i].actType)
                }
                this.animation.loadData(t, e);
                this.addChild(this.animation)
            } else {
                var t = ("graphics/oafs/" + this.data.oafInfo.oafName + "/" + this.data.oafInfo.errorPic.name).toLowerCase();
                a = new OBitmap(t);
                a.setPosition(this.data.halfPos.x, this.data.halfPos.y);
                this.addChild(a)
            }
        } else {
            a = new OBitmap("graphics/UI/" + this.data.halfPic);
            a.setPosition(this.data.halfPos.x, this.data.halfPos.y);
            this.addChild(a)
        }
    }
    ;
    this.switchBtn = null;
    this.switchOpenBtn = null;
    this.isOpenSwitch = true;
    this.showSwitchPriceIcon = function() {
        var t = this;
        if (GloableData.getInstance().isSwitchPrice) {
            this.switchOpenBtn = new OBitmap(wmMallCloseMenu);
            this.switchOpenBtn.setPosition(0, 37);
            this.addChild(this.switchOpenBtn);
            this.switchOpenBtn.addEvent("click", function() {
                if (t.isOpenSwitch) {
                    t.switchBtn.setVisible(false);
                    t.switchOpenBtn.setUrl(wmMallOpenMenu)
                } else {
                    t.switchBtn.setVisible(true);
                    t.switchOpenBtn.setUrl(wmMallCloseMenu)
                }
                t.isOpenSwitch = !t.isOpenSwitch
            });
            var e = mallPriceType ? wmMallSwitchXHMenu : wmMallSwitchWZMenu;
            this.switchBtn = new ONButton(e,e);
            this.switchBtn.setPosition(35, 28);
            this.addChild(this.switchBtn);
            this.switchBtn.addClick(function() {
                mallPriceType = !mallPriceType;
                t.closeView();
                tv.scene = new SGameNewMall
            })
        }
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.closeView()
            }
        })
    }
    ;
    this.isBuy = false;
    this.closeBtnClick = function() {
        this.closeView()
    }
    ;
    this.closeView = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        for (var e = 0; e < this.mallItems.length; e++) {
            this.mallItems[e] && this.mallItems[e].dispose()
        }
        this.mallItems = [];
        if (t) {
            if (tv.CUIFromIndex != -1) {
                tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(tv.CUIFromIndex)
            } else {
                tv.scene = new SGame
            }
        }
        SAL_clearInterval(this.timeID);
        this.dispose()
    }
    ;
    this.update = function() {}
    ;
    this.resetFlowerNumberText = function() {
        u.setText(tv.getAvailableFlowerCount() + " " + mallUnit);
        if (mallPriceType) {
            u.setText(tv.flowerMallWZ + " " + mallUnit)
        } else {
            u.setText(tv.getAvailableFlowerCount() + " " + mallUnit)
        }
    }
    ;
    this.successPurchase = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var a = arguments[3];
        GloableData.getInstance().useTimeMallBuyItem.addItem(t, e);
        mallProxy.useTimeItemOnly(t, e, a);
        this.updateItem();
        this.showStatusView(1)
    }
    ;
    this.buyItem = null;
    this.showItemDetail = function(t, e, i) {
        this.buyItem = new SGameTimeMallBuyItem(t,e,i);
        this.addChild(this.buyItem);
        this.buyItem.init()
    }
    ;
    this.getHasWmPrice = function() {
        for (var t = 0; t < this.data.goodList.goods.length; t++) {
            if (this.data.goodList.goods[t].wanzi_price) {
                return true
            }
        }
        return false
    }
    ;
    gLoadAssets.curLoadScene = "TimeMall";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function SGameTimeMallItem(t) {
    OContainer.call(this);
    this.itemData = t;
    this.itemNameText = null;
    this.itemPriceText = null;
    this.itemDiscountText = null;
    this.itemDescText = null;
    this.itemBGPic = null;
    this.itemPicBg = null;
    this.itemPic = null;
    this.priceIcon = null;
    this.itemEnablePic = null;
    this.itemDisabledPic = null;
    this.btnBuy = null;
    this.itemSellInfo = null;
    this.sellNum = null;
    this.setComponent = function(t) {
        this.itemNameText.setVisible(t.viewIsShowItemName);
        this.itemDescText.setVisible(t.viewIsShowItemDesc);
        this.itemPic.setVisible(t.viewIsShowItemPic)
    }
    ;
    this.init = function() {
        var t = this;
        this.itemBGPic = new OBitmap("graphics/UI/" + this.itemData.itemViewBg);
        this.addChild(this.itemBGPic);
        this.itemBGPic.setSize(this.itemData.itemViewBGSize.w, this.itemData.itemViewBGSize.h);
        this.itemPicBg = new OBitmap("graphics/UI/" + this.itemData.itemPicBg);
        this.addChild(this.itemPicBg);
        this.itemPicBg.setPosition(this.itemData.itemPicBgPos.x, this.itemData.itemPicBgPos.y);
        this.itemPicBg.setSize(this.itemData.itemPicBgSize.w, this.itemData.itemPicBgSize.h);
        this.itemPic = new OBitmap("graphics/UI/" + this.itemData.itemPic);
        this.itemPic.setPosition(this.itemData.itemPicPos.x, this.itemData.itemPicPos.y);
        this.addChild(this.itemPic);
        this.itemPic.setSize(this.itemData.itemPicSize.w, this.itemData.itemPicSize.h);
        this.priceIcon = new OBitmap(tv.gameTimeMall.flowerPicUrl);
        this.priceIcon.setPosition(this.itemData.itemPriceFlowerPos.x, this.itemData.itemPriceFlowerPos.y);
        this.addChild(this.priceIcon);
        this.itemEnablePic = new OBitmap("graphics/UI/" + this.itemData.itemEnablePic);
        this.itemEnablePic.setPosition(this.itemData.itemCommityBtn.x, this.itemData.itemCommityBtn.y);
        this.addChild(this.itemEnablePic);
        this.itemEnablePic.setVisible(false);
        this.buttonData = tv.data.System.Buttons[this.itemData.itemCommityBtn.index];
        if (!this.buttonData) {
            this.buttonData = tv.data.System.Buttons[0]
        }
        this.btnBuy = new ONButton("graphics/Button/" + this.buttonData.image1,"graphics/Button/" + this.buttonData.image2);
        this.btnBuy.setTransparencyFiltering(true);
        this.btnBuy.setPosition(this.itemData.itemCommityBtn.x, this.itemData.itemCommityBtn.y);
        this.addChild(this.btnBuy);
        if (!timerPublish) {
            this.btnBuy.addClick(function() {
                if (t.itemData.sell_status == -1) {// hintMessage.setHint("商品开售后再来购买吧~")
                } else {
                    buyAction(t.itemData, 1)
                }
            })
        }
        this.itemPriceText = new OText(" " + this.itemData.itemPrice + " " + mallUnit);
        this.itemPriceText.setFont(this.itemData.itemPriceFontPro.font);
        this.itemPriceText.setTextSize(this.itemData.itemPriceFontPro.fontSize);
        this.itemPriceText.setColor(this.itemData.itemPriceFontPro.fontColor);
        this.itemPriceText.setPosition(this.itemData.itemPricePos.x, this.itemData.itemPricePos.y);
        this.addChild(this.itemPriceText);
        this.itemDiscountText = new OText("",false,this.itemData.itemPriceFontPro.fontSize - 1);
        this.addChild(this.itemDiscountText.element);
        this.lineText = new OText("",false,this.itemData.itemPriceFontPro.fontSize - 1);
        this.addChild(this.lineText.element);
        this.setPrice();
        this.itemDescText = new OText(this.itemData.itemDesc);
        this.itemDescText.setFont(this.itemData.itemDescFontPro.font);
        this.itemDescText.setTextSize(this.itemData.itemDescFontPro.fontSize);
        this.itemDescText.setColor(this.itemData.itemDescFontPro.fontColor);
        this.itemDescText.setPosition(this.itemData.itemDescSize.x, this.itemData.itemDescSize.y);
        this.itemDescText.setSize(this.itemData.itemDescSize.width, this.itemData.itemDescSize.height);
        this.addChild(this.itemDescText);
        this.itemNameText = new OText(this.itemData.itemName);
        this.itemNameText.setFont(this.itemData.itemNameFontPro.font);
        this.itemNameText.setTextSize(this.itemData.itemNameFontPro.fontSize);
        this.itemNameText.setColor(this.itemData.itemNameFontPro.fontColor);
        this.itemNameText.setPosition(this.itemData.itemNamePos.x, this.itemData.itemNamePos.y);
        this.addChild(this.itemNameText);
        this.itemSellInfo = new OText("");
        this.itemSellInfo.setFont(this.itemData.itemSellInfoFontPro.font);
        this.itemSellInfo.setTextSize(this.itemData.itemSellInfoFontPro.fontSize);
        this.itemSellInfo.setColor(this.itemData.itemSellInfoFontPro.fontColor);
        this.itemSellInfo.setPosition(this.itemData.itemSellInfoPoint.x, this.itemData.itemSellInfoPoint.y);
        this.addChild(this.itemSellInfo);
        this.sellNum = new OText("");
        this.sellNum.setFont(this.itemData.itemSellInfoFontPro.font);
        this.sellNum.setTextSize(this.itemData.itemSellInfoFontPro.fontSize);
        this.sellNum.setColor(this.itemData.itemSellInfoFontPro.fontColor);
        this.sellNum.setPosition(this.itemData.buyNumPos.x, this.itemData.buyNumPos.y);
        if (tv.gameTimeMall.isShowBuyNum) {
            this.addChild(this.sellNum)
        }
        this.addEvent("click", function() {
            tv.scene.showItemDetail(t.itemData, false, 1)
        });
        this.update()
    }
    ;
    this.getTime = function(t) {
        var e = parseInt(t / (60 * 60 * 24));
        var i = parseInt(t % (60 * 60 * 24) / (60 * 60));
        var a = parseInt(t % (60 * 60) / 60);
        var s = t % 60;
        if (e > 0) {
            return e + "天" + i + "时"
        } else {
            if (i > 0) {
                return i + "时" + a + "分"
            } else {
                return a + "分" + s + "秒"
            }
        }
    }
    ;
    this.update = function() {
        if (!this.itemData)
            return;
        if (this.itemData.sell_countdown <= 0) {
            if (this.itemData.sell_status == -1) {
                this.itemData.sell_status = 1;
                this.itemData.sell_countdown = this.itemData.prop_downtime - this.itemData.prop_uptime
            } else if (this.itemData.sell_status == 1) {
                this.itemData.sell_status = -2
            }
        }
        if (this.itemData.sell_status == -1) {
            this.btnBuy.setVisible(true);
            this.btnBuy.setInfo("graphics/Button/" + this.buttonData.image2, "graphics/Button/" + this.buttonData.image2);
            this.itemSellInfo.setText("准备中  " + this.getTime(this.itemData.sell_countdown) + "后开售")
        }
        if (this.itemData.sell_status == 1) {
            this.btnBuy.setVisible(true);
            this.btnBuy.setInfo("graphics/Button/" + this.buttonData.image1, "graphics/Button/" + this.buttonData.image2);
            this.itemSellInfo.setText("售卖中  " + this.getTime(this.itemData.sell_countdown) + "后结束")
        }
        if (this.itemData.sell_status == -2) {
            this.btnBuy.setVisible(false);
            if (tv.gameTimeMall.goodDetailPage.isShowNumbre) {
                this.itemSellInfo.setText("已结束 售出" + this.itemData.sell_count)
            } else {
                this.itemSellInfo.setText("已结束")
            }
        }
        var t = GloableData.getInstance().timeMallBuyItem.get(this.itemData.itemId);
        this.sellNum.setText("已购：" + (t ? t.count : 0) + "个");
        if (!this.itemData.isRepeat) {
            if (t && t.count > 0) {
                this.itemEnablePic.setVisible(true);
                this.btnBuy.setVisible(false)
            }
        }
        if (clientType == 1 && mallPriceType && this.itemData.wanzi_price <= 0) {
            this.setVisible(false)
        }
    }
    ;
    this.setPrice = function() {
        var t = this.itemData.itemPrice;
        if (mallPriceType) {
            t = this.itemData.discount_wanzi_price
        }
        this.itemPriceText.setText(" " + t + mallUnit);
        if (this.itemData.discount && mallPriceType) {
            var e = " " + this.itemData.wanzi_price + mallUnit;
            this.itemDiscountText.setText(e);
            this.itemDiscountText.setPosition(this.itemData.itemPricePos.x + this.itemDiscountText.textWidth, this.itemData.itemPricePos.y);
            var i = "";
            for (var a = 0; a < e.length; a++) {
                i += "—"
            }
            this.lineText.setText(i);
            this.lineText.setPosition(this.itemDiscountText.x, this.itemDiscountText.y)
        }
    }
}

function SGameTimeMallBuyItem(r, t, o) {
    OContainer.call(this);
    this.setBlockTouch(true);
    this.UIData = tv.gameTimeMall.goodDetailPage;
    this.itemData = r;
    this.isBtn = t;
    this.itemAllPrice = null;
    this.addBtn = null;
    this.minusBtn = null;
    this.confirmBtn = null;
    this.cancleBtn = null;
    this.itemBuyNumber = null;
    this.buyNumber = 1;
    var h = void 0;
    var l = void 0;
    var c = void 0;
    var u = void 0;
    var f = GloableData.getInstance().getItemPurchaseInfoById(this.itemData.itemId);
    var d = f ? f.count : 0;
    this.itemPrice = this.itemData.itemPrice;
    if (clientType == 1 && mallPriceType == 1) {
        this.itemPrice = this.itemData.discount_wanzi_price
    }
    this.init = function() {
        var t = this;
        h = new OBitmap("graphics/UI/" + this.UIData.bg);
        this.addChild(h);
        l = new OBitmap(fileListFato("graphics/UI/" + this.UIData.itemPicBg));
        this.addChild(l);
        l.setPosition(this.UIData.itemPicBgPos.x, this.UIData.itemPicBgPos.y);
        l.setSize(this.UIData.itemPicBgSize.w, this.UIData.itemPicBgSize.h);
        if (this.UIData.isShowItemPic) {
            c = new OBitmap("graphics/UI/" + this.itemData.itemPic);
            this.addChild(c);
            c.setPosition(this.UIData.itemPicPos.x, this.UIData.itemPicPos.y);
            c.setSize(this.UIData.itemPicSize.w, this.UIData.itemPicSize.h)
        }
        if (this.UIData.isShowItemDec) {
            this.itemDesc = new OText(this.itemData.itemDesc);
            this.itemDesc.setFont(this.itemData.itemDescFontPro.font);
            this.itemDesc.setTextSize(this.itemData.itemDescFontPro.fontSize);
            this.itemDesc.setColor(this.itemData.itemDescFontPro.fontColor);
            this.itemDesc.setPosition(this.UIData.itemDescSize.x, this.UIData.itemDescSize.y);
            this.itemDesc.setSize(this.UIData.itemDescSize.width, this.UIData.itemDescSize.height);
            this.addChild(this.itemDesc)
        }
        if (this.UIData.isShowItemName) {
            this.itemName = new OText(this.itemData.itemName);
            this.setTextData(this.itemName, this.itemData.itemNameFontPro);
            this.itemName.setPosition(this.UIData.itemNamePos.x, this.UIData.itemNamePos.y);
            this.addChild(this.itemName)
        }
        this.flowerHuaText = new OText("总价：");
        this.setTextData(this.flowerHuaText, this.itemData.itemNameFontPro);
        this.flowerHuaText.setPosition(this.UIData.itemAllPriceTxtPos.x, this.UIData.itemAllPriceTxtPos.y);
        this.addChild(this.flowerHuaText);
        this.timeText = new OText("");
        this.setTextData(this.timeText, this.itemData.itemNameFontPro);
        this.timeText.setPosition(this.UIData.timePos.x, this.UIData.timePos.y);
        if (this.UIData.isShowTime) {
            this.addChild(this.timeText)
        }
        this.tellInfo = new OText("售卖数量：" + this.itemData.sell_count);
        this.setTextData(this.tellInfo, this.itemData.itemNameFontPro);
        this.tellInfo.setPosition(this.UIData.tollNumPos.x, this.UIData.tollNumPos.y);
        if (this.UIData.isShowNumbre) {
            this.addChild(this.tellInfo)
        }
        u = new OBitmap(tv.gameTimeMall.flowerPicUrl);
        u.setPosition(this.UIData.itemAllPricePicPos.x, this.UIData.itemAllPricePicPos.y);
        this.addChild(u);
        this.buyNumber = this.UIData.varIndex == 0 ? 1 : this.UIData.varIndex;
        var e = "";
        switch (o) {
        case 0:
            if (f) {
                e = d + this.buyNumber <= f.max ? " 0 " + mallUnit : " " + this.itemPrice * this.buyNumber + " " + mallUnit
            } else {
                e = " " + this.itemPrice * this.buyNumber + " " + mallUnit
            }
            break;
        case 1:
            e = " " + this.itemPrice * this.buyNumber + " " + mallUnit;
            break
        }
        this.itemAllPrice = new OText(e);
        this.setTextData(this.itemAllPrice, this.itemData.itemNameFontPro);
        this.itemAllPrice.setPosition(this.UIData.itemAllPriceNumPos.x, this.UIData.itemAllPriceNumPos.y);
        this.addChild(this.itemAllPrice);
        if (this.isBtn) {
            if (this.UIData.isShowBuyNumber && r.isRepeat) {
                this.itemBuyNumber = new OText(this.buyNumber + "");
                this.setTextData(this.itemBuyNumber, this.itemData.itemNameFontPro);
                this.itemBuyNumber.setPosition(this.UIData.buyNumPos.x, this.UIData.buyNumPos.y);
                this.addChild(this.itemBuyNumber);
                var i = tv.data.System.Buttons[this.UIData.addBtn.index];
                if (i) {
                    this.addBtn = new ONButton("graphics/Button/" + i.image1,"graphics/Button/" + i.image2);
                    this.addBtn.setPosition(this.UIData.addBtn.x, this.UIData.addBtn.y);
                    this.addChild(this.addBtn);
                    this.addBtn.addClick(function() {
                        t.clickAdd()
                    })
                }
                var a = tv.data.System.Buttons[this.UIData.minusBtn.index];
                if (a) {
                    this.minusBtn = new ONButton("graphics/Button/" + a.image1,"graphics/Button/" + a.image2);
                    this.minusBtn.setPosition(this.UIData.minusBtn.x, this.UIData.minusBtn.y);
                    this.addChild(this.minusBtn);
                    this.minusBtn.addClick(function() {
                        t.clickMinus()
                    })
                }
                this.addBtn.setTransparencyFiltering(true);
                this.minusBtn.setTransparencyFiltering(true)
            }
            var s = tv.data.System.Buttons[this.UIData.confirmBtn.index];
            this.confirmBtn = new ONButton("graphics/Button/" + s.image1,"graphics/Button/" + s.image2);
            this.confirmBtn.setPosition(this.UIData.confirmBtn.x, this.UIData.confirmBtn.y);
            this.addChild(this.confirmBtn);
            this.confirmBtn.addClick(function() {
                t.clickConfirm()
            });
            var n = tv.data.System.Buttons[this.UIData.cancaleBtn.index];
            this.cancleBtn = new ONButton("graphics/Button/" + n.image1,"graphics/Button/" + n.image2);
            this.cancleBtn.setPosition(this.UIData.cancaleBtn.x, this.UIData.cancaleBtn.y);
            this.addChild(this.cancleBtn);
            this.cancleBtn.addClick(function() {
                t.dispose()
            });
            this.confirmBtn.setTransparencyFiltering(true);
            this.cancleBtn.setTransparencyFiltering(true)
        } else {
            this.addEvent("click", function() {
                t.dispose()
            })
        }
        this.update()
    }
    ;
    this.getTime = function(t) {
        var e = parseInt(t / (60 * 60 * 24));
        var i = parseInt(t % (60 * 60 * 24) / (60 * 60));
        var a = parseInt(t % (60 * 60) / 60);
        var s = t % 60;
        if (e > 0) {
            return e + "天" + i + "时"
        } else {
            if (i > 0) {
                return i + "时" + a + "分"
            } else {
                return a + "分" + s + "秒"
            }
        }
    }
    ;
    this.update = function() {
        if (this.itemData.sell_countdown <= 0) {
            if (this.itemData.sell_status == -1) {
                this.itemData.sell_status = 1;
                this.itemData.sell_countdown = this.itemData.prop_downtime - this.itemData.prop_uptime
            }
            if (this.itemData.sell_status == 1) {
                this.itemData.sell_status = 2
            }
        }
        if (this.itemData.sell_status == -1) {
            this.confirmBtn && this.confirmBtn.setVisible(true);
            this.timeText.setText("准备中 " + this.getTime(this.itemData.sell_countdown) + "后开售")
        }
        if (this.itemData.sell_status == 1) {
            this.confirmBtn && this.confirmBtn.setVisible(true);
            this.timeText.setText("限时:" + this.getTime(this.itemData.sell_countdown) + "后结束")
        }
        if (this.itemData.sell_status == -2) {
            this.confirmBtn && this.confirmBtn.setVisible(false);
            this.timeText.setText("已结束")
        }
    }
    ;
    this.setBuyNumText = function() {
        if (!this.UIData.isShowBuyNumber) {
            return
        }
        if (f && d + this.buyNumber <= f.max && this.itemData.itemType == 2) {
            this.itemAllPrice.setText(" 0 " + mallUnit)
        } else if (f && d < f.max && d + this.buyNumber > f.max && this.itemData.itemType == 2) {
            var t = f.max - d;
            this.buyNumber = this.buyNumber == t + 1 ? 1 : this.buyNumber;
            this.buyNumber = this.buyNumber >= t ? t : 1;
            this.itemAllPrice.setText(" 0 " + mallUnit)
        } else {
            this.itemAllPrice.setText(" " + this.itemPrice * this.buyNumber + " " + mallUnit)
        }
        this.itemBuyNumber.setText(this.buyNumber + "")
    }
    ;
    this.clickAdd = function() {
        if (!this.UIData.isShowBuyNumber || !r.isRepeat) {
            return
        }
        if (this.buyNumber < 99) {
            this.buyNumber += 1
        } else {
            this.buyNumber = 1
        }
        this.setBuyNumText()
    }
    ;
    this.clickMinus = function() {
        if (!this.UIData.isShowBuyNumber || !r.isRepeat) {
            return
        }
        if (this.buyNumber > 1) {
            this.buyNumber -= 1
        } else {
            this.buyNumber = 99
        }
        this.setBuyNumText()
    }
    ;
    this.clickConfirm = function() {
        var t = tv.getAvailableFlowerCount();
        if (clientType == 1 && mallPriceType) {
            t = tv.flowerMallWZ
        }
        if (t >= this.itemPrice * this.buyNumber) {
            proceedCreateOrder(this.itemData.itemId, this.buyNumber, 1)
        } else {
            if (clientType == 1) {// hintMessage.setHint("鲜花不足")
            } else {
                this.showMessage()
            }
        }
        this.dispose()
    }
    ;
    this.showMessage = function() {
        if (Configuration.isH5) {
            var t = new AccountDetailConfirmInShop(this.itemData,this.buyNumber,1);
            tv.scene.addChild(t);
            t.init()
        } else {
            var e = new PurchaseResultMessage("鲜花不足","确定","鲜花充值",null,this.rechargeCallback.bind(this),this.itemData.itemPrice * this.buyNumber);
            tv.scene.addChild(e);
            e.setPurchaseResultElements()
        }
    }
    ;
    this.rechargeFail = function() {
        var t = new PurchaseResultMessage("充值失败","确定");
        tv.scene.addChild(t);
        t.setPurchaseResultElements()
    }
    ;
    this.rechargeCallback = function(t) {
        if (t > 0) {
            proceedCreateOrder(this.itemData.itemId, this.buyNumber, 1)
        } else {
            this.rechargeFail()
        }
    }
    ;
    this.setTextData = function(t, e) {
        if (e.font)
            t.setFont(e.font);
        if (e.fontSize)
            t.setTextSize(e.fontSize);
        if (e.fontColor)
            t.setColor(e.fontColor)
    }
}

function TimeMallTip() {
    var t = this;
    OContainer.call(this);
    this.postionObj = {};
    this.init = function() {
        var t = this;
        this.tipsMsg = new OText;
        this.tipsMsg.setPosition(58, 12);
        this.tipsMsg.setColor(get16Color("#ffffff"));
        this.tipsMsg.setTextSize(15);
        var e = "购买前必读";
        this.tipsMsg.setText(e);
        this.bg = new OBitmap(timeMallTipBg);
        this.addChild(this.bg);
        this.bg.setSizeGrid([50, 50, 0, 0], 300, 88);
        this.bg.setScale(.5, .5);
        this.addChild(this.tipsMsg);
        this.icon = new OBitmap(timeMallTiptIcon);
        this.icon.setScale(.5, .5);
        this.addChild(this.icon);
        this.icon.setPosition(16, 4);
        this.ycMsg = new OText("关闭");
        this.ycMsg.setColor(get16Color("#FFD15E"));
        this.ycMsg.setPosition(this.tipsMsg.textWidth + this.tipsMsg.x + 5, 12);
        this.ycMsg.setTextSize(15);
        this.addChild(this.ycMsg);
        this.ycMsg.setVisible(false);
        this.open();
        this.ycMsg.addEvent("click", function() {
            SAL_setStorage("timeTip" + GloableData.getInstance().userData.uid, "" + serverTime.year + serverTime.month + serverTime.day);
            t.dispose()
        })
    }
    ;
    this.isOpen = true;
    this.maxWidth = 880;
    this.open = function() {
        t.isOpen = true;
        t.bg.setSizeGrid([50, 50, 0, 0], 880, 88);
        t.tipsMsg.setText("限时商品购买后仅限当前档位使用，请及时存档。");
        t.ycMsg.setPosition(t.tipsMsg.textWidth + t.tipsMsg.x + 2, 12);
        t.ycMsg.setVisible(true)
    }
}

function SGameWelfare() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    OContainer.call(this, gGameWidth, gGameHeight);
    this.setBlockTouch(true);
    SAL_setElementIndex(g, this.element, 6600);
    this.setPosition(gGameX, 0);
    this.setSize(gGameWidth, gGameHeight);
    this.setAlpha(0);
    this.fadeFps = t;
    this.fadeTo(1, this.fadeFps / 60 * 1e3);
    this.data = tv.gameWelfateBin;
    if (clientType == 1 && mallPriceType) {
        this.data.flowerPicUrl = wanziIcon
    } else {
        if (localProjectPath) {
            this.data.flowerPicUrl = "graphics/UI/" + this.data.flowerPic
        } else {
            this.data.flowerPicUrl = fileListFato("graphics/UI/" + this.data.flowerPic)
        }
    }
    var a = void 0;
    var i = void 0;
    var s = void 0;
    var n = void 0;
    var r = void 0;
    var o = void 0;
    this.detailList = [];
    this.init = function() {
        var t = this;
        tv.canvas.menuIsShow(false);
        a = new OBitmap("graphics/UI/" + this.data.backPic);
        a.setPosition(this.data.bgPos.x, this.data.bgPos.y);
        this.addChild(a);
        this.showHalf();
        n = new OBitmap(this.data.flowerPicUrl);
        n.setPosition(this.data.flowerPicPos.x, this.data.flowerPicPos.y);
        this.addChild(n);
        var e = "玩家送花数:        " + GloableData.getInstance().userData.realFlower + " 朵";
        if (clientType == 1 && mallPriceType) {
            e = "已送丸子数:        " + GloableData.getInstance().userData.allWZ + " 个"
        }
        r = new OText(e);
        r.setFont(this.data.flowerHuaNumbuer.font);
        r.setTextSize(this.data.flowerHuaNumbuer.fontSize);
        r.setColor(this.data.flowerHuaNumbuer.fontColor);
        r.setPosition(this.data.flowerHuaNumbuerPos.x, this.data.flowerHuaNumbuerPos.y);
        this.addChild(r);
        if (localProjectPath) {
            this.showDetail()
        } else {
            GloableData.getInstance().loadWelfareData(function() {
                t.showDetail();
                t.updateAllWetail()
            })
        }
        this.updateAllWetail();
        var i = tv.data.System.Buttons[this.data.closeBtn.index];
        s = new ONButton("graphics/Button/" + i.image1,"graphics/Button/" + i.image2);
        s.setTransparencyFiltering(true);
        s.setPosition(this.data.closeBtn.x, this.data.closeBtn.y);
        this.addChild(s);
        s.addClick(function() {
            t.closeView()
        })
    }
    ;
    this.showDetail = function() {
        for (var t = 0; t < this.data.welfareLength; t++) {
            if (this.data.welfareDetailList[t].isOpen) {
                var e = new WelfareDetail(this.data.welfareDetailList[t]);
                this.addChild(e);
                e.init();
                this.detailList.push(e)
            }
        }
    }
    ;
    this.showHalf = function() {
        var a = this;
        if (this.data.isOaf && this.data.oafInfo && this.data.oafInfo.oafName) {
            var s = "graphics/oafs/" + this.data.oafInfo.oafName + ".oaf2";
            if (tv.oaf2Data.hasOwnProperty(s)) {
                o = tv.oaf2Data[s]
            }
            if (o) {
                var t = [];
                if (o && o.bgpath && o.bgpath.length > 0) {
                    t.push(fileListFato(o.bgpath))
                }
                for (var e = 0; e < o.picList.length; e++) {
                    t.push(fileListFato("Graphics/Oafs/" + o.picList[e]))
                }
                this.animation = new CAnimation(o.MaxWidth,o.MaxHeight);
                this.addChild(this.animation);
                SAL_preload(g, t, function(t) {
                    if (t == 1 || t == -1) {
                        var e = [];
                        for (var i = 0; i < a.data.oafInfo.indexCount; i++) {
                            e.push(a.data.oafInfo.indexs[i].actIndex + "," + a.data.oafInfo.indexs[i].actType)
                        }
                        a.animation.loadData(s, e)
                    }
                })
            } else {
                var s = ("graphics/oafs/" + this.data.oafInfo.oafName + "/" + this.data.oafInfo.errorPic.name).toLowerCase();
                i = new OBitmap(s);
                i.setPosition(this.data.halfPos.x, this.data.halfPos.y);
                this.addChild(i)
            }
        } else {
            i = new OBitmap("graphics/UI/" + this.data.halfPic);
            i.setPosition(this.data.halfPos.x, this.data.halfPos.y);
            this.addChild(i)
        }
    }
    ;
    this.closeView = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (t) {
            if (tv.CUIFromIndex != -1) {
                tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(tv.CUIFromIndex)
            } else {
                tv.scene = new SGame
            }
        }
        this.dispose()
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.closeView()
            }
        })
    }
    ;
    this.update = function() {}
    ;
    this.updateAllWetail = function() {
        for (var t = 0; t < this.detailList.length; t++) {
            this.detailList[t].update()
        }
    }
    ;
    this.resetFlowerNumberText = function() {
        var t = "玩家送花数:        " + GloableData.getInstance().userData.realFlower + " 朵";
        if (clientType == 1 && mallPriceType) {
            t = "已送丸子数:        " + GloableData.getInstance().userData.allWZ + " 个"
        }
        r.setText(t)
    }
    ;
    gLoadAssets.curLoadScene = "Welfare";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function WelfareDetail(t) {
    OContainer.call(this);
    this.setBlockTouch(true);
    this.data = t;
    this.bg = null;
    this.nameLabel = null;
    this.descLabel = null;
    this.getItemImage = null;
    this.goodList = [];
    this.singBtn = null;
    this.init = function() {
        var t = this;
        this.setPosition(this.data.itemPoint.x, this.data.itemPoint.y);
        this.bg = new OBitmap("graphics/UI/" + this.data.detailBg);
        this.bg.setPosition(this.data.bgViewport.x, this.data.bgViewport.y);
        this.addChild(this.bg);
        this.bg.setSize(this.data.bgViewport.width, this.data.bgViewport.height);
        this.nameLabel = new OText(this.data.itemName);
        this.nameLabel.setFont(this.data.nameFont.font);
        this.nameLabel.setTextSize(this.data.nameFont.fontSize);
        this.nameLabel.setColor(this.data.nameFont.fontColor);
        this.nameLabel.setPosition(this.data.namePos.x, this.data.namePos.y);
        this.addChild(this.nameLabel);
        this.descLabel = new OText(this.data.desc);
        this.descLabel.setFont(this.data.descFont.font);
        this.descLabel.setTextSize(this.data.descFont.fontSize);
        this.descLabel.setColor(this.data.descFont.fontColor);
        this.descLabel.setPosition(this.data.descPos.x, this.data.descPos.y);
        this.addChild(this.descLabel);
        this.singLabel = new OText("累签天数：");
        this.singLabel.setFont(this.data.singStrFont.font);
        this.singLabel.setTextSize(this.data.singStrFont.fontSize);
        this.singLabel.setColor(this.data.singStrFont.fontColor);
        this.singLabel.setPosition(this.data.singStrPos.x, this.data.singStrPos.y);
        this.singNumLabel = new OText("" + GloableData.getInstance().welfareGetData.singDay);
        this.singNumLabel.setFont(this.data.singNumFont.font);
        this.singNumLabel.setTextSize(this.data.singNumFont.fontSize);
        this.singNumLabel.setColor(this.data.singNumFont.fontColor);
        this.singNumLabel.setPosition(this.data.singNumPos.x, this.data.singNumPos.y);
        if (this.data.id == 2) {
            this.addChild(this.singLabel);
            this.addChild(this.singNumLabel)
        }
        this.getItemImage = new OBitmap("graphics/UI/" + tv.gameWelfateBin.getItemPic);
        this.addChild(this.getItemImage);
        this.getItemImage.setPosition(this.data.singViewport.x, this.data.singViewport.y);
        this.getItemImage.setSize(this.data.singViewport.width, this.data.singViewport.height);
        var e = tv.data.System.Buttons[tv.gameWelfateBin.singBtn.index];
        this.singBtn = new ONButton("graphics/Button/" + e.image1,"graphics/Button/" + e.image2);
        this.singBtn.setTransparencyFiltering(true);
        this.singBtn.setPosition(this.data.singViewport.x, this.data.singViewport.y);
        this.addChild(this.singBtn);
        this.singBtn.setScale(this.data.singViewport.width / this.singBtn.width, this.data.singViewport.height / this.singBtn.height);
        this.singBtn.addClick(function() {
            t.onClick()
        });
        for (var i = 0; i < this.data.goodList.length; i++) {
            var a = new WelfareGoodItem(this.data.goodList[i]);
            this.addChild(a);
            a.init();
            this.goodList.push(a);
            a.getItemIcon.setVisible(this.getItemStatus(this.data.goodList[i].id))
        }
    }
    ;
    this.getItemStatus = function(t) {
        var e = GloableData.getInstance().welfareGetData;
        var i = 0;
        switch (this.data.id) {
        case 1:
            i = e.flowerId >= t;
            break;
        case 2:
            i = e.singId >= t;
            break;
        case 3:
            i = e.weekList.indexOf(t) != -1;
            break;
        case 4:
            i = e.newId >= t;
            break
        }
        return i
    }
    ;
    this.update = function() {
        this.singNumLabel.setText("" + GloableData.getInstance().welfareGetData.singDay);
        var t = GloableData.getInstance().welfareGetData;
        var e = this.getToday();
        var i = false;
        var a = 0;
        var s = 0;
        var n = void 0;
        switch (this.data.id) {
        case 1:
            i = true;
            var r = -1;
            if (clientType == 1 && mallPriceType == 1) {
                r = this.getMoneyWelfare(0, r);
                r = this.getMoneyWelfare(1, r)
            } else {
                r = this.getMoneyWelfare(1, r);
                r = this.getMoneyWelfare(0, r)
            }
            if (r > -1) {
                var c = t.flowerDate < e;
                this.goodList[r].getItemIcon.setVisible(!c);
                this.goodList[r].canGetIcon.setVisible(c);
                i = c
            }
            break;
        case 2:
            n = this.data.goodList[t.singId];
            if (n) {
                i = GloableData.getInstance().welfareGetData.singDate < e;
                if (!i && n.taskNum <= t.singDay) {
                    i = true
                }
            }
            s = t.singDay;
            a = t.singId;
            break;
        case 3:
            i = t.weekDateTime < e;
            var u = serverTime.week ? serverTime.week : 7;
            if (i) {
                var f = new Date(serverTime.year,serverTime.month - 1,serverTime.day);
                var d = new Date(t.weekDate);
                var m = (f - d) / (1e3 * 60 * 60 * 24);
                if (m >= u) {
                    t.weekList = []
                }
            }
            this.goodList[u - 1].canGetIcon.setVisible(true);
            for (var o = 0; o < t.weekList.length; o++) {
                this.goodList[t.weekList[o] - 1].getItemIcon.setVisible(true);
                this.goodList[t.weekList[o] - 1].canGetIcon.setVisible(false)
            }
            break;
        case 4:
            n = this.data.goodList[t.newId];
            if (n) {
                i = GloableData.getInstance().welfareGetData.singDate < e;
                if (!i && n.taskNum <= t.singDay) {
                    i = true
                }
            }
            s = t.singDay;
            a = t.newId;
            break
        }
        if (this.data.id != 3 && this.data.id != 1) {
            if (this.data.id != 1 && GloableData.getInstance().welfareGetData.singDate < e) {
                s += 1
            }
            for (var h = 0; h < this.data.goodList.length; h++) {
                if (this.data.goodList[h].taskNum <= s) {
                    this.goodList[h].canGetIcon.setVisible(true)
                }
            }
            for (var l = 0; l < a; l++) {
                this.goodList[l].getItemIcon.setVisible(true);
                this.goodList[l].canGetIcon.setVisible(false)
            }
        }
        this.singBtn.setVisible(i);
        this.getItemImage.setVisible(!i)
    }
    ;
    this.getMoneyWelfare = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        var i = e;
        var a = GloableData.getInstance().userData.realFlower;
        var s = GloableData.getInstance().userData.allWZ;
        if (e > -1) {
            if (t == 1) {
                s += this.data.goodList[e].wmTaskNum
            } else {
                a += this.data.goodList[e].taskNum
            }
        }
        for (var n = 0; n < this.data.goodList.length; n++) {
            if (t == 1) {
                if (this.data.goodList[n].wmTaskNum && this.data.goodList[n].wmTaskNum <= s) {
                    i = n
                }
            } else {
                if (this.data.goodList[n].taskNum <= a) {
                    i = n
                }
            }
        }
        return i
    }
    ;
    this.onClick = function() {
        var t = GloableData.getInstance().welfareGetData;
        var e = void 0;
        switch (this.data.id) {
        case 1:
            var i = -1;
            if (clientType == 1 && mallPriceType == 1) {
                i = this.getMoneyWelfare(0, i);
                i = this.getMoneyWelfare(1, i)
            } else {
                i = this.getMoneyWelfare(1, i);
                i = this.getMoneyWelfare(0, i)
            }
            if (t.flowerDate < this.getToday() && i > -1) {
                this.addAttributeByItem(this.data.goodList[i]);
                t.flowerDate = this.getToday()
            } else {// hintMessage.setHint("未达到条件")
            }
            break;
        case 2:
            this.sing();
            e = this.data.goodList[t.singId];
            if (e.taskNum <= t.singDay) {
                this.addAttributeByItem(e);
                t.singId = e.itemId
            }
            break;
        case 3:
            t.weekDate = new Date(serverTime.year,serverTime.month - 1,serverTime.day).getTime();
            t.weekDateTime = this.getToday();
            var a = serverTime.week ? serverTime.week : 7;
            e = this.data.goodList[a - 1];
            this.addAttributeByItem(e);
            t.weekList.push(e.itemId);
            break;
        case 4:
            this.sing();
            e = this.data.goodList[t.newId];
            if (e.taskNum <= t.singDay) {
                this.addAttributeByItem(e);
                t.newId = e.itemId
            }
            break
        }
        tv.scene.updateAllWetail()
    }
    ;
    this.addAttributeByItem = function(t) {
        for (var e in t.itemAttributes) {
            var i = t.itemAttributes[e];
            var a = tv.system.vars.getVar(i.arrributeId);
            var s = i.operator;
            var n = i.varValue;
            switch (s) {
            case 0:
                a = n;
                break;
            case 1:
                a += n;
                break;
            case 2:
                a -= n;
                break;
            case 3:
                a *= n;
                break;
            case 4:
                a = a / n;
                break;
            case 5:
                a = a % n;
                break
            }
            tv.system.vars.setVar(i.arrributeId, a)
        }
    }
    ;
    this.sing = function() {
        var t = this.getToday();
        if (GloableData.getInstance().welfareGetData.singDate < t) {
            GloableData.getInstance().welfareGetData.singDate = t;
            GloableData.getInstance().welfareGetData.singDay++;
            return GloableData.getInstance().welfareGetData.singDay
        }
        return null
    }
    ;
    this.getToday = function() {
        var t = "" + serverTime.year;
        t += serverTime.month < 10 ? "0" + serverTime.month : serverTime.month;
        t += serverTime.day < 10 ? "0" + serverTime.day : serverTime.day;
        t = parseInt(t);
        return t
    }
}

function WelfareGoodItem(t) {
    OContainer.call(this);
    this.setBlockTouch(true);
    this.data = t;
    this.nameLabel = null;
    this.bg = null;
    this.icon = null;
    this.canGetIcon = null;
    this.getItemIcon = null;
    this.flower = null;
    this.taskNumDice = null;
    this.init = function() {
        this.setPosition(this.data.itemPoint.x, this.data.itemPoint.y);
        this.bg = new OBitmap("graphics/UI/" + tv.gameWelfateBin.itemBg);
        this.bg.setPosition(this.data.itemViewport.x, this.data.itemViewport.y);
        this.addChild(this.bg);
        this.bg.setSize(this.data.itemViewport.width, this.data.itemViewport.height);
        this.icon = new OBitmap("graphics/UI/" + this.data.itemPic);
        this.icon.setPosition(this.data.itemViewport.x, this.data.itemViewport.y);
        this.addChild(this.icon);
        this.icon.setSize(this.data.itemViewport.width, this.data.itemViewport.height);
        if (this.data.isShowFlower) {
            this.flower = new OBitmap(tv.gameWelfateBin.flowerPicUrl);
            this.flower.setPosition(this.data.itemFlowerPos.x, this.data.itemFlowerPos.y);
            this.addChild(this.flower)
        }
        this.canGetIcon = new OBitmap("graphics/UI/" + tv.gameWelfateBin.canGetItemIcon);
        this.canGetIcon.setVisible(false);
        this.addChild(this.canGetIcon);
        this.canGetIcon.setPosition(this.data.itemViewport.x, this.data.itemViewport.y);
        this.canGetIcon.setSize(this.data.itemViewport.width, this.data.itemViewport.height);
        this.getItemIcon = new OBitmap("graphics/UI/" + tv.gameWelfateBin.getItemIconPic);
        this.addChild(this.getItemIcon);
        this.getItemIcon.setPosition(this.data.getItemViewport.x, this.data.getItemViewport.y);
        this.getItemIcon.setSize(this.data.getItemViewport.width, this.data.getItemViewport.height);
        this.getItemIcon.setVisible(false);
        this.nameLabel = new OText(this.data.itemName);
        this.nameLabel.setFont(this.data.itemNameFontPro.font);
        this.nameLabel.setTextSize(this.data.itemNameFontPro.fontSize);
        this.nameLabel.setColor(this.data.itemNameFontPro.fontColor);
        this.nameLabel.setPosition(this.data.itemNamePos.x, this.data.itemNamePos.y);
        this.addChild(this.nameLabel);
        var t = this.data.taskNumDice;
        if (clientType == 1 && this.data.wmTaskNumDice) {
            t = this.data.wmTaskNumDice
        }
        if (this.data.isShowFlower) {
            this.flower = new OBitmap(tv.gameWelfateBin.flowerPicUrl);
            this.flower.setPosition(this.data.itemFlowerPos.x, this.data.itemFlowerPos.y);
            this.addChild(this.flower);
            t = "≥" + this.data.taskNum + "朵";
            if (clientType == 1 && mallPriceType) {
                t = "≥" + this.data.wmTaskNum + "个"
            }
        }
        this.taskNumDice = new OText(t);
        this.taskNumDice.setFont(this.data.itemNameFontPro.font);
        this.taskNumDice.setTextSize(this.data.itemNameFontPro.fontSize);
        this.taskNumDice.setColor(this.data.itemNameFontPro.fontColor);
        this.taskNumDice.setPosition(this.data.taskPos.x, this.data.taskPos.y);
        this.addChild(this.taskNumDice)
    }
}

function SGameName() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var u = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
    OContainer.call(this);
    this.setAlpha(0);
    this.fadeFps = r;
    this.fadeTo(1, this.fadeFps / 60 * 1e3);
    this.data = tv.gameNameBin;
    this.inputBoxDataList = this.data.inputBoxNumList[u - 1];
    var t = Math.floor(this.data.viewport.height / this.data.spanRow);
    this.data.row = t > this.data.row ? this.data.row : t;
    this.maxPage = Math.ceil(this.data.dictList.length / (this.data.row * this.data.col));
    this.nameStrList = [];
    var a = c.split(",");
    for (var e = 0; e < a.length / 3; e++) {
        this.nameStrList.push(a.slice(e * 3, e * 3 + 3))
    }
    var f = void 0;
    var d = void 0;
    var i = void 0;
    var o = void 0;
    var s = void 0;
    var n = void 0;
    var m = void 0;
    var h = void 0;
    var l = void 0;
    this.init = function() {
        var t = this;
        tv.canvas.menuIsShow(false);
        this.setBlockTouch(true);
        SAL_setElementIndex(g, this.element, 6600);
        this.setPosition(gGameX, 0);
        l = [];
        f = new OBitmap("graphics/UI/" + this.data.backPic);
        this.addChild(f);
        h = new OContainer(this.data.viewport.width,this.data.viewport.height);
        h.setPosition(this.data.viewport.x, this.data.viewport.y);
        this.addChild(h);
        d = this.getBtn(this.data.confirmBtn);
        d.addClick(function() {
            sLoading.showMask();
            t.blackWords()
        });
        i = this.getBtn(this.data.randomBtn);
        i.addClick(function() {
            t.randomString()
        });
        i.setVisible(this.data.isRandom);
        o = new OText("1/2");
        o.setPosition(this.data.pagePos.x, this.data.pagePos.y);
        this.addChild(o);
        this.setPageText(1);
        s = this.getBtn(this.data.upBtn);
        s.addClick(function() {
            t.setPageText(t.pageIndex - 1)
        });
        n = this.getBtn(this.data.netxBtn);
        n.addClick(function() {
            t.setPageText(t.pageIndex + 1)
        });
        if (this.data.deleteBtn) {
            m = this.getBtn(this.data.deleteBtn);
            m.addClick(function() {
                t.deleteStr()
            })
        }
        if (this.maxPage == 1 || this.data.isHide) {
            o.setVisible(false);
            s.setVisible(false);
            n.setVisible(false)
        }
        h.setVisible(!this.data.isHide);
        this.inputBoxList = [];
        for (var e = 0; e < this.inputBoxDataList.length; e++) {
            this.setInputText(this.inputBoxDataList[e])
        }
        this.currentInput = this.inputBoxList[0];
        this.currentInput.setFoucs(true)
    }
    ;
    this.currentInput = null;
    this.setInputText = function(t) {
        var e = this;
        var i = this.nameStrList[t.id];
        var a = new OText(utils.madeString(i[0], 0),false);
        a.setTextSize(tv.data.System.FontSize);
        this.addChild(a);
        a.setPosition(t.namePos.x, t.namePos.y);
        var s = new OInputText(t.viewport.width,t.viewport.height,"graphics/UI/" + this.data.inputBg,"graphics/UI/" + this.data.inputFocusBg,tv.data.System.FontSize);
        s.setPosition(t.viewport.x, t.viewport.y);
        this.addChild(s);
        s.init();
        s.addEvent("click", function() {
            e.clearInputFoucs();
            s.clickInput();
            e.currentInput = s
        });
        this.inputBoxList.push(s)
    }
    ;
    this.getAllInputStr = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var e = "";
        for (var i = 0; i < this.inputBoxList.length; i++) {
            a.push(this.inputBoxList[i].text);
            e += this.inputBoxList[i].text;
            if (t) {
                e += ","
            }
        }
        return e
    }
    ;
    this.getNeedCreateFont = function() {
        var t = this.getAllInputStr().split("");
        var e = [];
        var i = "";
        for (var a = 0; a < t.length; a++) {
            var s = t[a];
            if (e.indexOf(s) == -1) {
                if (!tv.imageFontMap.data.get(encodeURIComponent(s)) && !BitmapFont.getInstance().bitMapDataArr[encodeURIComponent(s)]) {
                    e.push(s);
                    i += s
                }
            }
        }
        return i
    }
    ;
    this.blackWords = function() {
        var h = this;
        var t = webConfig.GET_FONT_BLACK_WORDS;
        t += "?content=" + this.getAllInputStr(true);
        serverAjax.sendGetAjaxJSON(t, function(t) {
            if (t.status == 0) {
                var e = t.data;
                var i = "";
                for (var a = 0; a < e.length; a++) {
                    i += e[a];
                    i += " "
                }
                // hintMessage.setHint("内容中含有敏感词汇。");
                sLoading.hideMask()
            } else if (t.status == 2) {
                var s = t.data.ori;
                var n = t.data.replace;
                var r = "内容中含有敏感词汇，系统将会自动替换。";
                var o = new CommonMessage(r,"确认",h.replaceString.bind(h, s, n),"取消",null,"提示");
                o.isShowSuccenBg = false;
                h.addChild(o);
                o.init();
                sLoading.hideMask()
            } else {
                h.setAllInputStr()
            }
        }, function() {
            sLoading.hideMask();
            // hintMessage.setHint("检测词汇未通过，网络异常!")
        })
    }
    ;
    this.replaceString = function(t, e) {
        for (var i = 0; i < this.inputBoxList.length; i++) {
            var a = this.inputBoxList[i].text;
            for (var s = 0; s < t.length; s++) {
                a = a.replaceAll(t[s], e[s])
            }
            this.inputBoxList[i].setText(a)
        }
        this.setAllInputStr()
    }
    ;
    this.allImageFont = [];
    this.setAllInputStr = function() {
        var a = this;
        sLoading.showMask();
        if (this.getNeedCreateFont()) {
            var t = webConfig.GET_FONT_SKETCH;
            t += "?text=" + this.getNeedCreateFont();
            t += "&font_size=" + tv.data.System.realFontSize;
            t += "&font_name=" + this.data.textMd5;
            t += "&font_origin_name=" + tv.data.System.FontName;
            t += "&gindex=" + gIndex;
            t += "&os=" + encodeURI(this.data.os);
            serverAjax.sendGetAjaxJSON(t, function(t) {
                a.allImageFont = t.data;
                var e = a.getNeedCreateFont().split("");
                for (var i = 0; i < e.length; i++) {
                    tv.imageFontMap.addItem(encodeURIComponent(e[i]), a.allImageFont[i], e[i])
                }
                a.preloadAllFontImage()
            }, function() {
                sLoading.hideMask();
                // hintMessage.setHint("网络异常!")
            })
        } else {
            sLoading.hideMask();
            this.setSystemString();
            this.closeView()
        }
    }
    ;
    this.preloadAllFontImage = function() {
        SAL_preload(g, this.allImageFont, function(t) {
            if (t == 1) {
                sLoading.hideMask();
                this.setSystemString();
                this.closeView()
            }
        }
        .bind(this), 1, true)
    }
    ;
    this.setSystemString = function() {
        for (var t = 0; t < this.inputBoxList.length; t++) {
            var e = this.nameStrList[t];
            var i = this.inputBoxList[t].text;
            var a = e[1] == "1" ? tv.system.vars.getVar(e[2]) - 1 : e[2];
            if (i) {
                tv.system.string.setVar(a, i)
            }
        }
    }
    ;
    this.randomString = function() {
        var t = this.data.dictList;
        var e = Math.round(Math.random() * (t.length - 1));
        this.currentInput.setText(this.currentInput.text + t[e])
    }
    ;
    this.clearInputFoucs = function() {
        for (var t = 0; t < this.inputBoxList.length; t++) {
            this.inputBoxList[t].setFoucs(false)
        }
    }
    ;
    this.deleteStr = function() {
        var t = this.currentInput.text;
        var e = t.substr(0, t.length - 1);
        this.currentInput.setText(e)
    }
    ;
    this.pageIndex = 1;
    this.setPageText = function(t) {
        var a = this;
        var e = this.data.row * this.data.col;
        if (t < 1 || this.data.dictList.length <= (t - 1) * e) {
            return
        }
        this.clearText();
        var s = tv.data.System.Buttons[this.data.textBtn.index];
        var n = this.data.dictList.slice(e * (t - 1), e * t);
        var i = function t(e) {
            var i = new ONButton("graphics/Button/" + s.image1,"graphics/Button/" + s.image2,n[e],!systemFont);
            i.setPosition(e % a.data.col * a.data.spanCol, Math.floor(e / a.data.col) * a.data.spanRow);
            h.addChild(i);
            l.push(i);
            i.addClick(function() {
                a.clickText(n[e])
            })
        };
        for (var r = 0; r < n.length; r++) {
            i(r)
        }
        this.pageIndex = t;
        o.setText(t + "/" + this.maxPage)
    }
    ;
    this.clearText = function() {
        for (var t = 0; t < l.length; t++) {
            l[t].dispose()
        }
        l = []
    }
    ;
    this.clickText = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        this.currentInput.setText(this.currentInput.text + t)
    }
    ;
    this.closeView = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (t) {
            if (tv.CUIFromIndex != -1) {
                tv.scene = tv.CUIFromIndex == 10001 ? new SMenu : new SCUI(tv.CUIFromIndex)
            } else {
                tv.scene = new SGame
            }
        }
        this.dispose()
    }
    ;
    this.fadeScene = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.fadeTo(0, e / 60 * 1e3, function() {
            if (i) {
                t.closeView()
            }
        })
    }
    ;
    this.getBtn = function(t) {
        var e = tv.data.System.Buttons[t.index];
        var i = new ONButton("graphics/Button/" + e.image1,"graphics/Button/" + e.image2);
        i.setTransparencyFiltering(true);
        i.setPosition(t.x, t.y);
        this.addChild(i);
        return i
    }
    ;
    this.update = function() {}
    ;
    gLoadAssets.curLoadScene = "Name";
    if (!gLoadAssets.isNeedLoad()) {
        this.init()
    }
}

function ImageFontData() {
    this.data = new Dictionary;
    this.textString = "";
    this.addItem = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        if (!this.data.get(t)) {
            this.textString += i
        }
        this.data.set(t, e)
    }
    ;
    this.preloadAllFontImage = function(e) {
        SAL_preload(g, this.data.values, function(t) {
            if (t == 1) {
                sLoading.hideMask();
                e && e()
            }
        }
        .bind(this), 1, true)
    }
    ;
    this.getData = function() {
        var t = {};
        t.nameList = this.data.keys;
        t.urlList = this.data.values;
        t.textString = this.textString;
        t.textMd5 = tv.gameNameBin.textMd5;
        return t
    }
    ;
    this.setData = function(t) {
        this.clear();
        for (var e = 0; e < t.nameList.length; e++) {
            this.addItem(t.nameList[e], t.urlList[e])
        }
        this.textString = t.textString
    }
    ;
    this.clear = function() {
        this.data.clear();
        this.textString = ""
    }
}

function OInput() {
    this.x = 0;
    this.y = 0;
    this.width = 50;
    this.height = 40;
    this.lineWidth = 0;
    this.focuIn = false;
    this.multiLine = false;
    this.input = null;
    this.texts = "";
    this.fontSize = 23;
    this.fontTop = 5;
    this.tips = "";
    this.fontX = 10;
    this.type = "";
    var s = g.canvas;
    var n = gGameWidth / window.innerWidth;
    this.zoom_x = 1;
    this.zoom_y = 1;
    var r = gGameHeight > gGameHeight;
    var o = false;
    var h = window.innerWidth;
    var l = window.innerHeight;
    this.createInput = function() {
        if (!this.input) {
            this.input = document.createElement("input");
            this.input.style.position = "absolute";
            this.input.style.min = 0;
            this.input.style.fontSize = this.fontSize + "px";
            this.input.value = this.texts;
            document.body.appendChild(this.input);
            this.input.focus()
        }
        this.setPos()
    }
    ;
    this.removeInput = function() {
        document.body.removeChild(this.input);
        this.input = null
    }
    ;
    this.setPos = function() {
        h = window.innerWidth - s.offsetLeft * 2;
        l = window.innerHeight - s.offsetTop * 2;
        r = gGameHeight > gGameWidth;
        if (r) {
            o = l < h
        } else {
            o = l > h
        }
        if (o) {
            n = gGameHeight / h
        } else {
            n = gGameWidth / h
        }
        this.input.style.fontSize = Math.floor(this.fontSize / n) + "px";
        if (this.input) {
            var t = 0
              , e = 0;
            this.input.style.zIndex = 99;
            this.input.style.outline = "none";
            if (r) {
                if (o) {
                    var i, a;
                    i = this.width / n;
                    a = this.height / n;
                    this.input.style.transition = "-webkit-transform";
                    this.input.style.transformOrigin = "left -" + i;
                    this.input.style.webkitTransform = "rotate(270deg)";
                    t = this.y * (this.zoom_y / n) - a - a / 2 - 1 + s.offsetLeft;
                    e = this.x * (this.zoom_x / n) + i + 6 + s.offsetTop
                } else {
                    this.input.style.transition = "";
                    this.input.style.webkitTransform = "";
                    t = this.x * (this.zoom_x / n) - 1 + s.offsetLeft;
                    e = this.y * (this.zoom_y / n) - 1 + s.offsetTop
                }
                this.input.style.left = t + "px"
            } else {
                if (o) {
                    var i, a;
                    i = this.width / n;
                    a = this.height / n;
                    this.input.style.transition = "-webkit-transform";
                    this.input.style.transformOrigin = "left -" + a;
                    this.input.style.webkitTransform = "rotate(90deg)";
                    t = this.y * (this.zoom_y / n) - 1 - i / 2 + a / 2 + s.offsetLeft;
                    e = this.x * (this.zoom_x / n) - 1 + i / 2 - a / 2 - 2 + s.offsetTop;
                    this.input.style.right = t + "px";
                    this.input.style.left = ""
                } else {
                    this.input.style.transition = "";
                    this.input.style.webkitTransform = "";
                    t = this.x * (this.zoom_x / n) - 1 + s.offsetLeft;
                    e = this.y * (this.zoom_y / n) - 1 + s.offsetTop;
                    this.input.style.left = t + "px";
                    this.input.style.right = ""
                }
            }
            this.input.style.width = this.width / n - 1 + "px";
            this.input.style.height = this.height / n - 1 + "px";
            this.input.style.top = e + "px"
        }
    }
    ;
    this.losefocus = function() {
        if (this.input) {
            if (this.type == "number") {
                if (isInt(this.input.value)) {
                    this.texts = this.input.value
                } else {
                    this.texts = ""
                }
            }
            document.body.removeChild(this.input);
            this.input = null
        }
    }
    ;
    this.drawText = function(t) {
        t.font = this.fontSize + "px 微软雅黑";
        t.fillStyle = "#333333";
        var e = 0;
        var i = this.texts;
        if (i == "") {
            i = this.tips;
            t.fillStyle = "#999b9f"
        }
        var a = i.length;
        for (var s = 0; s < a; s++) {
            e += t.measureText(i.substr(s, 1)).width;
            if (e * n > this.width * n) {
                a = s;
                break
            }
        }
        t.fillText(i.substr(0, a), this.x + this.fontX, this.y + this.fontSize + this.fontTop)
    }
    ;
    this.selected = function() {
        return onTouchX > this.x && onTouchX < this.x + this.width * this.zoom_x && onTouchY > this.y && onTouchY < this.y + this.height * this.zoom_y
    }
    ;
    this.isClick = function() {
        if (!this.focuIn) {
            if (this.selected() && onClick()) {
                this.createInput();
                this.focuIn = true;
                return true
            }
        } else {
            if (!this.selected()) {
                if (onClick()) {
                    this.focuIn = false;
                    this.losefocus();
                    return false
                }
            }
        }
    }
    ;
    this.dispose = function() {
        selfInput = null;
        if (this.input) {
            document.body.removeChild(this.input);
            this.input = null
        }
        this.texts = "";
        this.tips = "";
        this.image = null
    }
    ;
    this.update = function(t) {
        this.setPos()
    }
}

function isInt(t) {
    var e = /^(-|\+)?\d+$/;
    return e.test(t)
}

function TempVar() {
    this.data = null;
    this.mxData = null;
    this.DataVer = 0;
    this.scene = null;
    this.inter = null;
    this.canvas = null;
    this.system = null;
    this.storyList = new Array;
    this.tip = null;
    this.gameTimeMall = null;
    this.gameNewMall = null;
    this.gameMallBin = null;
    this.gameMallItemData = null;
    this.gameWelfateBin = null;
    this.gameNameBin = null;
    this.newMallBuyData = [];
    this.flowerMallHua = 0;
    this.flowerMallWZ = 0;
    this.userFlower = 0;
    this.oaf2Data = {};
    this.adInfo = null;
    this.CUIFromIndex = -1;
    this.imageFontMap = new ImageFontData;
    this.dispose = function() {
        if (this.scene) {
            this.scene.dispose();
            this.scene = null
        }
        if (this.canvas) {
            this.canvas.dispose();
            this.canvas = null
        }
        this.data = null;
        this.inter = null;
        this.system = null;
        this.tip = null;
        this.gameNewMall = null;
        this.storyList = null
    }
    ;
    this.getFlower = function(a) {
        if (sLoading) {
            sLoading.showMask()
        }
        var t = function t(e, i) {
            if (sLoading) {
                sLoading.hideMask()
            }
            tv.flowerMallHua = e;
            if (clientType == 1) {
                tv.flowerMallWZ = i
            }
            a && a(e)
        };
        if (Configuration.isH5) {
            mallProxy.getMyMoney(t)
        } else {
            SAL_getCurrency(t)
        }
    }
    ;
    this.getAvailableFlowerCount = function() {
        var t = this.flowerMallHua - this.userFlower;
        if (!Configuration.isH5) {
            t = this.flowerMallHua
        }
        return t
    }
}

function DMain(t) {
    this.stories = new Array;
    this.storyRead = null;
    this.Headr = new DHeader(t);
    this.System = new DSystem(t);
    this.chatCharacter = new DCharacter(t);
    this.getStoryDataCallback = null;
    this.OAF2List = new Array;
    if (!isNew) {
        this.storyRead = t;
        t.readInt32();
        this.projectName = t.readString();
        var e = t.readInt32();
        this.stories = new Array(e);
        this.storyMap = new Array(e);
        var i = t.cursor;
        for (var a = 0; a < e; a++) {
            var s = t.readInt32();
            t.readString();
            var n = t.readInt32();
            this.storyMap[a] = {
                id: n,
                cursor: i + 4
            };
            i += s + 4;
            t.cursor = i
        }
    }
    if (tv.DataVer >= 104) {
        var r = t.readInt32();
        this.DFloatButton = new Array(r);
        for (var a = 0; a < r; a++) {
            this.DFloatButton[a] = new DFloatButtonData(t)
        }
    }
    this.getStory = function(e, t) {
        var i = 0;
        this.getStoryDataCallback = t;
        var a = this.getLocalStoryData(e);
        if (a != null) {
            this.getOAF2Data(a)
        } else if (isNew) {
            var s = fileListFato("game" + e + ".bin");
            var n = this;
            new ORead(s,function(t) {
                t.readInt32();
                a = new DStory(t);
                n.stories[e] = a;
                n.getOAF2Data(a)
            }
            )
        } else {
            a = this.readStoryFromData(e);
            this.getOAF2Data(a)
        }
    }
    ;
    this.getOAF2Data = function(t) {
        if (!t || !t.events) {
            return
        }
        var e = 0
          , i = t.events.length;
        var a = null
          , s = "";
        for (e = 0; e < i; e++) {
            a = t.events[e];
            if (a.Code == 4062 || a.Code == 406) {
                s = ("Graphics/" + a.Argv[1]).toLowerCase() + (a.Code == 406 ? "x" : "");
                if (!tv.oaf2Data[s] && !this.OAF2List.contains(s)) {
                    this.OAF2List.push(s)
                }
            }
        }
        this.curOAF2Index = 0;
        this.checkOAF2DataFinish(t)
    }
    ;
    this.checkOAF2DataFinish = function(a) {
        if (this.curOAF2Index >= this.OAF2List.length) {
            this.curOAF2Index = 0;
            this.OAF2List = [];
            this.getStoryDataCallback && this.getStoryDataCallback(a);
            return
        }
        var t = fileListFato(this.OAF2List[this.curOAF2Index]);
        if (!t) {
            this.curOAF2Index++;
            this.checkOAF2DataFinish(a);
            return
        }
        var s = this;
        new ORead(t,function(t) {
            var e = s.OAF2List[s.curOAF2Index];
            if (t && e) {
                var i = e.substring(e.length - 1) == "x" ? new DoafData(t) : new DAnimation(t);
                if (i.load) {
                    tv.oaf2Data[e] = i
                }
            }
            s.curOAF2Index++;
            s.checkOAF2DataFinish(a)
        }
        )
    }
    ;
    this.getStoryList = function(s, n) {
        var r = 0;
        var o = this;
        this.getStoryDataCallback = null;
        var h = function t() {
            r++;
            if (r >= s.length) {
                n && n()
            } else {
                e()
            }
        };
        var e = function t() {
            if (r >= s.length) {
                n && n()
            }
            var e = parseInt(s[r]);
            var i = o.getLocalStoryData(e);
            if (i != null) {
                h()
            } else if (isNew) {
                var a = fileListFato("game" + e + ".bin");
                new ORead(a,function(t) {
                    t.readInt32();
                    i = new DStory(t);
                    o.stories[e] = i;
                    o.getStoryDataCallback = h;
                    o.getOAF2Data(i)
                }
                )
            } else {
                i = o.readStoryFromData(e);
                o.getStoryDataCallback = h;
                o.getOAF2Data(i)
            }
        };
        e()
    }
    ;
    this.getAllS = async function() {
        for (let i = 1; i < 1000; i++) {
            await new Promise((resolve,reject)=>{
                this.getStory(i, function(story) {
                    // 将获取到的故事数据存储到DMain对象的stories属性中
                    if (story.ID !== 0) {
                        this.stories.push(story);
                    }
                    resolve();
                });
            }
            );
        }
        tv.data.stories = tv.data.stories.filter(story=>story.ID !== 0);

    }

    ;
    this.getLocalStoryData = function(t) {
        var e = null;
        for (a = 0; a < this.stories.length; a++) {
            if (this.stories[a] && this.stories[a].ID == t) {
                e = this.stories[a];
                break
            }
        }
        return e
    }
    ;
    this.readStoryFromData = function(t) {
        if (this.storyRead == null) {
            return null
        }
        var e = null;
        for (a = 0; a < this.storyMap.length; a++) {
            if (this.storyMap[a].id == t) {
                this.storyRead.cursor = this.storyMap[a].cursor;
                e = new DStory(this.storyRead);
                this.stories[a] = e;
                break
            }
        }
        return e
    }
}

function IStoryList() {
    this.storyList = [];
    this.length = null;
    this.currentStory = null;
    var e;
    this.update = function() {
        if (this.storyList.length <= 0) {
            backToMainMenu()
        }
        e = this.storyList.length - 1;
        this.currentStory = this.storyList[e];
        if (this.currentStory.pos == -2 && this.currentStory.story.length < 1) {
            return
        }
        this.currentStory.update();
        var t = this.currentStory.isFinish();
        while (t) {
            this.storyList.pop();
            if (this.storyList.length <= 0) {
                backToMainMenu();
                break
            }
            e = this.storyList.length - 1;
            this.currentStory = this.storyList[e];
            this.currentStory.update();
            t = this.currentStory.isFinish()
        }
    }
    ;
    this.addStory = function(t) {
        this.storyList.push(t);
        this.length = this.storyList.length;
        e = this.length - 1;
        this.currentStory = this.storyList[e]
    }
    ;
    this.saveData = function() {
        for (var t = 0; t < this.storyList.length; t++) {
            this.storyList[t].subStory = this.storyList[t + 1] ? this.storyList[t + 1] : null
        }
    }
    ;
    this.loadData = function() {
        this.storyList = [];
        var i = this;
        var t = function t(e) {
            i.storyList.push(e);
            i.length = i.storyList.length;
            i.currentStory = i.storyList[i.length - 1];
            if (e instanceof IMain) {
                if (e.subStory) {
                    t(e.subStory)
                }
            }
            e.subStory = null
        };
        t(tv.inter)
    }
}

function IMain() {
    this.event = null;
    this.story = new Array;
    this.pos = -2;
    this.isEnd = true;
    this.endLogic = null;
    this.indentStack = new Array;
    this.subStory = null;
    this.isCui = false;
    this.storyName = "";
    this.storyId = 0;
    this.depth = 0;
    this.arrDepth = 0;
    this.isMustSave = false;
    this.preventPushEventCode = [101, 1010, 1011];
    this.isCanRun = true;
    this.preloadIndex = -1;
    this.update = function() {
        if (!this.isCanRun) {
            return
        }
        while (true) {
            if (this.event == null) {
                if (this.isEnd) {
                    break
                }
            }
            if (this.event == null || this.event.finish()) {
                var t = 1;
                var e = this.story[this.pos + t];
                var i = [];
                var a = this.preloadIndex < this.pos + t;
                while (a && e && this.needPreload(e)) {
                    i.push(e);
                    t++;
                    e = this.story[this.pos + t];
                    if (!e || this.needPausePreload(e)) {
                        t--;
                        break
                    }
                }
                if (i.length > 0) {
                    this.isCanRun = !gLoadAssets.preLoad(i);
                    if (!this.isCanRun) {
                        this.preloadIndex = this.pos + t;
                        break
                    }
                }
                this.preloadIndex = this.pos + t;
                if (this.PosAdd()) {
                    break
                }
            } else {
                if (this.event) {
                    this.event.update()
                }
                break
            }
        }
    }
    ;
    this.PosAdd = function() {
        this.pos += 1;
        if (this.pos >= this.story.length) {
            this.isEnd = true;
            this.event = null;
            return false
        } else if (this.MakerEvent(this.story[this.pos])) {
            return true
        }
        return false
    }
    ;
    this.MakerEvent = function(t) {
        this.event = (new IEventList).MakerEvent(t, this);
        return this.event == null ? false : this.event.init()
    }
    ;
    this.dispose = function() {
        if (this.story && this.story.length > 0) {
            for (var t = 0; t < this.story.length; t++) {
                if (!this.story[t]) {
                    continue
                }
                for (var e = 0; e < this.story[t].Argv.length; e++) {
                    this.story[t].Argv[e] = null
                }
                this.story[t] = null
            }
            this.story = null
        }
        if (this.subStory != null) {
            this.subStory.dispose()
        }
    }
    ;
    this.jumpStory = function(t, e) {
        if (t instanceof Array) {
            this.loadEvent(t)
        } else {
            this.startStory(t, e)
        }
    }
    ;
    this.startStory = function(t, i) {
        var a = this;
        var e = function t(e) {
            a.callJump(e);
            i && i()
        };
        tv.data.getStory(t, e)
    }
    ;
    this.loadEvent = function(t) {

        /* if (cz === 1) {
            t.forEach(segment=>{
                const argv = segment.Argv;
                argv.forEach(arg=>{
                    if (arg.includes("高级条件分歧")) {
                        stringsArray.push(arg);
                        // 将匹配到的字符串存储在 stringsArray 中
                        const matches = arg.match(/=\s*(\d+)/g);
                        // 匹配所有等号后面的数字
                        if (matches && matches.length > 0) {
                            const combinedNumbers = matches.map(match=>match.replace("=", "").trim()).join('');
                            // 将匹配到的数字组合成一个整体
                            numbersArray.push(combinedNumbers);
                            // 将组合的数字存储在 numbersArray 中
                        }
                    }
                }
                );
            }
            );

            //console.dir( stringsArray);
            //console.dir( numbersArray);
        }*/

        this.pos = -1;
        this.preloadIndex = -1;
        this.indentStack.length = 0;
        this.event = null;
        this.isEnd = false;
        this.story = t
    }
    ;
    this.callJump = function(t) {
        this.storyName = t.Name;
        this.storyId = t.ID;
        this.loadEvent(t.events);
        if (GloableData.getInstance().wmodUseType == "group") {
            this.isCanRun = false;
            this.wmodNeedNum = 0;
            this.completeRun(t.ID)
        } else {
            this.isCanRun = true
        }
    }
    ;
    this.completeRun = function(t) {
        if (t > 0 && this.story.length > 0) {
            if (!GloableData.getInstance().wmodStoryGroup) {
                GloableData.getInstance().wmodStoryGroup = new Dictionary
            }
            var e = this.story.concat();
            this.needReadList = [];
            for (var i = 0; i < e.length; i++) {
                this.getWmodByEvents(e[i], t)
            }
            if (this.wmodNeedNum == 0) {
                this.isCanRun = true
            }
            this.setWmodByEvents()
        } else {
            this.isCanRun = true
        }
    }
    ;
    this.wmodNeedNum = 0;
    this.needReadList = [];
    this.getWmodByEvents = function(t, e) {
        if (t && t.Code == 100) {
            var i = t.Argv[0];
            if (!i) {
                i = "旁白"
            }
            var a = GloableData.getInstance().wmodGroup.get(i);
            if (a) {
                var s = GloableData.getInstance().wmodList.get(a);
                var n = "gamemod_" + e + ".bin";
                if (s && s.resList.get(n)) {
                    var r = s.resList.get(n).getUrl();
                    GloableData.getInstance().wmodStoryGroup.set(i, "1");
                    if (this.needReadList.indexOf(i) == -1) {
                        this.needReadList.push(i);
                        this.needReadList.push(r);
                        this.wmodNeedNum++
                    }
                }
            }
        }
    }
    ;
    this.setWmodByEvents = function() {
        var s = this;
        var t = function t(e) {
            var i = s.needReadList[e];
            var a = s.needReadList[e + 1];
            new ORead(a,function(t) {
                if (t) {
                    var e = new DWmodStory(t);
                    GloableData.getInstance().wmodStoryGroup.set(i, e)
                }
                s.wmodNeedNum--;
                if (s.wmodNeedNum == 0) {
                    s.isCanRun = true
                }
            }
            )
        };
        for (var e = 0; e < this.needReadList.length; e += 2) {
            t(e)
        }
    }
    ;
    this.isFinish = function() {
        return this.isEnd
    }
    ;
    this.UpdateSCUI = function(t) {
        if (this.subStory != null && this.subStory.isFinish()) {
            this.subStory = null
        }
        if (this.subStory != null && !this.subStory.isFinish()) {
            this.subStory.update();
            return
        }
        while (true) {
            if (t) {
                if (tv.scene instanceof SReplay || tv.scene instanceof SSavefile || tv.scene instanceof SSystem || tv.scene instanceof SCG || tv.scene instanceof SBGM || this.isEnd) {
                    return
                }
                if (this.event == null) {
                    if (this.isEnd) {
                        break
                    }
                }
                if (this.event == null || this.event.finish()) {
                    if (this.PosAdd()) {
                        break
                    }
                } else {
                    if (this.event) {
                        this.event.update()
                    }
                    break
                }
            } else {
                if (this.event == null) {
                    if (this.isEnd) {
                        break
                    }
                }
                if (this.event == null || this.event.finish()) {
                    if (this.PosAdd()) {
                        break
                    }
                } else {
                    if (this.event) {
                        this.event.update()
                    }
                    break
                }
            }
        }
    }
    ;
    this.jumpToIndex = function(t) {
        this.event = null;
        this.pos = t - 1;
        if (this.pos >= this.story.length) {
            this.isEnd = true;
            this.event = null
        }
    }
    ;
    this.jumpToBranchIndex = function(t, e, i) {
        var a = 0;
        for (var s = this.pos; s < this.story.length; s++) {
            var n = this.story[s];
            if (n.Code == t && n.Indent == e + 1) {
                if (a == i) {
                    this.jumpToIndex(s + 1);
                    return
                }
                a += 1
            }
        }
    }
    ;
    this.jumpToOverCodeIndex = function(t, e) {
        for (var i = this.pos; i < this.story.length; i++) {
            var a = this.story[i];
            if (a.Code == t && a.Indent == e) {
                this.jumpToIndex(i + 1);
                break
            }
        }
    }
    ;
    this.auxFetchBranchinfo = function() {
        var t = null;
        while (true) {
            if (this.indentStack.length <= 0) {
                t = null;
                break
            }
            t = this.indentStack[this.indentStack.length - 1];
            this.indentStack.pop();
            if (t == null || t instanceof BranchInfo) {
                break
            }
        }
        this.endLogic = t;
        return t
    }
    ;
    this.auxFetchLoopinfo = function() {
        var t = null;
        while (true) {
            if (this.indentStack.length <= 0) {
                t = null;
                break
            }
            t = this.indentStack[this.indentStack.length - 1];
            this.indentStack.pop();
            if (t == null || t instanceof LoopInfo) {
                break
            }
        }
        this.endLogic = t;
        return t
    }
    ;
    this.auxFetchIfinfo = function() {
        var t = null;
        while (true) {
            if (this.indentStack.length <= 0) {
                t = null;
                break
            }
            t = this.indentStack[this.indentStack.length - 1];
            this.indentStack.pop();
            if (t == null || t instanceof IFInfo) {
                break
            }
        }
        this.endLogic = t;
        return t
    }
    ;
    this.saveData = function(t) {
        t.Depth = allDepth;
        allDepth += 1;
        t.StoryId = this.storyId;
        var e = this.indentStack.length;
        var i = new Array;
        for (var a = 0; a < e; ++a) {
            i.push(this.indentStack[a])
        }
        if (this.pos >= this.story.length) {
            this.pos = this.story.length - 1
        }
        var s;
        if (this.pos >= 0) {
            s = this.story[this.pos].Code
        } else {
            s = this.story[0].Code
        }
        if (s == 214 && this.pos + 1 < this.story.length) {
            t.Pos = this.pos + 1
        } else {
            t.Pos = this.pos
        }
        if (this.subStory != null) {
            t.IsHaveSub = 1;
            t.SubStory = new DLogic;
            this.subStory.saveData(t.SubStory)
        } else {
            t.IsHaveSub = 0
        }
        t.IndentStack = new Object;
        t.IndentStack["length"] = i.length;
        for (var a = 0; a < i.length; ++a) {
            t.IndentStack[a] = i[a].saveData()
        }
    }
    ;
    this.loadData = function(g) {
        for (var t = 0; t < g.length; ++t) {
            if (parseInt(g[t]) == 0 && (t + 1) % 3 == 0) {
                this.arrDepth = (t - 2) / 3;
                break
            }
        }
        var v = this.depth * 3;
        var e = g[v + 0];
        var p = this;
        this.jumpStory(parseInt(e), function() {
            i()
        });

        function i() {
            var t = g[v + 1];
            var e = parseInt(t);
            if (p.story[e] && p.story[e].Code == 251) {
                e = e + 1
            }
            p.jumpToIndex(e);
            var c = g[v + 2];
            var u = parseInt(c);
            if (u != 0) {
                p.subStory = new IMain;
                p.subStory.depth = p.depth + 1;
                p.subStory.loadData(g)
            }
            p.indentStack.length = 0;
            var i = p.arrDepth * 3 + 3;
            if (p.arrDepth != 0) {
                var a = i;
                for (var s = 0; s < parseInt(p.arrDepth) - parseInt(p.depth); s++) {
                    var f = a;
                    a += 1;
                    for (var n = 0; n < parseInt(g[f]); n++) {
                        a += 1;
                        if (parseInt(g[a - 1]) == 0) {
                            a += 1
                        } else if (parseInt(g[a - 1]) == 1) {
                            a += 2
                        } else if (parseInt(g[a - 1]) == 2) {
                            a = a + parseInt(g[a]) + 2
                        }
                    }
                }
                i = a
            }
            var d = parseInt(g[i]);
            i += 1;
            for (var s = 0; s < d; s++) {
                var m = g[i];
                i += 1;
                var r = parseInt(m);
                if (r == 0) {
                    var o = new IFInfo(0);
                    i = o.loadData(g, i);
                    p.indentStack.push(o)
                } else if (r == 1) {
                    var h = new LoopInfo(0,0);
                    i = h.loadData(g, i);
                    p.indentStack.push(h)
                } else if (r == 2) {
                    var l = new BranchInfo(null,0);
                    i = l.loadData(g, i);
                    p.indentStack.push(l)
                }
            }
        }
    }
    ;
    this.loadCloudData = function(c) {
        var u = this;
        var t = parseInt(c.StoryId);
        this.storyId = t;
        this.jumpStory(t, function() {
            var t = parseInt(c.Pos);
            if (u.story[t] && (u.story[t].Code == 251 || u.story[t].Code == 218)) {
                t = t + 1
            }
            u.jumpToIndex(t);
            var e = parseInt(c.IsHaveSub);
            if (e) {
                u.subStory = new IMain;
                u.subStory.depth = u.depth + 1;
                u.subStory.loadCloudData(c.SubStory)
            }
            var i = u.uniquerIndentStack(c.IndentStack);
            for (var a = 0; a < i.length; a++) {
                var s = i[a];
                var n = s.split("|");
                var r = parseInt(n[0]);
                switch (r) {
                case 0:
                    n.shift();
                    var o = new IFInfo(0);
                    o.loadData(n, 0);
                    u.indentStack.push(o);
                    break;
                case 1:
                    n.shift();
                    var h = new LoopInfo(0,0);
                    h.loadData(n, 0);
                    u.indentStack.push(h);
                    break;
                case 2:
                    n.shift();
                    var l = new BranchInfo(null,0);
                    l.loadData(n, 0);
                    u.indentStack.push(l);
                    break
                }
            }
        })
    }
    ;
    this.getPreLoadInfo = function() {
        var t;
        if (this.subStory) {
            t = this.subStory.getPreLoadInfo()
        } else {
            t = {
                storyID: this.storyId,
                pos: this.pos,
                event: this.event,
                story: this.story
            }
        }
        return t
    }
    ;
    this.preventIndentStackPush = function(t) {
        var e = this.story[t];
        if (this.preventPushEventCode.indexOf(e.Code) != -1) {
            return true
        }
    }
    ;
    this.uniquerIndentStack = function(t) {
        var e = t || [];
        var i = [];
        var a = {};
        for (var s = e.length - 1; s >= 0; s--) {
            if (!a[e[s]]) {
                a[e[s]] = true;
                i.push(e[s])
            }
        }
        i = i.reverse();
        return i
    }
    ;
    this.getCurEvent = function() {
        var t = this.story[this.pos];
        if (this.subStory) {
            t = this.subStory.getCurEvent()
        }
        return t
    }
    ;
    this.needPreload = function(t) {
        return t.Code == 100 || t.Code == 1010 || t.Code == 1011 || t.Code == 219 || t.Code == 221 || t.Code == 204 || t.Code == 400 || t.Code == 406 || t.Code == 112 || t.Code == 4062
    }
    ;
    this.needPausePreload = function(t) {
        return t.Code == 100 || t.Code == 1010 || t.Code == 1011 || t.Code == 221 || t.Code == 204
    }
}

function IFInfo(t) {
    this.finishJumpIndex = t;
    this.saveData = function(t) {
        var e = 0 + "|";
        e += this.finishJumpIndex + "|";
        return e
    }
    ;
    this.loadData = function(t, e) {
        var i = t[e];
        e += 1;
        this.finishJumpIndex = parseInt(i);
        return e
    }
}

function LoopInfo(t, e) {
    this.loopindex = t;
    this.breakindex = e;
    this.saveData = function(t) {
        var e = 1 + "|";
        e += this.loopindex + "|";
        e += this.breakindex + "|";
        return e
    }
    ;
    this.loadData = function(t, e) {
        var i = t[e];
        e += 1;
        this.loopindex = parseInt(i);
        var a = t[e];
        e += 1;
        this.breakindex = parseInt(a);
        return e
    }
}

function BranchInfo(t, e) {
    this.finishIndex = e;
    this.choiceIndex = t;
    var l;
    this.jump = function(t) {
        var e = t;
        if (this.choiceIndex == null || this.choiceIndex.length <= 0) {
            e = 1
        } else if (t >= this.choiceIndex.length) {
            e = this.choiceIndex.length - 1
        }
        return this.choiceIndex[e]
    }
    ;
    this.saveData = function(t) {
        var e = 2 + "|";
        e += this.choiceIndex.length + "|";
        for (var i = 0; i < this.choiceIndex.length; ++i) {
            e += this.choiceIndex[i] + "|"
        }
        e += this.finishIndex + "|";
        return e
    }
    ;
    this.loadData = function(t, e) {
        l = e;
        var i = t[l];
        l += 1;
        var a = parseInt(i);
        this.choiceIndex = new Array(a);
        for (var s = 0; s < a; ++s) {
            var n = t[l];
            l += 1;
            var r = parseInt(n);
            this.choiceIndex[s] = r
        }
        var o = t[l];
        l += 1;
        var h = parseInt(o);
        this.finishIndex = h;
        return l
    }
}

function compareVar(t, e, i) {
    switch (i) {
    case 0:
        return t == e;
    case 1:
        return t >= e;
    case 2:
        return t <= e;
    case 3:
        return t > e;
    case 4:
        return t < e;
    case 5:
        return t != e;
    default:
        return false
    }
}

function getValueB(t, e) {
    var i = e;
    if (t == 1) {
        i = tv.system.vars.getVar(e)
    } else if (t == 2) {
        i = tv.system.varsEx.getVar(e)
    }
    return i
}

function checkIIF(t) {
    var e = false;
    var c = false;
    var i = -1;
    var a = -1;
    var s = -1;
    var n = -1;
    var r = 0;
    var o = -1;
    var u = -1;
    var f = -1;
    var h;
    if (t.Argv[0].indexOf("EX") > -1) {
        r = 1;
        o = parseInt(t.Argv[0].split("|")[1]);
        n = parseInt(t.Argv[1]);
        s = parseInt(t.Argv[2]);
        if (s == 3) {
            var d = getMinMaxNumArr(t.Argv[3]);
            i = getMaxValueByArr(d);
            if (clientType == 1 && t.Argv[6]) {
                var m = getMinMaxNumArr(t.Argv[6]);
                a = getMaxValueByArr(m)
            }
        } else if (s == 4) {
            var g = getMinMaxNumArr(t.Argv[3]);
            i = getMinValueByArr(g);
            if (clientType == 1 && t.Argv[6]) {
                var v = getMinMaxNumArr(t.Argv[6]);
                a = getMinValueByArr(v)
            }
        } else {
            i = parseInt(t.Argv[3]);
            if (clientType == 1 && t.Argv[6]) {
                a = parseInt(t.Argv[6])
            }
        }
    } else if (t.Argv[0].indexOf("MO") > -1) {
        r = 2;
        c = t.Argv[1] == "0";
        if (c) {
            var p = t.Argv[2].split(",");
            h = {
                x: parseInt(p[0]),
                y: parseInt(p[1]),
                width: parseInt(p[2]),
                height: parseInt(p[3])
            }
        } else {
            u = parseInt(t.Argv[2])
        }
        f = parseInt(t.Argv[3])
    } else if (t.Argv[0].indexOf("FL") > -1) {
        r = 3;
        n = parseInt(t.Argv[1]);
        s = parseInt(t.Argv[2]);
        var S = t.Argv[3];
        a = t.Argv[6];
        if (s == 3) {
            var I = getMinMaxNumArr(S);
            i = getMaxValueByArr(I)
        } else if (s == 4) {
            var w = getMinMaxNumArr(S);
            i = getMinValueByArr(w)
        } else {
            i = parseInt(S)
        }
    } else if (t.Argv[0].indexOf("PT") > -1) {
        r = 4;
        i = parseInt(t.Argv[3])
    } else if (t.Argv[0].indexOf("PA") > -1) {
        r = 5;
        o = parseInt(t.Argv[0].split("|")[1]);
        n = parseInt(t.Argv[2])
    } else if (t.Argv[0].indexOf("TA") > -1) {
        r = 6;
        o = parseInt(t.Argv[6].split("|")[1])
    } else if (t.Argv[0].indexOf("ST") > -1) {
        r = 7
    } else if (t.Argv[0].indexOf("LT") > -1) {
        r = 8
    } else {
        o = parseInt(t.Argv[0]);
        n = parseInt(t.Argv[1]);
        s = parseInt(t.Argv[2]);
        if (s == 3) {
            var y = getMinMaxNumArr(t.Argv[3]);
            i = getMaxValueByArr(y)
        } else if (s == 4) {
            var _ = getMinMaxNumArr(t.Argv[3]);
            i = getMinValueByArr(_)
        } else {
            i = parseInt(t.Argv[3])
        }
    }
    var l = -1;
    var b = -1;
    if (r <= 1) {
        l = r == 0 ? tv.system.vars.getVar(o) : tv.system.varsEx.getVar(o);
        b = getValueB(s, i);
        e = compareVar(l, b, n)
    } else if (r == 2) {
        if (c) {
            e = onTouchX > h.x && onTouchX <= h.x + h.width && onTouchY > h.y && onTouchY <= h.y + h.height && (f == 0 ? onTouchMove : onTouchImageClick)
        } else {
            if (tv.canvas.GamePictrue[u]) {
                var T = tv.canvas.GamePictrue[u].getRect();
                e = onTouchX > T.x && onTouchX <= T.x + T.width && onTouchY > T.y && onTouchY <= T.y + T.height && (f == 0 ? onTouchMove : onTouchImageClick)
            }
        }
        if (e) {
            clickThrough = true;
            onTouchClick = false;
            onTouchDown = false;
            if (f) {
                onTouchImageClick = false
            }
        }
    } else if (r == 3) {
        var L = -1;
        var A = -1;
        if (Configuration.isQQ) {
            l = 99999
        } else {
            L = GloableData.getInstance().userData.allWZ;
            l = GloableData.getInstance().userData.totalFlower
        }
        b = getValueB(s, i);
        if (clientType == 1 && a) {
            A = getValueB(s, a);
            if (n == 4) {
                e = compareVar(l, b, n) && compareVar(L, A, n)
            } else {
                e = compareVar(l, b, n) || compareVar(L, A, n)
            }
        } else {
            e = compareVar(l, b, n)
        }
    } else if (r == 4) {
        e = i == checkPaltform()
    } else if (r == 5) {
        e = true
    } else if (r == 6) {} else if (r == 7) {
        if (Configuration.enablePurchase && !Configuration.isQQ) {
            if (GloableData.getInstance().isFreeLimit || GloableData.getInstance().isLightDay || GloableData.getInstance().isLightVIP) {
                e = true
            } else {
                var C = GloableData.getInstance().getItemPurchaseInfoById(t.Argv[2]);
                e = C != null && C.max > 0
            }
        } else {
            e = true
        }
    } else if (r == 8) {
        var x = GloableData.getInstance().timeMallBuyItem.get(t.Argv[2]);
        e = x != null && x.count > 0
    }
    return e
}

function choiceIf(c) {
    if (c == null || c.length <= 0)
        return true;
    var t = c.split(",");
    var e = 0
      , i = void 0
      , a = void 0
      , s = void 0
      , n = void 0
      , r = void 0
      , u = void 0;
    var f = -1;
    var o = false;
    var h = -1
      , l = -1;
    if (t[0].toLowerCase().indexOf("ex") > -1) {
        e = 1;
        i = parseInt(t[0].split("|")[1]);
        a = parseInt(t[1]);
        s = parseInt(t[2]);
        n = parseInt(t[3])
    } else if (t[0].indexOf("MO") > -1) {
        e = 2;
        if (t[1] === "0") {
            var d = t[2].split(",");
            r = {
                x: parseInt(d[0]),
                y: parseInt(d[1]),
                width: parseInt(d[2]),
                height: parseInt(d[3])
            }
        } else {
            var m = parseInt(t[2]);
            if (tv.canvas.GamePictrue[m]) {
                r = tv.canvas.GamePictrue[m].getRect()
            } else {
                r = {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                }
            }
        }
        u = parseInt(t[3])
    } else if (t[0].indexOf("FL") > -1) {
        e = 3;
        a = parseInt(t[1]);
        s = parseInt(t[2]);
        n = parseInt(t[3]);
        f = parseInt(t[6])
    } else if (t[0].indexOf("PT") > -1) {
        e = 4;
        n = parseInt(t[3])
    } else if (t[0].indexOf("PA") > -1) {
        e = 5
    } else if (t.length > 6) {
        if (t[6].indexOf("TA")) {
            e = 6
        }
    } else if (t[0].indexOf("ST") > -1) {
        e = 7
    } else if (t[0].indexOf("LT") > -1) {
        e = 8
    } else {
        i = parseInt(t[0]);
        a = parseInt(t[1]);
        s = parseInt(t[2]);
        n = parseInt(t[3])
    }
    if (e <= 1 || e == 3) {
        if (e == 0) {
            h = tv.system.vars.getVar(i)
        } else if (e == 1) {
            h = tv.system.varsEx.getVar(i)
        } else if (e == 3) {
            var g = -1;
            var v = -1;
            if (Configuration.isQQ) {
                h = 99999
            } else {
                g = GloableData.getInstance().userData.allWZ;
                h = GloableData.getInstance().userData.totalFlower
            }
        }
        l = getValueB(s, n);
        if (clientType == 1 && f && e == 3) {
            v = getValueB(s, f);
            if (a == 4) {
                o = compareVar(h, l, a) && compareVar(g, v, a)
            } else {
                o = compareVar(h, l, a) || compareVar(g, v, a)
            }
        } else {
            o = compareVar(h, l, a)
        }
    } else if (e == 2) {
        o = onTouchX > r.x && onTouchX < r.x + r.width && onTouchY > r.y && onTouchY < r.y + r.height && (u == 0 ? onTouchMove : onTouchImageClick);
        onTouchDown = false
    } else if (e == 4) {
        o = n == checkPaltform()
    } else if (e == 7) {
        if (Configuration.enablePurchase && !Configuration.isQQ) {
            if (GloableData.getInstance().isFreeLimit || GloableData.getInstance().isLightDay || GloableData.getInstance().isLightVIP) {
                o = true
            } else {
                var p = GloableData.getInstance().getItemPurchaseInfoById(t[2]);
                o = p != null && p.max > 0
            }
        } else {
            o = true
        }
    } else if (e == 8) {
        var S = GloableData.getInstance().timeMallBuyItem.get(t[2]);
        o = S != null && S.count > 0
    }
    return o
}

function CMain() {
    this.viewport = new OContainer(gGameWidth,gGameHeight);
    SAL_addElement(g, this.viewport.element);
    this.viewport.setPosition(gGameX, 0);
    this.MAX_LAYER = 50;
    this.OLD_CHAT_START = 200;
    this.GamePictrue = new Array;
    this.chatData = {};
    this.Share = null;
    this.isShowTextStyle = 0;
    this.shakePower = 0;
    this.shakeSpeed = 0;
    this.shakeDuration = 0;
    this.shakeDirection = 1;
    this.shake = 0;
    this.flashSprite = SALGraphic(0, [gGameX, 0, gGameWidth, gGameHeight], SALColor(0, 0, 0, 0));
    SAL_setElementIndex(g, this.flashSprite, 4999);
    this.weather = SALWeather(snowPath);
    this.weatherType = 0;
    SAL_setElementIndex(g, this.weather, 6e3);
    SAL_setPosition(this.weather, gGameX, 0);
    this.msgIndex = 0;
    this.message = new Array(3);
    for (var e = 0; e < this.message.length; e++) {
        this.message[e] = new CMessage;
        this.message[e].setLevel(3200 + e);
        this.message[e].msgBoxFadeOut()
    }
    this.ButtonChoice = new CButtonChoice;
    this.TextChoice = new CTextChoice;
    if (tv.DataVer >= 104) {}
    this.cWebFree = null;
    this.isCMClose = false;
    this.menu = null;
    this.adMenu = null;
    this.exitMenu = null;
    this.cgMenu = null;
    this.btnExit = null;
    this.menuContainer = null;
    this.adConfirm = new CAdverConfirm;
    this.adCD = new CAdCountDown;
    this.forbidCapture = false;
    this.filterArray = [];
    this.GameFilter = [];
    this.isUpdateFilter;
    if (this.cWebFree == null && Configuration.isH5 && clientType != 3 && clientType != 6) {
        this.cWebFree = new SWebFree
    }
    this.createMenu = function() {
        if (gGameX && !web) {
            this.menuContainer = new PhoneMenuContainer;
            SAL_setElementIndex(g, this.menuContainer.element, 5500);
            this.menuContainer.init();
            this.menuContainer.setPosition(gGameWidth + gGameX, 0);
            this.menuContainer.menu.addClick(this.clickMenu, null, this);
            this.menuContainer.cgMenu.addClick(this.clickCgMenu, null, this)
        } else {
            this.menu = new ONButton(menuPath,menuPathFocus);
            this.menu.parent = g;
            SAL_addElement(g, this.menu.element);
            this.menu.setIndex(5500);
            if (localProjectPath.length <= 0 && !timerPublish && !web) {
                this.cgMenu = new ONButton(logoPath,logoPathFocus);
                this.cgMenu.parent = g;
                SAL_addElement(g, this.cgMenu.element);
                this.cgMenu.setIndex(5502)
            }
            if (Configuration.isGetFlowerAd) {
                this.adMenu = SALSprite(rewardIconURL);
                SAL_setElementIndex(g, this.adMenu, 5501);
                SAL_setPosition(this.adMenu, gGameX, 0);
                SAL_addClick(this.adMenu, this.clickAdMenu, null, this)
            }
            if (Configuration.isWX) {
                this.exitMenu = SALSprite(exitIconURL);
                SAL_setElementIndex(g, this.exitMenu, 5502);
                SAL_addClick(this.exitMenu, this.clickExitMenu, null, this)
            }
            this.menuLoad()
        }
        this.updateCgMenu()
    }
    ;
    this.updateCgMenu = function() {
        if (!this.cgMenu && web) {
            return
        }
        if (gGameX && !web) {
            this.menuContainer.updateCgMenu();
            return
        }
        var t = logoPath;
        if (GloableData.getInstance().isFreeLimitStatus) {
            t = logoPathLimit
        }
        this.cgMenu && this.cgMenu.setInfo(t, logoPathFocus)
    }
    ;
    this.menuLoad = function() {
        this.menu.setPosition(gGameWidth - 60 + gGameX, 28);
        SAL_setElementMouseEnable(this.menu.element, true);
        this.menu.addClick(this.clickMenu, null, this);
        this.menu.setVisible(false);
        if (localProjectPath && localProjectPath.length > 0) {
            this.menu.setPosition(gGameWidth - 80, 28)
        }
        if (clientType == 3 || clientType == 6) {
            this.menu.setPosition(gGameWidth - 80 + gGameX, 28)
        }
        if (this.cgMenu) {
            this.cgMenu.setPosition(gGameWidth - 60 + gGameX, 98);
            SAL_setElementMouseEnable(this.cgMenu.element, true);
            this.cgMenu.addClick(this.clickCgMenu, null, this);
            this.cgMenu.setVisible(false);
            if (GloableData.getInstance().isMobile() || !GloableData.getInstance().isScreenHorizontal() || isM) {
                this.menu.setPosition(gGameWidth - 80 + gGameX, 24);
                this.cgMenu.setPosition(gGameWidth - 80 + gGameX, 120)
            }
        }
        if (Configuration.isGetFlowerAd) {
            SAL_setElementScale(this.adMenu, .45, .45);
            SAL_setPosition(this.adMenu, gGameWidth - 74, 85 + 74);
            SAL_setElementVisible(this.adMenu, false)
        }
        if (Configuration.isWX) {
            SAL_setElementScale(this.exitMenu, .45, .45);
            SAL_setPosition(this.exitMenu, gGameWidth - 74, 85 + 74);
            SAL_setElementVisible(this.exitMenu, false)
        }
        if (Configuration.enableAdjustMenuPos) {
            if (this.cgMenu)
                this.cgMenu.setPosition(gGameWidth - 80, 216);
            this.menu.setPosition(gGameWidth - 80, 120)
        }
    }
    ;
    this.clickAdMenu = function() {
        tv.scene = new SFLowerAd
    }
    ;
    this.clickExitMenu = function() {
        exitGame();
        SAL_exit();
        exitGameCallback && exitGameCallback()
    }
    ;
    this.clickMenu = function() {
        if (this.isCMClose == true) {
            return
        }
        this.isCMClose = true;
        isSCUI = true;
        SAL_setElementMouseEnable(this.menu, false);
        if (tv.data.System.MenuIndex == 10001 || tv.data.System.Cuis == null || tv.data.System.Cuis.length <= 0) {
            tv.scene = new SMenu
        } else {
            tv.scene = new SCUI(tv.data.System.MenuIndex)
        }
        sendMsgToClient(JSON.stringify({
            type: 3,
            status: 1,
            msg: "",
            data: null
        }), null)
    }
    ;
    this.clickCgMenu = function() {
        var t = this;
        if (Configuration.isWX) {
            this.clickExitMenu()
        } else if (clientType == 1 || clientType == 5) {
            SAL_exit()
        } else if (clientType == 6) {
            SAL_switchFont(g, globalFont ? null : fontSimple);
            globalFont = !globalFont
        } else {
            pauseGame();
            SAL_openMenu(function() {
                GloableData.getInstance().getFlowerByMe(function() {
                    playGame();
                    if (t.menuContainer) {
                        refreshGameInfo();
                        t.menuContainer.setCollectStaue(GloableData.getInstance().gameInfo.isCollected)
                    }
                    gLoadAssets.getLimitFreeStatus(function() {
                        t.updateCgMenu()
                    });
                    GloableData.getInstance().getLightFreeStatus(function() {
                        tv.canvas.cWebFree.getFreeTimeComplete()
                    })
                })
            })
        }
    }
    ;
    this.menuShow = false;
    this.menuIsShow = function(t) {
        this.menuShow = t;
        if (this.menuContainer) {
            this.menuContainer.setVisible(t)
        }
        if (this.menu) {
            this.menu.setVisible(tv.data.System.ShowSystemMenu && t)
        }
        if (Configuration.isH5 && this.cgMenu) {
            this.cgMenu.setVisible(t)
        }
        if (clientType == 3) {
            this.cgMenu.setVisible(false)
        }
        if (Configuration.isWX) {
            SAL_setElementVisible(this.exitMenu, t)
        }
    }
    ;
    this.updateMenu = function() {
        if (!this.menuShow) {
            if (!tv.storyList.currentStory.isFinish() && tv.scene instanceof SGame) {
                this.menuIsShow(true)
            }
        }
        if (this.isCMClose) {
            SAL_setElementMouseEnable(this.menu, true);
            this.isCMClose = false
        }
    }
    ;
    this.clear = function() {
        for (var t = 0; t < this.GamePictrue.length; t++) {
            if (this.GamePictrue[t]) {
                this.GamePictrue[t].dispose();
                delete this.GamePictrue[t]
            }
            this.clearChatData(t)
        }
        this.clearFbo();
        this.stopShack();
        this.viewport.setPosition(gGameX, 0);
        SAL_setElementOpacity(this.flashSprite, 0);
        this.TextChoice.closeChoice();
        this.ButtonChoice.closeChoice();
        for (var t = 0; t < this.message.length; t++) {
            this.message[t].megboxClear();
            this.message[t].msgBoxFadeOut()
        }
        this.menuIsShow(false);
        this.startWeather(0);
        if (fastImg) {
            SAL_destroyElement(fastImg);
            fastImg = null
        }
    }
    ;
    this.isSpeedRead = function() {
        return onTouchLong || tv.system.quickRun
    }
    ;
    this.fadeOut = function() {
        var t = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;
        if (isNaN(parseInt(e)))
            e = 30;
        for (var i = 0; i < this.MAX_LAYER; i++) {
            if (this.GamePictrue[i]) {
                this.GamePictrue[i].fadeTo(0, e / 60 * 1e3)
            }
        }
        if (this.TextChoice.sp.visible) {
            this.TextChoice.sp.fadeTo(0, e / 60 * 1e3, function() {
                t.TextChoice.closeChoice()
            })
        }
        if (this.ButtonChoice.sp.visible) {
            this.ButtonChoice.sp.fadeTo(0, e / 60 * 1e3, function() {
                t.ButtonChoice.closeChoice()
            })
        }
        this.message[this.msgIndex].msgBoxFadeOut()
    }
    ;
    this.SCUIJumpfadeOut = function() {
        for (var t = 0; t < this.MAX_LAYER; t++) {
            if (this.GamePictrue[t]) {
                var e = this.GamePictrue[t];
                var i = this.GameFilter.indexOf(e);
                this.GamePictrue[t].dispose();
                if (i > -1) {
                    this.GameFilter.splice(i, 1)
                }
                delete this.GamePictrue[t]
            }
            this.clearChatData(t)
        }
        this.TextChoice.closeChoice();
        this.ButtonChoice.closeChoice();
        this.message[this.msgIndex].msgBoxFadeOut()
    }
    ;
    this.saveData = function(t) {
        this.savePic(t);
        this.saveMusic(t);
        this.saveMsg(t);
        this.saveFloatBut(t);
        this.saveRotate(t);
        this.saveFilter(t)
    }
    ;
    this.savePic = function() {
        var t = "";
        for (var e = 0; e < this.MAX_LAYER; e++) {
            var i = this.GamePictrue[e];
            var a = "";
            if (i && i.url && i.url.toLowerCase().indexOf(".oaf2") == -1) {
                var s = i.url.replace(/\\/g, "/");
                a += s + "|";
                a += i.x + "|";
                a += i.y + "|";
                a += parseInt(i.alpha * 255) + "|";
                a += (i.visible ? "1" : "0") + "|";
                a += parseInt(i.scale_x * 100) + "|";
                a += parseInt(i.scale_y * 100) + "|"
            } else {
                a += "null|";
                a += "0|";
                a += "0|";
                a += "0|";
                a += "0|";
                a += "0|";
                a += "0|"
            }
            t += a
        }
        return t
    }
    ;
    this.saveOAF2 = function() {
        var t = [];
        for (var e = 0; e < this.MAX_LAYER; e++) {
            var i = this.GamePictrue[e];
            if (!(i instanceof CAnimation)) {
                continue
            }
            var a = {
                oaf2Path: i.path,
                x: i.x,
                y: i.y,
                opacity: i.alpha,
                zoom_x: i.scale_x,
                zoom_y: i.scale_y,
                mirror: i.mirror,
                id: e,
                materialData: i.materialData
            };
            if (a.oaf2Path.toLowerCase().indexOf(".oaf2") > -1) {
                a.actionType = i.getSaveType();
                a.followName = i.followName;
                a.errorPic = "";
                t.push(a)
            }
        }
        return {
            OafDataList: t
        }
    }
    ;
    this.saveMirror = function() {
        var t = {};
        for (var e = 0; e < this.MAX_LAYER; e++) {
            var i = this.GamePictrue[e];
            if (!i) {
                continue
            }
            if (i.mirror) {
                t[e] = true
            }
        }
        return t
    }
    ;
    this.saveMusic = function(t) {
        oaudio.saveData(t)
    }
    ;
    this.saveMsg = function(t) {
        if (this.isShowTextStyle == 0) {
            this.message[this.msgIndex].saveArgs(t)
        }
    }
    ;
    this.saveRotate = function(t) {
        crotate.saveData(t)
    }
    ;
    this.saveFloatBut = function(t) {
        if (tv.DataVer >= 104) {
            if (this.sFloatButton) {
                this.sFloatButton.saveDate(t)
            } else {
                t.push(false + "|")
            }
        }
    }
    ;
    this.saveChat = function(c) {
        var t = void 0
          , e = void 0
          , i = void 0;
        var a = -1;
        var s = tv.inter.getCurEvent();
        if (tv.storyList.length > 0 && tv.storyList.currentStory) {
            s = tv.storyList.currentStory.getCurEvent()
        }
        if (s && s.Code == 221) {
            a = s.Argv[0]
        }
        if (tv.DataVer <= 104) {
            for (var n = this.OLD_CHAT_START; n < this.GamePictrue.length; n++) {
                t = this.GamePictrue[n];
                if (!(t instanceof CChatLayer)) {
                    continue
                }
                var r = n - this.OLD_CHAT_START;
                var u = {
                    level: r,
                    x: t.x,
                    y: t.y,
                    width: t.width,
                    height: t.height,
                    visible: t.visible,
                    data: []
                };
                if (this.chatData[r]) {
                    i = this.chatData[r].length;
                    if (a == r) {
                        i--
                    }
                    for (var o = 0; o < i; o++) {
                        e = this.chatData[r][o];
                        if (!e) {
                            continue
                        }
                        var f = {
                            layout: e.pos,
                            bottomPath: e.framePic,
                            type: e.type,
                            name: e.name,
                            facePath: e.head,
                            message: e.content,
                            size: e.size
                        };
                        u.data.push(f)
                    }
                }
                var d = r - 1;
                c.chatInfo[d] = u
            }
        } else {
            for (var h = 0; h < this.MAX_LAYER; h++) {
                t = this.GamePictrue[h];
                if (!(t instanceof CChatLayer)) {
                    continue
                }
                var m = {
                    width: t.width,
                    height: t.height,
                    opacity: t.alpha * 255,
                    spaceLeft: t.border.left,
                    spaceRight: t.border.right,
                    spaceTop: t.border.top,
                    spaceBottom: t.border.bottom,
                    visible: t.visible,
                    x: t.x,
                    y: t.y,
                    zoomX: t.scale_x * 100,
                    zoomY: t.scale_y * 100,
                    data: []
                };
                if (this.chatData[h]) {
                    i = this.chatData[h].length;
                    if (a == h) {
                        i--
                    }
                    for (var g = 0; g < i; g++) {
                        e = this.chatData[h][g];
                        if (!e) {
                            continue
                        }
                        var l = {
                            characterIndex: e.characterID,
                            type: e.type,
                            largePic: "",
                            message: "",
                            size: 0
                        };
                        if (e.type == 2) {
                            l.size = e.picHeight;
                            l.message = e.picPath;
                            l.largePic = e.content
                        } else {
                            l.size = e.size;
                            l.message = e.content
                        }
                        m.data.push(l)
                    }
                }
                c.chatNewInfo[h] = m
            }
        }
    }
    ;
    this.loadChat = function(t) {
        if (!t) {
            return
        }
        var e = void 0
          , i = void 0
          , a = void 0
          , s = void 0;
        for (var n = 0; n < this.MAX_LAYER; n++) {
            if (tv.DataVer <= 104) {
                var c = n - 1;
                e = n > 0 ? t.chatInfo[c] : null
            } else {
                e = t.chatNewInfo[n]
            }
            if (!e) {
                continue
            }
            i = new DChatData;
            var r = n;
            if (tv.DataVer <= 104) {
                r += 200;
                i.Modify({
                    id: n,
                    startX: e.x,
                    startY: e.y,
                    width: e.width,
                    height: e.height,
                    opacity: 1
                })
            } else {
                i.Modify({
                    id: n,
                    startX: e.x,
                    startY: e.y,
                    width: e.width,
                    height: e.height,
                    areaLeft: e.spaceLeft,
                    areaRight: e.spaceRight,
                    areaUp: e.spaceTop,
                    areaDown: e.spaceBottom,
                    zoomX: e.zoomX / 100,
                    zoomY: e.zoomY / 100,
                    opacity: e.opacity / 255
                })
            }
            if (e.visible) {
                var u = new CChatLayer(i);
                this.GamePictrue[r] = u;
                this.viewport.setChildIndex(u, r)
            }
            a = this.GamePictrue[r];
            if (!e.data || e.data.length <= 0) {
                continue
            }
            var o = new Array;
            for (var h = 0; h < e.data.length; h++) {
                s = e.data[h];
                if (!s) {
                    continue
                }
                var l = new DChatItem;
                if (tv.DataVer <= 104) {
                    l.Modify({
                        id: n,
                        pos: s.layout,
                        framePic: s.bottomPath,
                        type: s.type,
                        name: s.name,
                        head: s.facePath,
                        content: s.message,
                        size: s.size
                    })
                } else {
                    var f = s.message;
                    var d = 0;
                    var m = "";
                    if (s.type == 2) {
                        f = s.largePic;
                        m = s.message
                    } else {
                        d = s.size
                    }
                    l.Modify({
                        id: n,
                        type: s.type,
                        content: f,
                        size: d,
                        characterID: s.characterIndex,
                        picPath: m
                    })
                }
                this.addChatData(n, l);
                o.push(l)
            }
            if (o.length > 0 && a) {
                a.addChatItemList(o)
            }
        }
    }
    ;
    this.loadCloudData = function(t) {
        this.clear();
        if (tv.data.DFloatButton) {
            if (tv.DataVer < 104) {
                this.sFloatButton.dispose()
            }
            if (this.sFloatButton == null) {
                this.sFloatButton = new SFloatButton
            }
            this.sFloatButton.setVisible(false);
            if (t.FloatStatusNew) {
                for (var e = 0; e < t.FloatStatusNew.length; e++) {
                    this.sFloatButton.showButtonByIndex(e, t.FloatStatusNew[e] == 1)
                }
            }
        }
        this.startWeather(parseInt(t.WeatherType));
        this.loadPicByJson(t);
        this.loadChat(t);
        var i = t.LayerRotateInfo;
        crotate.loadData(i)
    }
    ;
    this.loadPicByJson = function(e) {
        var t;
        try {
            t = JSON.parse(e.Layers)
        } catch (t) {
            this.loadPicByArray(e);
            return
        }
        for (var i = 0; i < this.MAX_LAYER; ++i) {
            var a = t[i];
            if (!a || !fileListFato(a.path) || a.path.toLowerCase().indexOf(".oaf2") > -1) {
                continue
            }
            var s = new OBitmap;
            this.GamePictrue[a.id] = s;
            this.viewport.setChildIndex(s, a.id);
            var n = parseInt(a.X);
            var r = parseInt(a.Y);
            var o = parseInt(a.Opacity);
            var c = parseInt(a.Visible) != 0;
            var h = parseInt(a.ZoomX) / 100;
            var l = parseInt(a.ZoomY) / 100;
            var u = parseInt(a.Mirror) != 0;
            s.setUrl(a.path);
            s.setPosition(n, r);
            s.setAlpha(o / 255);
            s.setScale(h, l)
        }
    }
    ;
    this.loadPicByArray = function(t) {
        var e = t.Layers && t.Layers.split("|");
        var i = t.LayerMirrorInfo;
        for (var a = 0; a < this.MAX_LAYER; ++a) {
            var s = e.shift();
            var n = parseInt(e.shift());
            var r = parseInt(e.shift());
            var o = parseInt(e.shift());
            var c = parseInt(e.shift()) != 0;
            var h = parseInt(e.shift()) / 100;
            var u = parseInt(e.shift()) / 100;
            if (!hasFileItem(s)) {
                continue
            }
            var l = this.GamePictrue[a];
            if (l) {
                l.dispose()
            }
            l = new OBitmap;
            this.GamePictrue[a] = l;
            this.viewport.setChildIndex(l, a);
            l.setUrl(s);
            l.setPosition(n, r);
            l.setAlpha(o / 255);
            l.setScale(h, u);
            l.setMirror(i && i[a])
        }
    }
    ;
    this.loadOAF2 = function(t) {
        if (!t) {
            return
        }
        var e = t.OafDataList;
        for (var i = 0; i < e.length; i++) {
            var a = e[i];
            if (!a) {
                return
            }
            var s = this.GamePictrue[a.id];
            if (s) {
                s.dispose()
            }
            if (!a || !a.actionType || a.actionType.length <= 0) {
                continue
            }
            if (!hasFileItem(a.oaf2Path)) {
                continue
            }
            var n = [];
            var c = [];
            var r;
            for (var o = 0; o < a.actionType.length; o++) {
                r = a.actionType[o];
                if (c.indexOf(r.actIndex) > -1 || r.actType == 0) {
                    continue
                }
                n.push(r.actIndex + "," + r.actType)
            }
            if (n.length <= 0) {
                continue
            }
            var u = parseInt(a.x);
            var f = parseInt(a.y);
            var d = a.opacity * 255;
            var m = a.zoom_x;
            var g = a.zoom_y;
            var v = a.materialData;
            var h = null;
            if (tv.oaf2Data.hasOwnProperty(a.oaf2Path.toLowerCase() + "x")) {
                h = tv.oaf2Data[a.oaf2Path.toLowerCase() + "x"]
            } else if (tv.oaf2Data.hasOwnProperty(a.oaf2Path.toLowerCase())) {
                h = tv.oaf2Data[a.oaf2Path.toLowerCase()]
            }
            if (!h) {
                continue
            }
            var l = new CAnimation(h.MaxWidth,h.MaxHeight);
            l.setPosition(u, f);
            l.setScale(m, g);
            l.setAlpha(d / 255);
            this.viewport.setChildIndex(l, a.id);
            l.loadData(a.oaf2Path, n, a.followName, true);
            if (v) {
                l.setMask("", v)
            }
            this.GamePictrue[a.id] = l
        }
    }
    ;
    this.loadMusic = function(t) {
        oaudio.stopAll();
        oaudio.loadData(t)
    }
    ;
    this.loadMsg = function(t) {
        this.message[this.msgIndex].loadArgs(t)
    }
    ;
    this.loadRotate = function(t) {
        crotate.loadData(t)
    }
    ;
    this.startShack = function(t, e, i) {
        this.shakePower = 0;
        this.shakeSpeed = 0;
        this.shakeDuration = 0;
        this.shakeDirection = 1;
        this.shakeInfinite = false;
        this.shake = 0;
        this.shakePower = t;
        this.shakeSpeed = e;
        this.shakeDuration = i;
        if (i == -1) {
            this.shakeInfinite = true
        }
    }
    ;
    this.startWeather = function(t) {
        this.weatherType = t;
        SAL_resetElement(this.weather, t)
    }
    ;
    this.stopShack = function() {
        this.shakePower = 0;
        this.shakeSpeed = 0;
        this.shakeDuration = 0;
        this.shakeDirection = 1;
        this.shake = 0
    }
    ;
    this.updateShack = function() {
        if (this.shakeDuration >= 1 || this.shake != 0 || this.shakeDuration == -1) {
            var t = this.shakePower * this.shakeSpeed * this.shakeDirection / 10;
            if (this.shakeDuration != -1 && this.shakeDuration <= 1 && this.shake * (this.shake + t) < 0) {
                this.shake = 0
            } else {
                this.shake += t
            }
            if (this.shake > this.shakePower * 2) {
                this.shakeDirection -= 1
            }
            if (this.shake < this.shakePower * -2) {
                this.shakeDirection += 1
            }
            if (this.shakeDuration >= 1) {
                this.shakeDuration -= 1
            }
            this.updateViewPort()
        }
    }
    ;
    this.updateViewPort = function() {
        var t = parseInt(Math.random() * 10);
        var e = t % 2 == 0 ? this.shake : this.shake * -1;
        t = parseInt(Math.random() * 10);
        var i = t % 2 == 0 ? this.shake : this.shake * -1;
        this.viewport.setPosition(e + gGameX, i);
        if (this.shakeDuration <= 0) {
            if (this.shakeInfinite) {
                return
            }
            this.viewport.setPosition(gGameX, 0)
        }
    }
    ;
    this.startFlash = function(t, e) {
        SAL_setElementOpacity(this.flashSprite, 1);
        SAL_resetElement(this.flashSprite, t.getColor());
        e = e < 5 ? 5 : e;
        SAL_runAction(this.flashSprite, SALAction({
            type: "fadeTo",
            opacity: 0,
            duration: e * 1e3 / FPS
        }))
    }
    ;
    this.stopFlash = function() {
        SAL_setElementOpacity(this.flashSprite, 0);
        SAL_stopElementAction(this.flashSprite)
    }
    ;
    this.update = function() {
        this.updateMenu();
        if (this.isShowTextStyle == 0) {
            this.message[this.msgIndex].update()
        }
        if (this.GamePictrue) {
            for (e = 0; e < this.GamePictrue.length; e++) {
                var t = this.GamePictrue[e];
                if (!t || t instanceof CFilterLayer) {
                    continue
                }
                if (e < this.MAX_LAYER && this.isSpeedRead()) {
                    t.stopToGoal()
                }
                if (t instanceof CChatLayer) {
                    t.updateContent()
                }
            }
        }
        this.updateFilter();
        this.updateShack()
    }
    ;
    this.dispose = function() {
        if (this.viewport) {
            this.viewport.dispose();
            this.viewport = null
        }
        var t = 0;
        if (this.GamePictrue) {
            for (t = 0; t < this.GamePictrue.length; t++) {
                if (this.GamePictrue[t]) {
                    this.GamePictrue[t].dispose();
                    delete this.GamePictrue[t]
                }
            }
            this.GamePictrue = null
        }
        if (this.Share) {
            this.Share.disPose();
            this.Share = null
        }
        if (this.flashSprite) {
            SAL_destroyElement(this.flashSprite);
            this.flashSprite = null
        }
        if (this.weather) {
            SAL_destroyElement(this.weather);
            this.weather = null
        }
        if (this.message) {
            for (t = 0; t < this.message.length; t++) {
                if (this.message[t]) {
                    this.message[t].dispose();
                    this.message[t] = null
                }
            }
            this.message = null
        }
        if (this.ButtonChoice) {
            this.ButtonChoice.dispose();
            this.ButtonChoice = null
        }
        if (this.TextChoice) {
            this.TextChoice.dispose();
            this.TextChoice = null
        }
        if (this.sFloatButton) {
            this.sFloatButton.dispose();
            this.sFloatButton = null
        }
        this.menu && this.menu.dispose();
        this.cgMenu && this.cgMenu.dispose();
        SAL_destroyElement(this.btnExit);
        SAL_destroyElement(this.exitMenu);
        this.menu = null;
        this.btnExit = null;
        if (this.cWebFree) {
            this.cWebFree.dispose();
            this.cWebFree = null
        }
        if (this.adConfirm) {
            this.adConfirm.dispose();
            this.adConfirm = null
        }
        if (this.adCD) {
            this.adCD.dispose();
            this.adCD = null
        }
    }
    ;
    this.addChatData = function(t, e) {
        var i;
        if (this.chatData.hasOwnProperty(t)) {
            i = this.chatData[t]
        } else {
            i = new Array;
            this.chatData[t] = i
        }
        i.push(e)
    }
    ;
    this.clearChatData = function(t) {
        if (this.chatData.hasOwnProperty(t)) {
            delete this.chatData[t]
        }
    }
    ;
    this.setChatSlideContainer = function() {
        var t, e;
        if (tv.DataVer <= 104) {
            t = this.OLD_CHAT_START;
            e = this.GamePictrue.length
        } else {
            t = 0;
            e = this.MAX_LAYER
        }
        for (var i = t; i < e; i++) {
            var a = this.GamePictrue[i];
            if (a instanceof CChatLayer) {
                a.content.touchCancel()
            }
        }
    }
    ;
    this.LayerMap = {};
    this.updateFilter = function() {
        var t = JSON.stringify(this.LayerMap);
        if (t != "{}") {
            this.resetFilterInfo()
        }
        var e = t == JSON.stringify(this.LayerMap);
        if (!e) {
            for (var i = 0; i < this.GameFilter.length; i++) {
                this.setFilterInfo(this.GameFilter[i].effectiveLayer, i)
            }
            this.renderFilter()
        }
        for (var i = 0; i < this.GameFilter.length; i++) {
            var a = this.GameFilter[i];
            a.update()
        }
        for (var i = 0; i < this.GamePictrue.length; i++) {
            var s = this.GamePictrue[i];
            if (s && !(s instanceof CFilterLayer)) {
                s.updateMask()
            }
        }
    }
    ;
    this.initFilterInfo = function() {
        this.LayerMap = {};
        for (var t = 0; t < this.GamePictrue.length; t++) {
            var e = this.GamePictrue[t];
            if (!(e instanceof CFilterLayer) && e) {
                this.LayerMap[t] = []
            }
        }
    }
    ;
    this.setFilterInfo = function(t, e) {
        if (t.length <= 0 || e < 0) {
            return
        }
        for (var i in this.LayerMap) {
            if (Object.hasOwnProperty.call(this.LayerMap, i)) {
                var a = this.LayerMap[i];
                a[e] = null
            }
        }
        for (var s = 0; s < t.length; s++) {
            var i = t[s];
            if (this.LayerMap.hasOwnProperty(i)) {
                var a = this.LayerMap[i];
                a[e] = true
            }
        }
    }
    ;
    this.setFilterMap = function() {
        for (var t = 0; t < this.GamePictrue.length; t++) {
            var e = this.GamePictrue[t];
            if (e && !isFilterLayer(e)) {
                this.LayerMap[t] = [null]
            } else if (!e && !isFilterLayer(e)) {
                delete this.LayerMap[t]
            }
        }
        for (var i in this.LayerMap) {
            if (Object.hasOwnProperty.call(this.LayerMap, i)) {
                var a = this.LayerMap[i]
            }
        }
    }
    ;
    this.diffFilterMap = function() {}
    ;
    this.resetFilterInfo = function() {
        for (var t = 0; t < this.GamePictrue.length; t++) {
            var e = this.GamePictrue[t];
            if (!(e instanceof CFilterLayer) && e && !this.LayerMap[t]) {
                this.LayerMap[t] = [null]
            } else if (!(e instanceof CFilterLayer) && !e && this.LayerMap[t]) {
                delete this.LayerMap[t]
            }
        }
        for (var i in this.LayerMap) {
            if (Object.hasOwnProperty.call(this.LayerMap, i)) {
                var e = this.LayerMap[i];
                if (this.GameFilter.length <= 0) {
                    this.LayerMap[i] = [null]
                } else {
                    e.splice(this.GameFilter.length - 1, e.length - 1);
                    for (var t = 0; t < this.GameFilter.length; t++) {
                        var a = this.GameFilter[t];
                        if (a.effectiveLayer.indexOf(i) > -1) {
                            e[t] = true
                        } else {
                            e[t] = null
                        }
                    }
                }
            }
        }
    }
    ;
    this.renderFilter = function() {
        var t = [];
        var e = [];
        for (var i in this.LayerMap) {
            if (Object.hasOwnProperty.call(this.LayerMap, i)) {
                var a = this.LayerMap[i];
                var s = true;
                var c = true;
                var n = [];
                for (var r = 0; r < a.length; r++) {
                    var u = a[r];
                    if (!u) {
                        s = false
                    } else {
                        n.push(r);
                        c = false
                    }
                }
                if (s) {
                    e.push(i)
                }
                if (!s && e.length > 0) {
                    t.push(this.mergeLayer(e, 0));
                    e = []
                }
                if (!s && n.length > 0) {
                    var o = this.GamePictrue[i];
                    if (o instanceof CFilterLayer) {
                        continue
                    }
                    var h = o.parent ? o.parent : o.element.parent;
                    if (h) {
                        h instanceof OContainer || h instanceof OShowContainer ? SAL_removeElement(h.element, o.element) : SAL_removeElement(h, o.element)
                    }
                    t.push(this.addLayer(o, n, i))
                }
                if (c) {
                    t.push(this.GamePictrue[i])
                }
            }
        }
        if (e.length > 0) {
            t.push(this.mergeLayer(e, 0));
            e = []
        }
        for (var r = 0; r < t.length; r++) {
            var a = t[r];
            if (!a) {
                continue
            }
            if (a.FboFilter) {
                this.viewport.setChildIndex(a.FboFilter, parseInt(a.viewportIndex))
            } else {
                SAL_addElement(this.viewport.element, a.element)
            }
        }
        for (var l = 0; l < this.GameFilter.length; l++) {
            var f = this.GameFilter[l];
            f.render()
        }
    }
    ;
    this.addLayer = function(t, e, i) {
        if (!t || e.length <= 0) {
            return
        }
        var a = null;
        for (var s = 0; s < e.length; s++) {
            var n = e[s];
            var r = this.GameFilter[n];
            var o = r.getFreeFilter();
            if (!a) {
                o.FboFilter.addChild(t)
            } else {
                o.FboFilter.addChild(a.FboFilter)
            }
            a = o
        }
        a.viewportIndex = i;
        return a
    }
    ;
    this.mergeLayer = function(t, e) {
        if (t.length <= 0) {
            return
        }
        if (this.GameFilter.length <= 0) {
            return
        }
        var i = null;
        var a = this.GameFilter[e];
        var s = a.getFreeFilter();
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            var o = this.GamePictrue[r];
            if (o) {
                s.FboFilter.addChild(o);
                SAL_removeElement(this.viewport.element, o.element);
                i = s
            }
        }
        for (var h = 1; h < this.GameFilter.length; h++) {
            if (!i) {
                break
            }
            var c = this.GameFilter[h];
            var l = c.getFreeFilter();
            l.FboFilter.addChild(i.FboFilter);
            i = l
        }
        if (i) {
            i.viewportIndex = t[t.length - 1]
        }
        return i
    }
    ;
    this.getConsecutiveSubarrays = function(t) {
        var e = t.length;
        var i = [];
        var a = [];
        for (var s = 0; s < e; s++) {
            a.push(t[s]);
            if (t[s + 1] - t[s] != 1) {
                i.push(a);
                a = []
            }
        }
        return i
    }
    ;
    this.chearAllLayer = function() {
        for (var t = 0; t < this.GamePictrue.length; t++) {
            if (this.GamePictrue[t] && this.GamePictrue[t].element) {
                SAL_removeElement(this.viewport.element, this.GamePictrue[t].element)
            }
        }
        for (var e = 0; e < this.filterArray.length; e++) {
            var i = this.filterArray[e].FboFilter;
            SAL_removeElement(this.viewport.element, i.element)
        }
    }
    ;
    this.returnLayer = function() {
        for (var t = 0; t < this.GamePictrue.length; t++) {
            if (this.GamePictrue[t] && this.GamePictrue[t].element) {
                SAL_setElementIndex(this.viewport.element, this.GamePictrue[t].element, t)
            }
        }
    }
    ;
    this.clearFbo = function() {
        for (var t = 0; t < this.filterArray.length; t++) {
            var e = this.filterArray[t].FboFilter;
            SAL_destroyElement(e.element)
        }
        this.filterArray = [];
        this.GameFilter = [];
        this.LayerMap = {}
    }
    ;
    this.savePicFilter = function() {
        var t = {};
        for (var e = 0; e < this.MAX_LAYER; e++) {
            var i = this.GamePictrue[e];
            if (i && i.url && i.url.toLowerCase().indexOf(".oaf2") == -1) {
                t[e] = i.materialData
            }
        }
        return t
    }
    ;
    this.loadPicFilter = function(t) {
        if (!t || !t.picFilterInfo) {
            return
        }
        for (var e in t.picFilterInfo) {
            if (Object.hasOwnProperty.call(t.picFilterInfo, e)) {
                var i = t.picFilterInfo[e];
                var a = this.GamePictrue[e];
                if (a && a.url && a.url.toLowerCase().indexOf(".oaf2") == -1) {
                    a.setMask("", i)
                }
            }
        }
    }
    ;
    this.saveFilter = function() {
        var t = {};
        for (var e = 0; e < this.GameFilter.length; e++) {
            var i = this.GameFilter[e];
            if (i) {
                t[e] = {
                    index: i.index,
                    maskImg: i.maskImg,
                    maskPath: i.maskPath,
                    materialData: i.materialData,
                    effectiveLayer: i.effectiveLayer
                }
            }
        }
        return t
    }
    ;
    this.loadFilter = function(t) {
        if (!t || !t.filterInfo || Object.keys(t.filterInfo).length <= 0) {
            return
        }
        this.filterArray = [];
        this.GameFilter = [];
        this.LayerMap = {};
        var e = void 0;
        var i = t.filterInfo;
        for (var a in i) {
            if (Object.hasOwnProperty.call(i, a)) {
                var s = i[a];
                e = new CFilterLayer;
                e.index = s.index;
                e.effectiveLayer = s.effectiveLayer;
                e.materialData = s.materialData;
                e.maskImg = s.maskImg;
                e.maskPath = s.maskPath;
                this.GamePictrue[s.index] = e;
                this.GameFilter.push(e)
            }
        }
        this.initFilterInfo();
        this.resetFilterInfo();
        this.chearAllLayer();
        this.renderFilter()
    }
    ;
    this.createMenu()
}

function PhoneMenuContainer() {
    OContainer.call(this);
    this.openMenu = null;
    this.closeMenu = null;
    this.menu = null;
    this.cgMenu = null;
    this.collectMenu = null;
    this.flowerSendMenu = null;
    this.shareMenu = null;
    this.evaluateMenu = null;
    this.lineSpeed = 0;
    this.scale = 1;
    this.setSize(gGameX, gGameHeight);
    this.init = function() {
        var t = this;
        this.lineSpeed = 80 * gGameWidth / 960;
        this.openMenu = new OBitmap(sysmenuOpenMenu);
        this.openMenu.setVisible(false);
        this.addChild(this.openMenu);
        this.closeMenu = new OBitmap(sysmenuCloseMenu);
        this.addChild(this.closeMenu);
        this.openMenu.addEvent("click", function() {
            t.setMenuVisible(true)
        });
        this.closeMenu.addEvent("click", function() {
            t.setMenuVisible(false)
        });
        this.menu = new ONButton(mobileMenuPath,mobileMenuPathFocus);
        this.addChild(this.menu);
        this.cgMenu = new ONButton(mobileLogoPath,mobileLogoPathFocus);
        this.addChild(this.cgMenu);
        this.collectMenu = new ONButton(mobileCollectPath,mobileCollectPathFocus);
        this.addChild(this.collectMenu);
        this.collectMenu.addClick(this.clickCollect, null, this);
        this.shareMenu = new ONButton(mobileSharePath,mobileSharePathFocus);
        this.addChild(this.shareMenu);
        this.shareMenu.addClick(this.clickShare, null, this);
        this.evaluateMenu = new ONButton(mobileEvaluatePath,mobileEvaluatePathFocus);
        this.addChild(this.evaluateMenu);
        this.evaluateMenu.addClick(this.clickEvaluate, null, this);
        this.evaluateMenu.setVisible(showScore && clientType != 1);
        var e = 30 * gGameWidth / 960;
        var i = 60 * gGameWidth / 960;
        if (clientType == 5) {
            i = 70 * gGameWidth / 960
        }
        if (gGameWidth == 1280) {
            this.scale = 1280 / 1920;
            this.openMenu.setScale(this.scale, this.scale);
            this.closeMenu.setScale(this.scale, this.scale);
            this.menu.setScale(this.scale, this.scale);
            this.cgMenu.setScale(this.scale, this.scale);
            this.collectMenu.setScale(this.scale, this.scale);
            this.shareMenu.setScale(this.scale, this.scale);
            this.evaluateMenu.setScale(this.scale, this.scale)
        }
        this.openMenu.setPosition(gGameX - 24 - this.openMenu.width * this.scale >> 1, e);
        this.closeMenu.setPosition(gGameX - 24 - this.openMenu.width * this.scale >> 1, e);
        this.menu.setPosition(gGameX - 24 - this.menu.width * this.scale >> 1, this.openMenu.y + i);
        this.cgMenu.setPosition(gGameX - 24 - this.cgMenu.width * this.scale >> 1, this.menu.y + this.lineSpeed);
        this.collectMenu.setPosition(gGameX - 24 - this.collectMenu.width * this.scale >> 1, this.cgMenu.y + this.lineSpeed);
        this.shareMenu.setPosition(gGameX - 24 - this.shareMenu.width * this.scale >> 1, this.collectMenu.y + this.lineSpeed);
        this.evaluateMenu.setPosition(gGameX - 24 - this.evaluateMenu.width * this.scale >> 1, this.shareMenu.y + this.lineSpeed);
        if (clientType == 1) {
            this.collectMenu.setPosition(gGameX - 24 - this.collectMenu.width * this.scale >> 1, this.menu.y + this.lineSpeed);
            this.shareMenu.setPosition(gGameX - 24 - this.shareMenu.width * this.scale >> 1, this.collectMenu.y + this.lineSpeed);
            this.cgMenu.setPosition(gGameX - 24 - this.cgMenu.width * this.scale >> 1, this.shareMenu.y + this.lineSpeed)
        }
        if (clientType == 3) {
            this.cgMenu.setVisible(false);
            this.collectMenu.setVisible(false);
            this.shareMenu.setVisible(false)
        }
        if (clientType == 5) {
            this.collectMenu.setPosition(gGameX - 24 - this.collectMenu.width * this.scale >> 1, this.menu.y + this.lineSpeed);
            this.cgMenu.setPosition(gGameX - 24 - this.cgMenu.width * this.scale >> 1, this.collectMenu.y + this.lineSpeed);
            this.shareMenu.setVisible(false)
        }
        this.setCollectStaue(GloableData.getInstance().gameInfo.isCollected)
    }
    ;
    this.setMenuVisible = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.openMenu.setVisible(!t);
        this.closeMenu.setVisible(t);
        this.menu.setVisible(t);
        this.cgMenu.setVisible(t);
        this.collectMenu.setVisible(t);
        this.shareMenu.setVisible(t);
        if (showScore && clientType != 1) {
            this.evaluateMenu.setVisible(t)
        }
        if (clientType == 5) {
            this.shareMenu.setVisible(false);
            this.evaluateMenu.setVisible(false)
        }
    }
    ;
    this.clickEvaluate = function() {
        sendMsgToClient(JSON.stringify({
            type: 2,
            status: 1,
            msg: "",
            data: null
        }), null)
    }
    ;
    this.clickShare = function() {
        if (GloableData.getInstance().isLoginStatus()) {
            SAL_share("", "", function() {
                GloableData.getInstance().getFlowerByMe()
            })
        } else {// hintMessage.setHint("请登录", "#000000")
        }
    }
    ;
    this.clickCollect = function() {
        var i = this;
        SAL_collect("", function(t, e) {
            i.setCollectStaue(e.isCollected)
        })
    }
    ;
    this.setCollectStaue = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        if (!t) {
            this.collectMenu.setInfo(mobileCollectPath, mobileCollectPathFocus)
        } else {
            this.collectMenu.setInfo(mobileCollectPathFocus, mobileCollectPathFocus)
        }
    }
    ;
    this.updateCgMenu = function() {
        var t = mobileLogoPath;
        if (GloableData.getInstance().isFreeLimitStatus) {
            t = mobileLogoPathLimit
        }
        this.cgMenu && this.cgMenu.setInfo(t, mobileLogoPathFocus)
    }
}

function DHeader(t) {
    this.ver = t.readInt32();
    this.GWidth = t.readInt32();
    this.GHeight = t.readInt32();
    this.MaxPicWidth = t.readInt32();
    this.MaxPicHeight = t.readInt32();
    this.guid = t.readString();
    this.title = t.readString();
    this.pver = t.readInt32();
    t.readInt32();
    t.readInt32();
    tv.DataVer = this.ver;
    gGameHeight = this.GHeight;
    gGameWidth = this.GWidth;
    if (localProjectPath && localProjectPath.length > 0) {
        guid = this.guid;
        ver = this.pver;
        refreshGameInfo()
    }
}

function DSystem(t) {
    t.readInt32();
    this.FontName = t.readString();
    this.realFontSize = t.readInt32();
    this.FontSize = this.realFontSize * .85;
    this.FontSize = parseInt(this.FontSize);
    if (systemFont && textScale) {
        this.FontSize = parseInt(this.FontSize * textScale)
    }
    this.FontTalkColor = new OColorVal(t.readString());
    this.FontUiColor = new OColorVal(t.readString());
    var e = 0;
    this.effectStyle = 0;
    this.effectColor = null;
    if (tv.DataVer >= 101) {
        e = t.readInt32();
        if (e == 1) {
            this.effectStyle = 2;
            this.effectColor = new OColorVal(0,0,0,255)
        } else if (e == 2) {
            this.effectStyle = 2;
            this.effectColor = new OColorVal(125,125,125,255)
        } else if (e == 3) {
            this.effectStyle = 2;
            this.effectColor = new OColorVal(255,255,255,255)
        } else if (e == 4) {
            this.effectStyle = 1;
            this.effectColor = new OColorVal(0,0,0,255)
        } else if (e == 5) {
            this.effectStyle = 1;
            this.effectColor = new OColorVal(125,125,125,255)
        } else if (e == 6) {
            this.effectStyle = 1;
            this.effectColor = new OColorVal(255,255,255,255)
        }
    }
    this.SkipTitle = t.readInt32() != 0;
    this.StartStoryId = t.readInt32();
    t.readInt32();
    this.IconName = new DFileName(t);
    this.ShowAD = t.readInt32() != 0;
    this.AuthorWords = t.readString();
    this.AuthorWordsTiming = t.readInt32();
    this.AutoRun = t.readInt32() != 0;
    this.ShowSystemMenu = t.readInt32() != 0;
    this.ShowADMenu = true;
    this.SEClick = new DMusicItem(t);
    this.SEMove = new DMusicItem(t);
    this.SECancel = new DMusicItem(t);
    this.SEError = new DMusicItem(t);
    this.Title = new DTitle(t);
    this.GameMenu = new DGameMenu(t);
    this.CG = new DCG(t);
    this.BGM = new DBGM(t);
    this.SaveData = new DSaveData(t);
    this.MessageBox = new DMessageBox(t);
    this.Replay = new DReplay(t);
    this.Setting = new DSetting(t);
    var i = t.readInt32();
    this.Buttons = new Array(i);
    for (var a = 0; a < i; a++) {
        this.Buttons[a] = new DButton(t)
    }
    this.UIInitSave = t.readInt32() != 0;
    this.Cuis = null;
    this.MenuIndex = 0;
    if (tv.DataVer >= 103) {
        var s = t.readInt32();
        this.Cuis = new Array(s);
        for (var a = 0; a < s; a++) {
            this.Cuis[a] = new DCustomUIData(t)
        }
        this.MenuIndex = t.readInt32()
    }
}

function DFileName(t) {
    t.readInt32();
    this.From = t.readInt32();
    this.name = t.readString();
    this.toString = function() {
        return this.name
    }
    ;
    this.IsNil = function() {
        return this.name.length <= 0
    }
}

function DMusicItem(t) {
    t.readInt32();
    this.FileName = new DFileName(t);
    this.Volume = t.readInt32()
}

function DViewport(t) {
    t.readInt32();
    this.x = t.readInt32();
    this.y = t.readInt32();
    this.width = t.readInt32();
    this.height = t.readInt32()
}

function DButton(t) {
    t.readInt32();
    this.name = t.readString();
    this.image1 = new DFileName(t);
    this.image2 = new DFileName(t);
    this.x = t.readInt32();
    this.y = t.readInt32()
}

function DButtonIndex(t) {
    this.index = 0;
    this.x = 0;
    this.y = 0;
    if (t instanceof OByteReader) {
        t.readInt32();
        this.index = t.readInt32();
        this.x = t.readInt32();
        this.y = t.readInt32()
    } else {
        this.index = parseInt(t[0]);
        this.x = parseInt(t[1]);
        this.y = parseInt(t[2])
    }
}

function DFloatButtonData(t) {
    var e = 0;
    e = t.readInt32();
    this.event = new Array(e);
    for (var i = 0; i < e; i++) {
        t.readInt32();
        this.event[i] = new DEvent(t)
    }
    this.x = t.readInt32();
    this.y = t.readInt32();
    this.name = t.readString();
    e = t.readInt32();
    this.DFloatItem = new Array(e);
    for (var i = 0; i < e; i++) {
        this.DFloatItem[i] = new DFloatButtonElementData(t)
    }
}

function DFloatButtonElementData(t) {
    this.type = t.readInt32();
    this.x = t.readInt32();
    this.y = t.readInt32();
    this.image = t.readString();
    this.isUserString = t.readInt32() != 0;
    this.indexOfStr = t.readInt32();
    this.stringIndex = t.readInt32();
    this.varIndex = t.readInt32();
    if (this.type == 3 || this.type == 4) {
        this.color = new OColorVal(255,255,255);
        this.imageForBar = t.readString()
    } else {
        this.color = new OColorVal(t.readString());
        this.imageForBar = null
    }
}

function DGameMenu(t) {
    t.readInt32();
    this.backImage = new DFileName(t);
    var e = t.readInt32();
    this.buttons = new Array(e);
    for (var i = 0; i < e; i++) {
        this.buttons[i] = new DButtonIndex(t)
    }
}

function DCG(t) {
    t.readInt32();
    this.backimage = new DFileName(t);
    this.column = t.readInt32();
    this.spanRow = t.readInt32();
    this.spanCol = t.readInt32();
    this.showMessage = t.readInt32() != 0;
    this.megX = t.readInt32();
    this.megY = t.readInt32();
    this.zoom = t.readInt32();
    this.cgx = t.readInt32();
    this.cgy = t.readInt32();
    this.nopic = new DFileName(t);
    var e = t.readInt32();
    this.cglist = new Array(e);
    for (var i = 0; i < e; i++) {
        this.cglist[i] = new DCGItem(t)
    }
    this.viewport = new DViewport(t);
    this.backButton = new DButtonIndex(t);
    this.closeButton = new DButtonIndex(t)
}

function DCGItem(t) {
    t.readInt32();
    this.name = t.readString();
    this.cgpath = new DFileName(t);
    this.message = t.readString()
}

function DBGM(t) {
    t.readInt32();
    this.backimage = new DFileName(t);
    this.column = t.readInt32();
    this.spanRow = t.readInt32();
    this.spanCol = t.readInt32();
    this.showPic = t.readInt32() != 0;
    this.showMsg = t.readInt32() != 0;
    this.px = t.readInt32();
    this.py = t.readInt32();
    this.mx = t.readInt32();
    this.my = t.readInt32();
    this.nx = t.readInt32();
    this.ny = t.readInt32();
    this.noName = t.readString();
    this.noPic = new DFileName(t);
    var e = t.readInt32();
    this.bgmList = new Array(e);
    for (var i = 0; i < e; i++) {
        this.bgmList[i] = new DBGMItem(t)
    }
    this.viewport = new DViewport(t);
    this.selectButton = new DButtonIndex(t);
    this.closeButton = new DButtonIndex(t)
}

function DBGMItem(t) {
    t.readInt32();
    this.name = t.readString();
    this.bgmPath = new DFileName(t);
    this.picPath = new DFileName(t);
    this.message = t.readString()
}

function DSaveData(t) {
    t.readInt32();
    this.showMapName = t.readInt32() != 0;
    this.showDate = t.readInt32() != 0;
    this.backimage = new DFileName(t);
    this.max = t.readInt32();
    this.column = t.readInt32();
    this.spanRow = t.readInt32();
    this.spanCol = t.readInt32();
    this.showMinPic = t.readInt32() != 0;
    this.nameX = t.readInt32();
    this.nameY = t.readInt32();
    this.dateX = t.readInt32();
    this.dateY = t.readInt32();
    this.picX = t.readInt32();
    this.picY = t.readInt32();
    this.zoom = t.readInt32();
    this.viewport = new DViewport(t);
    this.backButton = new DButtonIndex(t);
    this.closeButton = new DButtonIndex(t);
    if (tv.DataVer >= 106) {
        this.turnPageSwitch = t.readInt32();
        this.previousPageBtn = new DButtonIndex(t);
        this.nextPageBtn = new DButtonIndex(t);
        this.pageNumberTextPos = new DPoint(t);
        this.fontName = t.readString();
        this.fontSize = t.readInt32()
    }
}

function DMessageBox(t) {
    t.readInt32();
    this.FaceStyle = t.readInt32();
    this.ChoiceButtonIndex = t.readInt32();
    this.Talk = new TalkWin(t);
    this.Name = new NameWin(t);
    this.faceInMessageBox = function() {
        return this.FaceStyle == 1
    }
}

function TalkWin(t) {
    t.readInt32();
    this.backX = t.readInt32();
    this.backY = t.readInt32();
    this.backimage = new DFileName(t);
    this.FaceBorderImage = new DFileName(t);
    this.FaceBorderX = t.readInt32();
    this.FaceBorderY = t.readInt32();
    this.textX = t.readInt32();
    this.talkWidth = t.readInt32();
    this.textY = t.readInt32();
    t.readInt32();
    var e = t.readInt32();
    this.buttons = new Array(e);
    for (var i = 0; i < e; i++) {
        this.buttons[i] = new DButtonIndex(t)
    }
}

function NameWin(t) {
    t.readInt32();
    this.backX = t.readInt32();
    this.backY = t.readInt32();
    this.backimage = new DFileName(t);
    this.isCenter = t.readInt32() != 0;
    this.textX = t.readInt32();
    this.textY = t.readInt32()
}

function DReplay(t) {
    t.readInt32();
    this.backimage = new DFileName(t);
    this.closeButton = new DButtonIndex(t);
    this.viewport = new DViewport(t)
}

function DSetting(t) {
    t.readInt32();
    this.backimage = new DFileName(t);
    this.barNone = new DFileName(t);
    this.barMove = new DFileName(t);
    this.BgmX = t.readInt32();
    this.BgmY = t.readInt32();
    this.SeX = t.readInt32();
    this.SeY = t.readInt32();
    this.VoiceX = t.readInt32();
    this.VoiceY = t.readInt32();
    this.ShowFull = t.readInt32() != 0;
    this.SHowAuto = t.readInt32() != 0;
    this.ShowBGM = t.readInt32() != 0;
    this.ShowSE = t.readInt32() != 0;
    this.ShowVoice = t.readInt32() != 0;
    this.ShowTitle = t.readInt32() != 0;
    this.closeButton = new DButtonIndex(t);
    this.fullButton = new DButtonIndex(t);
    this.winButton = new DButtonIndex(t);
    this.AutoOn = new DButtonIndex(t);
    this.AutoOff = new DButtonIndex(t);
    this.TitleButton = new DButtonIndex(t);
    if (tv.DataVer >= 108) {
        this.BgmV = t.readInt32();
        this.SeV = t.readInt32();
        this.VoiceV = t.readInt32()
    }
}

function DCustomUIData(t) {
    var e = t.readInt32();
    this.isLoaded = false;
    this.data = t.read(e);
    this.loadEventData = function() {
        var t = new OByteReader(this.data);
        var e = t.readInt32();
        this.loadEvent = new Array(e);
        for (var i = 0; i < e; i++) {
            t.readInt32();
            this.loadEvent[i] = new DEvent(t)
        }
        e = t.readInt32();
        this.afterEvent = new Array(e);
        for (var i = 0; i < e; i++) {
            t.readInt32();
            this.afterEvent[i] = new DEvent(t)
        }
        e = t.readInt32();
        this.controls = new Array(e);
        for (var i = 0; i < e; i++) {
            this.controls[i] = new DCustomUIItem(t)
        }
        this.showEffect = t.readInt32();
        this.isMouseExit = t.readInt32() != 0;
        this.isKeyExit = t.readInt32() != 0;
        this.isLoaded = true;
        this.data = null;
        t = null
    }
}

function DCustomUIItem(t) {
    t.readInt32();
    var e = t.readInt32();
    this.event = new Array(e);
    for (var i = 0; i < e; i++) {
        t.readInt32();
        this.event[i] = new DEvent(t)
    }
    this.type = t.readInt32();
    this.isUserString = t.readInt32() != 0;
    this.image1 = t.readString();
    this.image2 = t.readString();
    this.stringIndex = t.readInt32();
    this.isUserVar = t.readInt32() != 0;
    this.x = t.readInt32();
    this.y = t.readInt32();
    this.isUserIndex = t.readInt32() != 0;
    this.index = t.readInt32();
    this.maxIndex = t.readInt32();
    this.color = new OColorVal(t.readString())
}

function DCharacter(t) {
    this.chatCharacters = new Array;
    if (tv.DataVer >= 105) {
        var e = t.readInt32();
        for (var i = 0; i < e; i++) {
            this.chatCharacters.push(new DChatCharacter(t))
        }
        e = t.readInt32();
        for (var a = 0; a < e; a++) {
            var s = t.readString();
            var n = t.readInt32();
            var r = t.readInt32()
        }
    }
    this.GetChatCharacterByID = function(t) {
        for (var e = 0; e < this.chatCharacters.length; e++) {
            if (this.chatCharacters[e].ID == t) {
                return this.chatCharacters[e]
            }
        }
    }
}

function DChatCharacter(t) {
    t.readInt32();
    this.ID = t.readInt32();
    this.name = t.readString();
    this.facePath = t.readString();
    this.layoutType = t.readInt32();
    this.faceWidth = t.readInt32();
    this.faceHeight = t.readInt32();
    this.bgPath = t.readString();
    this.sendActionType = t.readInt32();
    this.cgPath = t.readString();
    this.uiIndex = t.readString();
    this.bgTopH = t.readInt32();
    this.bgBottomH = t.readInt32();
    this.bgLeftW = t.readInt32();
    this.bgRightW = t.readInt32();
    this.msgAreaTopH = t.readInt32();
    this.msgAreaBottomH = t.readInt32();
    this.msgAreaLeftW = t.readInt32();
    this.msgAreaRightW = t.readInt32();
    this.bubbleOffY = t.readInt32();
    this.spaceFaceAndName = t.readInt32();
    this.spaceFaceAndMsg = t.readInt32();
    this.msgFontPath = t.readString();
    this.msgFontSize = t.readInt32();
    this.spaceNameAndMsg = t.readInt32();
    this.lineSpace = t.readInt32();
    this.nameFontSize = t.readInt32();
    this.voiceHeight = t.readInt32();
    this.a = t.readString();
    this.b = t.readString()
}

function DTitle(t) {
    t.readInt32();
    this.showLog = t.readInt32() != 0;
    this.logoImage = new DFileName(t);
    this.titleImagle = new DFileName(t);
    this.drawTitle = t.readInt32() != 0;
    this.bgm = new DMusicItem(t);
    var e = t.readInt32();
    this.buttons = new Array(e);
    for (var i = 0; i < e; i++) {
        this.buttons[i] = new DButtonIndex(t)
    }
}

function DStory(t) {
    this.Name = t.readString();
    this.ID = t.readInt32();
    var e = t.readInt32();
    this.events = new Array(e);
    for (var i = 0; i < e; i++) {
        t.readInt32();
        this.events[i] = new DEvent(t)
    }
}

function DEvent(t) {
    this.Code = t.readInt32();
    this.Indent = t.readInt32();
    var e = t.readInt32();
    this.Argv = new Array(e);
    for (var i = 0; i < e; i++) {
        this.Argv[i] = t.readString();
        if (this.Code != 100 && this.Code != 215 && this.Code != 107) {
            this.Argv[i] = this.Argv[i].replace("\\", "/")
        }
    }
}

function DEvent1(t, e, i, a) {
    this.Code = t;
    this.Indent = e;
    var i = i;
    this.Argv = a
}

function DGameSystem() {
    this.autoRun = false;
    this.quickRun = false;
    this.vars = new DGameVariables;
    this.varsEx = new DGameVariables;
    this.varsEx.varType = 1;
    this.varsEx.loadExData();
    this.string = new DGameString;
    this.recorder = false;
    this.replay = new saveReplay;
    this.other = new saveOther;
    this.rwFile = new saveFile;
    this.clear = function() {
        this.vars.clearData();
        this.string.clearData()
    }
}

function DGameVariables() {
    this.data = new Array;
    this.ExReset = "";
    this.varType = 0;
    for (var t = 0; t < this.data.length; ++t) {
        this.data[t] = null
    }
    var c = function t(e, i) {
        var a = "";
        for (var s = 0; s < e.length; s++) {
            a += String.fromCharCode(e.charCodeAt(s) ^ i.charCodeAt(s % i.length))
        }
        return a
    };
    this.getVar = function(t) {
        if (isNaN(t) || t < 0 || t >= 9999) {
            return 0
        }
        if (!this.data[t]) {
            this.data[t] = 0
        }
        return this.data[t]
    }
    ;
    this.setVar = function(t, e) {
        if (isNaN(t) || t < 0 || t >= 9999) {
            return
        }
        this.data[t] = parseInt(e)
    }
    ;
    this.saveData = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var a = 0;
        var s = 0;
        for (var n = 0; n < this.data.length; n++) {
            if (!this.data[n]) {
                continue
            }
            t.push(n + "|", this.data[n] + "|");
            if (e && i) {
                var r = c(this.data[n] + "", i + n);
                e.push(n + "|", r + "|")
            }
            a += 1
        }
        t.unshift(a + "|");
        if (e) {
            e.unshift(a + "|")
        }
    }
    ;
    this.verifyData = function(t, e, i) {
        var a = t.split("|");
        var s = e.split("|");
        s.shift();
        var n = parseInt(a.shift());
        for (var r = 0; r < n; ++r) {
            var o = parseInt(a.shift());
            s.shift();
            var h = a.shift();
            var l = s.shift();
            if (c(h, i + o) != l) {
                return 0
            }
        }
        return 1
    }
    ;
    this.loadData = function(t) {
        var e = parseInt(t.shift());
        for (var i = 0; i < this.data.length; ++i) {
            this.data[i] = null
        }
        for (var i = 0; i < e; ++i) {
            var a = parseInt(t.shift());
            this.data[a] = parseInt(t.shift())
        }
        isLoadExData = true
    }
    ;
    this.tEx = 0;
    this.saveExData = function(t) {
        var s = this;
        var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (this.varType != 1)
            return;
        SAL_clearTimeout(this.tEx);
        this.tEx = SAL_setTimeout(function() {
            var t = "";
            var e = GloableData.getInstance().savekey + "varsEx";
            if (!Configuration.isH5) {
                e = gIndex + "varsEx" + 0
            }
            if (s.ExReset) {
                t = s.ExReset;
                s.ExReset = ""
            } else {
                var i = new Array;
                tv.system.varsEx.saveData(i);
                for (var a = 0; a < i.length; ++a) {
                    t += i[a]
                }
            }
            t = "varsEx=" + t + "#time=" + Math.ceil(Date.now() / 1e3) + "#limit=1#new=true#platform=" + GloableData.getInstance().userData.platform;
            if (Configuration.isH5) {
                if (!n) {
                    if (!GloableData.getInstance().getIsUnLock() && GloableData.getInstance().userData.tempFlower > 0) {
                        s.isUpVarsExData = true;
                        cloudProxy.upSaveExData("limitfree", t, function() {
                            s.isUpVarsExData = false
                        });
                        return
                    }
                    if (GloableData.getInstance().userData.isLogin) {
                        s.isUpVarsExData = true;
                        cloudProxy.upSaveExData("normal", t, function() {
                            s.isUpVarsExData = false
                        })
                    }
                }
            }
            SALlocalStorage.setItem(e, t)
        }, 160)
    }
    ;
    this.tempStrEx = "";
    this.loadExData = function() {
        var e = this;
        var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var a = arguments[1];
        isLoadExData = true;
        var t = GloableData.getInstance().savekey + "varsEx";
        if (!Configuration.isH5) {
            t = gIndex + "varsEx" + 0
        }
        var s = "";
        SALlocalStorage.getItem(t, function(t) {
            s = t;
            if (localProjectPath) {
                e.restoreExData(s);
                return
            }
            if (Configuration.isH5) {
                if (!GloableData.getInstance().getIsUnLock() && GloableData.getInstance().userData.tempFlower > 0) {
                    cloudProxy.downSaveExData("limitfree", function(t) {
                        if (t.status == 1) {
                            e.loadExDataComplete(t);
                            a && a()
                        }
                    });
                    return
                }
                if (i) {
                    e.tempStrEx = s;
                    cloudProxy.downSaveExData("normal", function(t) {
                        if (t.status == 1) {
                            e.loadExDataComplete(t);
                            a && a()
                        }
                    });
                    return
                }
            }
            e.restoreExData(s)
        })
    }
    ;
    this.loadExDataComplete = function(t) {
        if (parseInt(t.status) == 1 && t.data != "") {
            if (this.tempStrEx) {
                this.restoreExData(this.tempStrEx, t.data);
                return
            }
            this.restoreExData(t.data)
        }
        isLoadExData = true
    }
    ;
    this.restoreExData = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (t == null || t.indexOf("varsEx=") < 0) {
            t = ""
        }
        if (e == null || e.indexOf("varsEx=") < 0) {
            e = ""
        }
        isLoadExData = true;
        var i = this.getExTimePlat(t);
        var a = this.getExTimePlat(e);
        if (i.length > 0 && a.length > 0) {
            if (i[1] && a[1]) {
                if (i[1] > a[1]) {
                    this.loadData(i[0].split("|"))
                } else {
                    this.loadData(a[0].split("|"))
                }
                return
            }
            if (i[1]) {
                this.loadData(i[0].split("|"));
                return
            }
            if (a[1]) {
                this.loadData(a[0].split("|"));
                return
            }
        }
        if (i.length > 0) {
            this.loadData(i[0].split("|"));
            return
        }
        if (a.length > 0) {
            this.loadData(a[0].split("|"))
        }
    }
    ;
    this.getExTimePlat = function(t) {
        var e = new Array;
        if (t) {
            if (t.indexOf("#") > -1) {
                var i = t.split("#");
                if (i[0].indexOf("varsEx") > -1) {
                    e[0] = i[0].split("=")[1]
                }
                if (i[1].indexOf("time") > -1) {
                    e[1] = i[1].split("=")[1]
                }
                if (i[2].indexOf("limit") > -1) {
                    e[2] = i[2].split("=")[1]
                }
                if (i[3].indexOf("new") > -1) {
                    e[3] = i[3].split("=")[1]
                }
                if (i[4] && i[4].indexOf("platform") > -1) {
                    e[4] = i[4].split("=")[1]
                }
            }
        }
        return e
    }
    ;
    this.clearData = function() {
        for (var t = 0; t < this.data.length; ++t) {
            this.data[t] = null
        }
    }
}

function DGameString() {
    this.data = new Array(9999);
    for (var t = 0; t < this.data.length; ++t) {
        this.data[t] = null
    }
    this.getVar = function(t) {
        if (isNaN(t) || t < 0 || t >= 9999) {
            return ""
        }
        if (this.data[t] == null) {
            this.data[t] = ""
        }
        return this.data[t]
    }
    ;
    this.setVar = function(t, e) {
        if (isNaN(t) || t < 0 || t >= 9999) {
            return
        }
        this.data[t] = e.toString()
    }
    ;
    this.saveData = function(t) {
        var e = 0;
        for (var i = 0; i < this.data.length; i++) {
            if (this.data[i] == null) {
                continue
            }
            t.push(i + "|", this.data[i] + "|");
            e += 1
        }
        t.unshift(e + "|")
    }
    ;
    this.loadData = function(t) {
        var e = parseInt(t.shift());
        this.clearData();
        for (var i = 0; i < e; ++i) {
            var a = parseInt(t.shift());
            this.data[a] = t.shift()
        }
    }
    ;
    this.saveNewData = function() {
        var t = {};
        for (var e = 0; e < this.data.length; e++) {
            if (!this.data[e]) {
                continue
            }
            t["" + e] = encodeURIComponent(this.data[e])
        }
        return t
    }
    ;
    this.loadNewData = function(e) {
        this.clearData();
        for (var i in e) {
            try {
                this.data[i + ""] = decodeURIComponent(e[i + ""])
            } catch (t) {
                SAL_log("load string " + i + " fail: " + e[i + ""])
            }
        }
    }
    ;
    this.clearData = function() {
        for (var t = 0; t < this.data.length; ++t) {
            this.data[t] = null
        }
    }
}

function saveFile() {
    this.buttonState = new Array;
    this.buttonFreeLimit = new Array;
    this.loadHeadData = function(a, s) {
        var n = this;
        var t = function t(e) {
            if (!!e) {
                var i = n.loadHeadCloudData(e, a);
                s && s(i)
            }
        };
        operationFrame.getLocalCloudData(a, t)
    }
    ;
    this.loadHeadCloudData = function(t, c) {
        if (t == null) {
            return null
        }
        var e = new Array;
        var i = new Date(parseInt(t.Header.SaveTime));
        var a = i.getHours();
        var s = i.getMinutes();
        var n = i.getSeconds();
        if (parseInt(a) <= 9)
            a = "0" + a;
        if (parseInt(s) <= 9)
            s = "0" + s;
        if (parseInt(n) <= 9)
            n = "0" + n;
        var r = i.getDate();
        var o = parseInt(i.getMonth()) + 1;
        if (parseInt(r) <= 9)
            r = "0" + r;
        if (parseInt(o) <= 9)
            o = "0" + o;
        i = i.getFullYear() + "/" + o + "/" + r + " " + a + ":" + s;
        e.push(i);
        e.push(t.Header.StoryName);
        if (!t.Thumbnail) {
            e.push(LOGO_URL)
        } else if (t.Thumbnail.cloudImageUrl) {
            var h = t.Thumbnail.cloudImageUrl;
            var u = h.indexOf("//");
            h = PROTOCOL + h.substring(u, h.length);
            e.push(h + "?v" + t.Header.SaveTime)
        } else {
            var l = c - 1;
            if (operationFrame.saveFileData[l] && operationFrame.saveFileData[l].picurl) {
                e.push(operationFrame.saveFileData[l].picurl)
            } else {
                e.push(t.Thumbnail.base64)
            }
        }
        e.push(parseInt(t.Header.SaveTime));
        if (Configuration.isH5) {
            if (!GloableData.getInstance().getIsUnLock() && t.Header.IsFreeLimit == 1) {
                e.push(parseInt(t.Header.IsFreeLimit))
            } else {
                e.push(0)
            }
        }
        e.push(parseInt(t.Header.isTimeMallGoods));
        return e
    }
    ;
    this.autoSave = function(t) {
        if (!tv.canvas.isSpeedRead() || t.Code == 101 || t.Code == 1010 || t.Code == 1011) {
            operationFrame.DeParseFrameInfo(-100, false)
        }
    }
}

function saveReplay() {
    this.replay = new Array;
    this.Add = function(t) {
        if (this.replay.length > 50) {
            this.replay.splice(0, 1)
        }
        this.replay.push(utils.madeString(t, 0, 0, true))
    }
    ;
    this.saveData = function(t) {
        var e = this.replay.length;
        var i = null;
        if (tv.DataVer > 104) {
            i = tv.storyList.currentStory.getCurEvent()
        }
        if (i && i.Code == 221) {
            e -= 3
        }
        t.length = e;
        for (var a = 0; a < e; a++) {
            t[a] = this.replay[a]
        }
    }
    ;
    this.loadData = function(t) {
        this.replay.length = 0;
        var e = t["length"];
        for (var i = 0; i < e; i++) {
            var a = t[i];
            this.replay.push(a)
        }
    }
}

function saveOther() {
    this.cg_index = new Array;
    this.bgm_index = new Array;
    this.addBGM = function(t) {
        if (this.bgm_index.indexOf(t) < 0) {
            this.bgm_index.push(t)
        }
    }
    ;
    this.addCG = function(t) {
        var e = this;
        this.loadData(function() {
            if (e.cg_index.indexOf(t) < 0) {
                e.cg_index.push(t)
            }
        })
    }
    ;
    this.saveData = function() {
        var t = "";
        var e = "";
        if (Configuration.isH5) {
            e = "SCGItem" + GloableData.getInstance().savekey
        } else {
            e = guid + "|" + "SCGItem"
        }
        for (var i = 0; i < this.cg_index.length; i++) {
            t += this.cg_index[i] + "|"
        }
        SALlocalStorage.setItem(e, t);
        var a = "";
        if (Configuration.isH5) {
            e = "SBGMItem" + GloableData.getInstance().savekey
        } else {
            e = guid + "|" + "SBGMItem"
        }
        for (var i = 0; i < this.bgm_index.length; i++) {
            a += this.bgm_index[i] + "|"
        }
        SALlocalStorage.setItem(e, a)
    }
    ;
    this.loadData = function(a) {
        var s = this;
        var n;
        var r;
        var o = "";
        if (Configuration.isH5) {
            o = "SBGMItem" + GloableData.getInstance().savekey
        } else {
            o = guid + "|" + "SBGMItem"
        }
        sLoading.showMask();
        SALlocalStorage.getItem(o, function(t) {
            if (t) {
                n = t
            }
            if (n) {
                var e = n.substring(0, n.length - 1).split("|");
                for (var i = 0; i < e.length; i++) {
                    e[i] = parseInt(e[i], 10)
                }
                s.bgm_index = e
            }
            if (Configuration.isH5) {
                o = "SCGItem" + GloableData.getInstance().savekey
            } else {
                o = guid + "|" + "SCGItem"
            }
            SALlocalStorage.getItem(o, function(t) {
                sLoading.hideMask();
                if (t) {
                    r = t
                }
                if (r) {
                    var e = r.substring(0, r.length - 1).split("|");
                    for (var i = 0; i < e.length; i++) {
                        e[i] = parseInt(e[i], 10)
                    }
                    s.cg_index = e
                }
                a && a()
            })
        })
    }
}

function DChatData() {
    this.id = 0;
    this.turn = 0;
    this.keep = 0;
    this.startX = 0;
    this.startY = 0;
    this.width = 0;
    this.height = 0;
    this.areaUp = 0;
    this.areaDown = 0;
    this.areaLeft = 0;
    this.areaRight = 0;
    this.areaID = 0;
    this.zoomX = 1;
    this.zoomY = 1;
    this.opacity = 0;
    this.msg = "";
    this.chatItemList = new Array;
    this.Modify = function(t) {
        this.id = t.id ? t.id : 0;
        this.turn = t.turn ? t.turn : 0;
        this.keep = t.keep ? t.keep : 0;
        this.startX = t.startX ? t.startX : 0;
        this.startY = t.startY ? t.startY : 0;
        this.width = t.width ? t.width : 0;
        this.height = t.height ? t.height : 0;
        this.msg = t.msg ? t.msg : "";
        this.areaID = t.areaID ? t.areaID : 0;
        this.areaLeft = t.areaLeft ? t.areaLeft : 0;
        this.areaRight = t.areaRight ? t.areaRight : 0;
        this.areaUp = t.areaUp ? t.areaUp : 0;
        this.areaDown = t.areaDown ? t.areaDown : 0;
        this.zoomX = t.zoomX ? t.zoomX : 1;
        this.zoomY = t.zoomY ? t.zoomY : 1;
        this.opacity = t.opacity ? t.opacity : 0
    }
}

function DChatItem() {
    this.id = 0;
    this.pos = 0;
    this.framePic = "";
    this.type = 0;
    this.name = "";
    this.head = "";
    this.content = "";
    this.size = 0;
    this.msg = "";
    this.eventID = 0;
    this.voicePic = "";
    this.characterID = 0;
    this.picPath = null;
    this.picWidth = 0;
    this.picHeight = 0;
    this.Modify = function(t) {
        this.id = t.id ? t.id : 0;
        this.pos = t.pos ? t.pos : 0;
        this.framePic = t.framePic ? t.framePic : "";
        this.type = t.type ? t.type : 0;
        this.name = t.name ? t.name : "";
        this.head = t.head ? t.head : "";
        this.content = t.content ? t.content : "";
        this.size = t.size ? t.size : 0;
        this.msg = t.msg ? t.msg : "";
        this.eventID = t.eventID ? t.eventID : 0;
        this.voicePic = t.voicePic ? t.voicePic : "";
        this.characterID = t.characterID ? t.characterID : 0;
        this.picPath = t.picPath ? t.picPath : "";
        this.picWidth = t.picWidth ? t.picWidth : 0;
        this.picHeight = t.picHeight ? t.picHeight : 0
    }
}

function DNewMall(t) {
    this.version = t.readInt32();
    this.backPic = new DFileName(t);
    this.halfPic = new DFileName(t);
    this.halfPos = new DPoint(t);
    this.isOaf = t.readInt32() == 1;
    this.oafInfo = new OAFInfo(t);
    this.closeBtn = new DButtonIndex(t);
    this.flowerHuaTx = new DFontProperty(t);
    this.flowerPic = new DFileName(t);
    this.flowerPicUrl = fileListFato("Graphics/UI/" + this.flowerPic);
    if (clientType == 1) {
        this.flowerPicUrl = wanziIcon
    }
    this.flowerPicPos = new DPoint(t);
    this.flowerHuaTxPos = new DPoint(t);
    this.flowerHuaNumbuerPos = new DPoint(t);
    this.goodDetailPage = new GoodDetailPage(t);
    this.viewItemPortPic = new DFileName(t);
    this.viewItemPortPicPos = new DPoint(t);
    this.viewItemPortPicSize = new DViewSize(t);
    this.viewIsShowItemName = t.readInt32() == 1;
    this.viewIsShowItemDesc = t.readInt32() == 1;
    this.viewIsShowItemPic = t.readInt32() == 1;
    this.goodList = new GoodList(t);
    this.previousPageBtn = new DButtonIndex(t);
    this.nextPageBtn = new DButtonIndex(t);
    this.pageNumber = new DFontProperty(t);
    this.numberPagePos = new DPoint(t);
    this.tipBtn = new DButtonIndex(t);
    this.tipName = t.readString();
    this.WZPriceLen = t.readInt32();
    this.WZPrice = [];
    for (var e = 0; e < this.WZPriceLen; e++) {
        this.WZPrice.push(t.readInt32())
    }
    this.PublishTime = t.readString();
    this.ModifyPosition = t.readInt32();
    this.viewIsShowItemGetAll = t.readInt32() == 1;
    this.getAllBtn = new DButtonIndex(t);
    this.getItemDataById = function(t) {
        var e = this.goodList.goods;
        var i = null;
        for (var a in e) {
            if (e[a].itemId == t) {
                i = e[a];
                break
            }
        }
        return i
    }
    ;
    this.addAllMallBuyVar = function() {
        var t = function t(e, i) {
            if (e.itemType == 2) {
                for (var a = 0; a < i; a++) {
                    for (var s in e.itemAttributes) {
                        if (e.itemStatus == 2) {
                            continue
                        }
                        var n = e.itemAttributes[s];
                        var r = tv.system.vars.getVar(n.arrributeId);
                        var c = n.operator;
                        var o = n.varValue;
                        switch (c) {
                        case 0:
                            r = o;
                            break;
                        case 1:
                            r += o;
                            break;
                        case 2:
                            r -= o;
                            break;
                        case 3:
                            r *= o;
                            break;
                        case 4:
                            r = r / o;
                            break;
                        case 5:
                            r = r % o;
                            break
                        }
                        tv.system.vars.setVar(n.arrributeId, r)
                    }
                }
            } else if (e.itemType == 3) {
                var h = e.itemAttribute.split(",");
                for (var u in h) {
                    var f = 1;
                    var l = this.mallViewData.getItemDataById(parseInt(h[u]));
                    if (l.itemId !== e.itemId && l.itemType !== 3) {
                        t(l, f)
                    }
                }
            }
        }
    }
}

function DPoint(t) {
    this.x = t.readInt32();
    this.y = t.readInt32()
}

function DViewSize(t) {
    this.w = t.readInt32();
    this.h = t.readInt32()
}

function OAFInfo(t) {
    t.readInt32();
    this.indexs = new Array;
    this.oafName = t.readString();
    this.indexCount = t.readInt32();
    for (var e = 0; e < this.indexCount; e++) {
        var i = new OAFIndexInfo(t);
        this.indexs.push(i)
    }
    this.errorPic = new DFileName(t)
}

function OAFIndexInfo(t) {
    t.readInt32();
    this.actIndex = t.readInt32();
    this.actName = t.readString();
    this.actType = t.readInt32()
}

function GoodDetailPage(t) {
    t.readInt32();
    this.bg = new DFileName(t);
    this.itemPicBg = new DFileName(t);
    this.itemPicBgPos = new DPoint(t);
    this.itemPicBgSize = new DViewSize(t);
    this.itemPicPos = new DPoint(t);
    this.itemPicSize = new DViewSize(t);
    this.itemNamePos = new DPoint(t);
    this.itemAllPriceTxtPos = new DPoint(t);
    this.itemAllPricePicPos = new DPoint(t);
    this.itemAllPriceNumPos = new DPoint(t);
    this.itemDescSize = new DViewport(t);
    this.confirmBtn = new DButtonIndex(t);
    this.cancaleBtn = new DButtonIndex(t);
    this.minusBtn = new DButtonIndex(t);
    this.addBtn = new DButtonIndex(t);
    this.isUserPic = t.readInt32() == 1;
    this.varIndex = t.readInt32();
    this.varIndexPic = new DFileName(t);
    this.buyNumPos = new DPoint(t);
    this.isShowBuyNumber = t.readInt32() == 1;
    this.isShowItemName = t.readInt32() == 1;
    this.isShowItemDec = t.readInt32() == 1;
    this.isShowItemPic = t.readInt32() == 1
}

function GoodList(t) {
    this.goodCount = t.readInt32();
    this.goods = new Array;
    this.itemHp = new Array;
    for (var e = 0; e < this.goodCount; e++) {
        var i = new GoodData(t);
        this.goods.push(i);
        this.itemHp.push({
            id: i.itemId,
            hp: i.isHpLock
        })
    }
}

function GoodData(t) {
    t.readInt32();
    this.itemId = t.readInt32();
    this.itemPoint = new DPoint(t);
    this.itemName = t.readString();
    this.itemNameFontPro = new DFontProperty(t);
    this.itemNamePos = new DPoint(t);
    this.itemType = t.readInt32();
    this.itemPrice = t.readInt32();
    this.itemPriceFontPro = new DFontProperty(t);
    this.itemPricePos = new DPoint(t);
    this.itemDesc = t.readString();
    this.itemDescFontPro = new DFontProperty(t);
    this.itemDescSize = new DViewport(t);
    this.itemViewBg = new DFileName(t);
    this.itemViewBGSize = new DViewSize(t);
    this.itemPic = new DFileName(t);
    this.itemPicPos = new DPoint(t);
    this.itemPicSize = new DViewSize(t);
    this.itemPicBg = new DFileName(t);
    this.itemPicBgPos = new DPoint(t);
    this.itemPicBgSize = new DViewSize(t);
    this.itemPriceFlowerPos = new DPoint(t);
    this.itemCommityBtn = new DButtonIndex(t);
    this.itemEnablePic = new DFileName(t);
    this.itemDisabledPic = new DFileName(t);
    this.isRepeat = t.readInt32() == 1;
    this.itemStatus = t.readInt32();
    this.isHpLock = t.readInt32() == 1;
    this.itemFree = t.readInt32() == 1;
    this.itemAttribute = t.readString();
    this.itemAttbuiteCount = t.readInt32();
    this.itemAttributes = new Array;
    for (var e = 0; e < this.itemAttbuiteCount; e++) {
        var i = new DMallItemAttribute(t);
        this.itemAttributes.push(i)
    }
    this.wanzi_price = 0;
    this.discount = 0;
    this.discount_wanzi_price = 0
}

function DMallItemAttribute(t) {
    t.readInt32();
    this.arrributeId = t.readInt32();
    this.operator = t.readInt32();
    this.varValue = t.readInt32()
}

function DFontProperty() {
    read.readInt32();
    this.fontSize = read.readInt32();
    this.font = read.readString();
    this.fontColor = new OColorVal(read.readString()).getColor()
}

function DMall(t) {
    this.bgPic = new DFileName(t);
    this.rightPic = new DFileName(t);
    this.rightPicPos = new DPoint(t);
    this.flowerCountTextPos = new DPoint(t);
    this.flowerCountFont = t.readString();
    this.flowerCountFontSize = t.readInt32();
    this.flowerPic = new DFileName(t);
    this.flowerPicUrl = fileListFato("Graphics/UI/" + this.flowerPic);
    if (clientType == 1) {
        this.flowerPicUrl = wanziIcon
    }
    this.flowerPicPos = new DPoint(t);
    this.flowerCountPos = new DPoint(t);
    this.payBtn = new DButtonIndex(t);
    this.rewardAuthorBtn = new DButtonIndex(t);
    this.closeBtn = new DButtonIndex(t);
    this.buyMessagePic = new DFileName(t);
    this.confirmBuyBtn = new DButtonIndex(t);
    this.cancelBuyBtn = new DButtonIndex(t);
    this.buySuccessPic = new DFileName(t);
    this.buyErrorPic = new DFileName(t);
    this.itemNumber = t.readInt32();
    this.items = [];
    this.itemHP = [];
    this.dataVer = 0;
    for (var e = 0; e < this.itemNumber; e++) {
        t.readInt32();
        this.items.push(new DMallItem(t))
    }
    try {
        this.dataVer = t.readInt32();
        var i = t.readInt32();
        for (var a = 0; a < i; a++) {
            var s = t.readInt32();
            var n = t.readInt32() == 1;
            t.readString();
            this.itemHP.push({
                id: s,
                hp: n
            })
        }
    } catch (t) {}
    this.getItemDataById = function(t) {
        var e = this.items;
        var i = null;
        for (var a in e) {
            if (e[a] && e[a].itemId == t) {
                i = e[a];
                break
            }
        }
        return i
    }
}

function DPoint(t) {
    this.x = t.readInt32();
    this.y = t.readInt32()
}

function DMallItem(t) {
    this.itemId = t.readInt32();
    this.itemPos = new DPoint(t);
    this.itemSize = {
        w: t.readInt32(),
        h: t.readInt32()
    };
    this.itemName = t.readString();
    this.itemNamePos = new DPoint(t);
    this.itemNameFontSize = t.readInt32();
    this.itemFontName = t.readString();
    this.fontColor = t.readString();
    this.itemType = t.readInt32();
    this.itemPic = new DFileName(t);
    this.itemPicSize = {
        w: t.readInt32(),
        h: t.readInt32()
    };
    this.itemPicBG = new DFileName(t);
    this.itemPicBGPos = new DPoint(t);
    this.itemPicBGSize = {
        w: t.readInt32(),
        h: t.readInt32()
    };
    this.itemPrice = t.readInt32();
    this.priceFlowerPos = new DPoint(t);
    this.itemPricePos = new DPoint(t);
    this.itemPriceFontSize = t.readInt32();
    this.itemDesc = t.readString();
    this.isRepeat = t.readInt32() != 0;
    this.itemStatus = t.readInt32();
    this.itemFree = t.readInt32() != 0;
    this.itemBgPic = new DFileName(t);
    this.itemDisabled = new DFileName(t);
    this.itemBuyBtn = new DButtonIndex(t);
    this.itemEnable = new DFileName(t);
    this.itemAttribute = t.readString();
    this.itemAttributes = new Array;
    this.itemVarAttributeNum = t.readInt32();
    for (var e = 0; e < this.itemVarAttributeNum; e++) {
        this.itemAttributes.push(new DMallItemAttribute(t))
    }
    this.wanzi_price = 0;
    this.discount = 0;
    this.discount_wanzi_price = 0
}

function DTimeMall(t) {
    this.version = t.readInt32();
    this.backPic = new DFileName(t);
    this.halfPic = new DFileName(t);
    this.halfPos = new DPoint(t);
    this.isOaf = t.readInt32() == 1;
    this.oafInfo = new OAFInfo(t);
    this.closeBtn = new DButtonIndex(t);
    this.flowerHuaTx = new DFontProperty(t);
    this.flowerPic = new DFileName(t);
    this.flowerPicUrl = fileListFato("Graphics/UI/" + this.flowerPic);
    if (clientType == 1) {
        this.flowerPicUrl = wanziIcon
    }
    this.flowerPicPos = new DPoint(t);
    this.flowerHuaTxPos = new DPoint(t);
    this.flowerHuaNumbuerPos = new DPoint(t);
    this.goodDetailPage = new TimeGoodDetailPage(t);
    this.viewItemPortPic = new DFileName(t);
    this.viewItemPortPicPos = new DPoint(t);
    this.viewItemPortPicSize = new DViewSize(t);
    this.viewIsShowItemName = t.readInt32() == 1;
    this.viewIsShowItemDesc = t.readInt32() == 1;
    this.viewIsShowItemPic = t.readInt32() == 1;
    this.previousPageBtn = new DButtonIndex(t);
    this.nextPageBtn = new DButtonIndex(t);
    this.pageNumber = new DFontProperty(t);
    this.numberPagePos = new DPoint(t);
    this.timeIsOpen = t.readInt32() == 1;
    this.tipName = t.readString();
    this.tipBtn = new DButtonIndex(t);
    this.newGood = t.readInt32();
    this.goodList = new TimeGoodList(t);
    this.isShowBuyNum = t.readInt32() == 1;
    this.itemPosList = [];
    for (var e = 0; e < (this.goodList.goodCount > 6 ? 6 : this.goodList.goodCount); e++) {
        this.itemPosList.push(this.goodList.goods[e].itemPoint)
    }
    this.getItemDataById = function(t) {
        var e = this.goodList.goods;
        var i = void 0;
        for (var a in e) {
            i = e[a];
            if (i.itemId == t) {
                break
            }
        }
        return i
    }
}

function TimeGoodDetailPage(t) {
    t.readInt32();
    this.bg = new DFileName(t);
    this.itemPicBg = new DFileName(t);
    this.itemPicBgPos = new DPoint(t);
    this.itemPicBgSize = new DViewSize(t);
    this.itemPicPos = new DPoint(t);
    this.itemPicSize = new DViewSize(t);
    this.itemNamePos = new DPoint(t);
    this.itemAllPriceTxtPos = new DPoint(t);
    this.itemAllPricePicPos = new DPoint(t);
    this.itemAllPriceNumPos = new DPoint(t);
    this.itemDescSize = new DViewport(t);
    this.confirmBtn = new DButtonIndex(t);
    this.cancaleBtn = new DButtonIndex(t);
    this.minusBtn = new DButtonIndex(t);
    this.addBtn = new DButtonIndex(t);
    this.isUserPic = t.readInt32() == 1;
    this.varIndex = t.readInt32();
    this.varIndexPic = new DFileName(t);
    this.buyNumPos = new DPoint(t);
    this.itemStatus = 1;
    this.itemType = 2;
    this.timePos = new DPoint(t);
    this.tollNumPos = new DPoint(t);
    this.isShowBuyNumber = t.readInt32() == 1;
    this.isShowItemName = t.readInt32() == 1;
    this.isShowItemDec = t.readInt32() == 1;
    this.isShowItemPic = t.readInt32() == 1;
    this.isShowTime = t.readInt32() == 1;
    this.isShowNumbre = t.readInt32() == 1
}

function TimeGoodList(t) {
    this.goodCount = t.readInt32();
    this.goods = new Array;
    this.itemHp = new Array;
    for (var e = 0; e < this.goodCount; e++) {
        var i = new TimeGoodData(t);
        this.goods.push(i);
        this.itemHp.push({
            id: i.itemId,
            hp: i.isHpLock
        })
    }
}

function TimeGoodData(t) {
    var e = t.readInt32();
    this.itemId = t.readInt32();
    this.itemPoint = new DPoint(t);
    this.itemName = t.readString();
    this.itemNameFontPro = new DFontProperty(t);
    this.itemNamePos = new DPoint(t);
    this.itemPrice = t.readInt32();
    this.itemPriceFontPro = new DFontProperty(t);
    this.itemPricePos = new DPoint(t);
    this.itemDesc = t.readString();
    this.itemDescFontPro = new DFontProperty(t);
    this.itemDescSize = new DViewport(t);
    this.itemViewBg = new DFileName(t);
    this.itemViewBGSize = new DViewSize(t);
    this.itemPic = new DFileName(t);
    this.itemPicPos = new DPoint(t);
    this.itemPicSize = new DViewSize(t);
    this.itemPicBg = new DFileName(t);
    this.itemPicBgPos = new DPoint(t);
    this.itemPicBgSize = new DViewSize(t);
    this.itemPriceFlowerPos = new DPoint(t);
    this.itemCommityBtn = new DButtonIndex(t);
    this.itemEnablePic = new DFileName(t);
    this.isRepeat = t.readInt32() == 1;
    this.itemAttribute = t.readString();
    this.upTime = t.readInt64();
    this.downTime = t.readInt64();
    this.sell_count = 0;
    var i = Math.floor((new Date).getTime() / 1e3);
    this.sell_status = i < this.upTime ? -1 : i < this.downTime ? 1 : -2;
    this.sell_countdown = i < this.upTime ? this.upTime - i : i < this.downTime ? this.downTime - i : 0;
    this.prop_uptime = this.upTime;
    this.prop_downtime = this.downTime;
    this.itemSellInfoFontPro = new DFontProperty(t);
    this.itemSellInfoPoint = new DPoint(t);
    this.itemAttbuiteCount = t.readInt32();
    this.itemAttributes = new Array;
    for (var a = 0; a < this.itemAttbuiteCount; a++) {
        var s = new DMallItemAttribute(t);
        this.itemAttributes.push(s)
    }
    this.buyNumPos = new DPoint(t)
}

function DAnimation(t) {
    this.load = true;
    this.magic = t.read(6);
    this.descPartCount = t.readInt32();
    var e = 0;
    for (var i = 0; i < this.descPartCount; i++) {
        e = t.readInt32();
        t.cursor += e;
        e = t.readInt32();
        t.cursor += e
    }
    this.OfaName = t.readString();
    this.MaxWidth = t.readInt32();
    this.MaxHeight = t.readInt32();
    this.bgpath = fileListFato("Graphics/Oafs/" + t.readString());
    this.bgPosX = t.readInt32();
    this.bgPosY = t.readInt32();
    this.bgWidth = t.readInt32();
    this.bgHeight = t.readInt32();
    this.bgScaleX = t.readInt32() / 100;
    this.bgScaleY = t.readInt32() / 100;
    this.bgRotation = t.readInt32();
    this.bgOpacity = t.readInt32();
    this.bgMirror = t.readInt32();
    this.Xoffset = t.readInt32();
    this.Yoffset = t.readInt32();
    this.Obligate1 = t.readString();
    this.Obligate2 = t.readString();
    this.ActionsCount = t.readInt32();
    this.actionList = new Array;
    for (var a = 0; a < this.ActionsCount; a++) {
        var s = new OafAction;
        s.actionName = t.readString();
        s.suportAlpha = t.readInt32();
        s.AnimaLayerNum = t.readInt32();
        for (var n = 0; n < s.AnimaLayerNum; n++) {
            s.LayerName = t.readString()
        }
        s.info1 = t.readString();
        s.info2 = t.readString();
        s.Oaf2FramesCount = t.readInt32();
        for (var r = 0; r < s.Oaf2FramesCount; r++) {
            var o = t.readInt32();
            if (s.childCount < o) {
                s.childCount = o;
                s.MaxIndex = r
            }
            s.FramePicCount[r] = o;
            var h = new FramePicData;
            h.picPath = new Array(o);
            h.depth = new Array(o);
            h.posX = new Array(o);
            h.posY = new Array(o);
            h.width = new Array(o);
            h.height = new Array(o);
            h.zoomX = new Array(o);
            h.zoomY = new Array(o);
            h.rotate = new Array(o);
            h.opacity = new Array(o);
            h.mirrorType = new Array(o);
            h.MaterialObligate1 = new Array(o);
            h.MaterialObligate2 = new Array(o);
            h.MaterialObligate3 = new Array(o);
            h.isset = new Array(o);
            for (var l = 0; l < o; l++) {
                h.picPath[l] = t.readString();
                if (s.totalPic.indexOf(h.picPath[l]) < 0) {
                    s.totalPic.push(h.picPath[l])
                }
                h.depth[l] = t.readInt32();
                h.posX[l] = t.readInt32();
                h.posY[l] = t.readInt32();
                h.width[l] = t.readInt32();
                h.height[l] = t.readInt32();
                h.zoomX[l] = t.readInt32() / 100;
                h.zoomY[l] = t.readInt32() / 100;
                h.rotate[l] = t.readInt32();
                h.opacity[l] = t.readInt32();
                h.mirrorType[l] = t.readInt32();
                h.MaterialObligate1[l] = t.readString();
                h.MaterialObligate2[l] = t.readString();
                h.MaterialObligate3[l] = t.readString();
                h.isset[l] = false
            }
            s.framePicDataList.push(h)
        }
        this.actionList.push(s)
    }
    this.picList = new Array;
    this.getPicList = function() {
        for (var t = 0; t < this.actionList.length; t++) {
            for (var e = 0; e < this.actionList[t].totalPic.length; e++) {
                if (this.picList.indexOf(this.actionList[t].totalPic[e]) <= 0) {
                    this.picList.push(this.actionList[t].totalPic[e])
                }
            }
        }
    }
    ;
    this.getPicList();
    this.getActionData = function(t) {
        if (t < 0) {
            return null
        }
        if (!this.actionList || this.actionList.length <= t) {
            return null
        }
        if (isNaN(t)) {
            return i;
        }

        var e = this.actionList[t].framePicDataList;
        var i = new Array(this.actionList[t].Oaf2FramesCount);
        var a = 0;
        var s = new Map;
        for (var n = 0; n < this.actionList[t].Oaf2FramesCount; n++) {
            a = e[n].picPath.length;
            if (a <= 0) {
                continue
            }
            var r = new Array(a);
            for (var o = 0; o < a; o++) {
                var h = {};
                var l = e[n].picPath[o];
                if (s.has(l)) {
                    h.picPath = s.get(l)
                } else {
                    var c = fileListFato("Graphics/Oafs/" + l);
                    s.set(l, c);
                    h.picPath = c
                }
                h.depth = e[n].depth[o];
                h.posX = e[n].posX[o];
                h.posY = e[n].posY[o];
                h.width = -1;
                h.height = -1;
                h.zoomX = e[n].zoomX[o];
                h.zoomY = e[n].zoomY[o];
                h.rotate = e[n].rotate[o];
                h.opacity = e[n].opacity[o] / 255;
                h.mirrorType = e[n].mirrorType[o];
                if (h.mirrorType == 2 || h.mirrorType == "2") {
                    h.mirrorType = 1
                } else if (h.mirrorType == 1 || h.mirrorType == "1") {
                    h.mirrorType = 2
                }
                r[o] = h
            }
            i[n] = r
        }
        return i
    }
    ;
    this.createBGSprite = function() {
        if (!this.bgpath) {
            return null
        }
        var t = SALSprite(this.bgpath);
        SAL_setPosition(t, this.bgPosX, this.bgPosY);
        SAL_setElementSize(t, this.bgWidth, this.bgHeight);
        SAL_setElementScale(t, this.bgScaleX, this.bgScaleY);
        SAL_setElementMirrorType(t, this.bgMirror);
        SAL_setElementOpacity(t, this.bgOpacity / 255);
        var e = SALAction({
            type: "rotateTo",
            angle: this.bgRotation,
            duration: 0,
            targetX: 0,
            targetY: 0
        });
        SAL_runAction(t, e, null);
        return t
    }
}

function OafAction() {
    this.actionName;
    this.suportAlpha;
    this.AnimaLayerNum;
    this.LayerName;
    this.info1;
    this.info2;
    this.Oaf2FramesCount;
    this.FramePicCount = new Array;
    this.framePicDataList = new Array;
    this.totalPic = new Array;
    this.childCount = 0;
    this.MaxIndex = 0
}

function FramePicData() {
    this.picPath;
    this.depth;
    this.posX;
    this.posY;
    this.width;
    this.height;
    this.zoomX;
    this.zoomY;
    this.rotate;
    this.opacity;
    this.mirrorType;
    this.MaterialObligate1;
    this.MaterialObligate2;
    this.MaterialObligate3;
    this.isset
}

function DAdInfo(t) {
    var s = {};
    var n = {};
    var r = new Array(t);
    if (t > 0) {
        r[0] = true
    }
    this.param = "";
    this.toast = "";
    this.curMain = null;
    this.showADConfirm = function(t, e, i, a, s) {
        this.param = e;
        this.toast = i;
        this.curMain = s;
        tv.canvas.adConfirm.show(t, a)
    }
    ;
    this.checkManualAuthority = function(t) {
        return !!n[t]
    }
    ;
    this.getCountDownTime = function(t) {
        var e = s[t];
        if (!e) {
            e = -1
        } else {
            e = Math.floor(Date.now() / 1e3) - e
        }
        return e
    }
    ;
    this.showCountDown = function(t, e) {
        tv.canvas.adCD.show(t, e)
    }
    ;
    this.hideCountDown = function() {
        tv.canvas.adCD.hide()
    }
    ;
    this.isCDShowing = function() {
        return tv.canvas.adCD.visible
    }
    ;
    this.openAD = function(t, e, i, a) {
        this.param = t;
        this.toast = e;
        this.curMain = a;
        oaudio.pauseBgAudio();
        SAL_showADVideo(this.adSuccessCallback.bind(this), this.adFailCallback.bind(this), i)
    }
    ;
    this.saveADInfo = function() {
        var t = {
            limit: null,
            save: null,
            manual: null
        };
        var e = 0
          , i = 0
          , a = 0;
        t.limit = s;
        for (a = 0; a < r.length; a++) {
            i = r[a] ? 1 : 0;
            e = e | i << a
        }
        t.save = e;
        t.manual = n;
        SALlocalStorage.setItem("adInfo", JSON.stringify(t))
    }
    ;
    this.loadADInfo = function(t) {
        if (!t) {
            return
        }
        var e = JSON.parse(t);
        var i = 0
          , a = 0;
        s = e.limit;
        n = e.manual;
        i = e.save;
        for (a = 0; a < r.length; a++) {
            r[a] = (i & 1 << a) == 1
        }
    }
    ;
    this.setSaveAuthority = function(t) {
        r[t] = true;
        this.saveADInfo()
    }
    ;
    this.setManualAuthority = function(t) {
        n[t] = true;
        this.saveADInfo()
    }
    ;
    this.setTimeLimit = function(t) {
        s[t] = Math.floor(Date.now() / 1e3);
        this.saveADInfo()
    }
    ;
    this.adSuccessCallback = function() {
        tv.canvas.adConfirm.hide();
        var t = this.param.split(",");
        if (t[0] == "1" && tv.scene instanceof SSavefile) {
            var e = parseInt(t[2]);
            this.setSaveAuthority(e);
            if (t[1] == "1") {
                tv.scene.cmdSave(e)
            } else {
                tv.scene.cmdLoad(e)
            }
            SALlocalStorage.setItem(guid + "|" + e + "isOpen", "true")
        } else if (t[0] == "2") {
            if (this.curMain != null && this.curMain.story[this.curMain.pos].Code == 107) {
                this.curMain.event.skip();
                if (t.length > 2) {
                    if (t[2].indexOf("once") > -1) {
                        this.setManualAuthority(t[2])
                    } else {
                        this.setTimeLimit(t[2])
                    }
                }
            }
        }
        if (this.toast) {// hintMessage.setHint(this.toast + "成功")
        }
    }
    ;
    this.adFailCallback = function() {
        tv.canvas.adConfirm.hide();
        var t = this.param.split(",");
        if (t[0] == "2" && tv.scene instanceof SGame && this.curMain.story[this.curMain.pos].Code == 107) {
            if (t.length > 1) {
                var e = parseInt(t[1]);
                if (e >= 0) {
                    this.curMain.jumpToIndex(e)
                }
            } else {
                tv.scene = new SSavefile(false,true)
            }
        } else if (tv.scene instanceof SCUI) {
            tv.scene.setAllButtonEnable(true)
        }
        if (adCooldown) {
            // hintMessage.setHint("观看广告太频繁了，请稍后再来~");
            adCooldown = false
        } else {// hintMessage.setHint(this.toast + "失败")
        }
    }
}

function DoafData(t) {
    try {
        this.magic = t.read(6);
        this.descPartCount = t.readInt32();
        this.descName = new Array;
        this.descValue = new Array;
        if (this.descPartCount > 500) {
            this.load = false;
            return
        }
        var e = 0;
        for (var i = 0; i < this.descPartCount; i++) {
            e = t.readInt32();
            t.read(e);
            e = t.readInt32();
            t.read(e)
        }
        this.OfaName = t.readString();
        this.bg = t.readString();
        if (this.bg !== "" && this.bg.length != 32) {
            this.load = false;
            return
        }
        this.load = true;
        this.partsCount = t.readInt32();
        this.partNames = new Array;
        this.partFrameCounts = new Array;
        this.FrameDataIndex = new Array;
        this.FrameTime = new Array;
        this.MaxWidth = gGameWidth;
        this.MaxHeight = gGameHeight;
        for (var a = 0; a < this.partsCount; a++) {
            var s = new Array;
            var n = new Array;
            var r = t.readString();
            this.partNames.push(r);
            var o = t.readInt32();
            this.partFrameCounts.push(o);
            for (var h = 0; h < o; h++) {
                n.push(t.readInt32());
                s.push(t.readInt32())
            }
            this.FrameDataIndex.push(s);
            this.FrameTime.push(n)
        }
        this.PartsImageCount = t.readInt32();
        this.imageList = new Array;
        for (var a = 0; a < this.PartsImageCount; a++) {
            this.imageList.push(t.readString())
        }
    } catch (t) {
        SAL_log(t)
    }
    this.getActionData = function(t) {
        if (t < 0) {
            return null
        }
        if (!this.partsCount || this.partsCount.length <= t) {
            return null
        }
        var e = this.FrameDataIndex[t];
        var i = this.FrameTime[t];
        if (!e || e.length <= 0 || !i || i.length <= 0 || !this.imageList) {
            return
        }
        var a = new Array;
        for (var s = 0; s < e.length; s++) {
            var n = this.imageList[e[s]];
            n = webConfig.CDN_SRC_URL + n.substr(0, 2).toLowerCase() + "/" + n;
            for (var r = 0; r < i[s]; r++) {
                var o = new Array;
                var h = {};
                h.picPath = n;
                h.width = -1;
                h.height = -1;
                h.posX = 0;
                h.posY = 0;
                h.zoomX = 1;
                h.zoomY = 1;
                h.rotate = 0;
                h.opacity = 1;
                h.mirrorType = 0;
                o.push(h);
                a.push(o)
            }
        }
        return a
    }
    ;
    this.getImageURL = function(t) {
        if (this.imageList && this.imageList.length > t) {
            var e = this.imageList[t];
            return webConfig.CDN_SRC_URL + e.substr(0, 2).toLowerCase() + "/" + e
        }
    }
    ;
    this.createBGSprite = function() {
        if (!this.bg) {
            return null
        }
        var t = webConfig.CDN_SRC_URL + this.bg.substr(0, 2).toLowerCase() + "/" + this.bg;
        var e = SALSprite(t);
        return e
    }
}

function DWmodData(t) {
    var e = t.readCString(6);
    if (e == "WMODMB") {
        this.id = t.readString();
        this.ver = t.readString();
        this.gindex = t.readString();
        this.gver = t.readString();
        var i = t.readInt32();
        this.resList = new Dictionary;
        for (var a = 0; a < i; a++) {
            var s = new DWmodResItem(t,this.id,this.ver);
            this.resList.set(s.name, s)
        }
    }
}

function DWmodResItem(t, e, i) {
    this.id = e;
    this.ver = i;
    this.name = t.readString().toLowerCase();
    this.md5 = t.readString();
    this.fileSize = t.readInt32();
    this.resType = t.readString();
    this.isUpDone = 0;
    this.getUrl = function() {
        if (this.resType == "MP3") {
            return webConfig.WMOD_RES_SERVER_URL + "audio/" + guid + "/" + this.md5.substr(0, 2) + "/" + this.md5 + ".mp3"
        } else if (this.resType == "BIN") {
            var t = GloableData.getInstance().wmodUseType;
            var e = "";
            if (t == "wmod") {
                e = "debug"
            } else if (t == "group") {
                e = "online"
            }
            return webConfig.WMOD_RES_SERVER_URL + "modbin/" + this.id + "/" + e + "/" + this.ver + "/" + this.md5
        }
        return ""
    }
}

function DWmodStory(t) {
    if (t.readCString(6) == "WMODGB") {
        this.id = t.readString();
        this.ver = t.readString();
        this.gindex = t.readString();
        this.gver = t.readString();
        var e = t.readInt32();
        this.eventList = new Dictionary;
        for (var i = 0; i < e; i++) {
            var a = new DWmodStoryEvent(t);
            this.eventList.set(a.unId, a)
        }
    }
}

function DWmodStoryEvent(t) {
    this.unId = t.readInt32();
    this.roleId = t.readInt32();
    this.storyId = t.readInt32();
    this.pos = t.readInt32();
    this.volume = t.readInt32();
    this.path = t.readInt32();
    this.name = t.readString();
    this.md5 = t.readString();
    this.msg = t.readString()
}

function DWelfare(t) {
    this.ve = t.readInt32();
    this.isOpen = t.readInt32();
    this.backPic = new DFileName(t);
    this.halfPic = new DFileName(t);
    this.halfPos = new DPoint(t);
    this.isOaf = t.readInt32() == 1;
    this.oafInfo = new OAFInfo(t);
    this.closeBtn = new DButtonIndex(t);
    this.getItemIconPic = new DFileName(t);
    this.singBtn = new DButtonIndex(t);
    this.itemBg = new DFileName(t);
    this.canGetItemIcon = new DFileName(t);
    this.getItemPic = new DFileName(t);
    this.flowerPic = new DFileName(t);
    this.flowerPicUrl = fileListFato("Graphics/UI/" + this.flowerPic);
    this.flowerPicPos = new DPoint(t);
    this.flowerHuaNumbuer = new DFontProperty(t);
    this.flowerHuaNumbuerPos = new DPoint(t);
    this.welfareLength = t.readInt32();
    this.welfareDetailList = [];
    for (var e = 0; e < this.welfareLength; e++) {
        this.welfareDetailList.push(new WelfareDetailData(t))
    }
    var i = this.welfareDetailList[0].goodList;
    var a = t.readInt32();
    for (var s = 0; s < a; s++) {
        i[s].wmTaskNum = t.readInt32();
        i[s].wmTaskNumDice = t.readString()
    }
    this.dataTime = t.readString();
    this.dataPos = t.readInt32();
    this.bgPos = new DPoint(t)
}

function WelfareDetailData(t) {
    t.readInt32();
    this.id = t.readInt32();
    this.itemPoint = new DPoint(t);
    this.isOpen = t.readInt32();
    this.itemName = t.readString();
    this.nameFont = new DFontProperty(t);
    this.namePos = new DPoint(t);
    this.desc = t.readString();
    this.descFont = new DFontProperty(t);
    this.descPos = new DPoint(t);
    this.singStrFont = new DFontProperty(t);
    this.singStrPos = new DPoint(t);
    this.singNumFont = new DFontProperty(t);
    this.singNumPos = new DPoint(t);
    this.singViewport = new DViewport(t);
    this.getItemViewport = new DViewport(t);
    this.detailBg = new DFileName(t);
    this.bgViewport = new DViewport(t);
    this.itemNumber = t.readInt32();
    this.goodList = [];
    for (var e = 0; e < this.itemNumber; e++) {
        var i = new WelfareGoodData(t);
        this.goodList.push(i)
    }
}

function WelfareGoodData(t) {
    t.readInt32();
    this.itemId = t.readInt32();
    this.itemPoint = new DPoint(t);
    this.itemName = t.readString();
    this.itemNameFontPro = new DFontProperty(t);
    this.itemNamePos = new DPoint(t);
    this.itemPic = new DFileName(t);
    this.itemViewport = new DViewport(t);
    this.isShowFlower = t.readInt32();
    this.itemFlowerPos = new DPoint(t);
    this.getItemViewport = new DViewport(t);
    this.taskNum = t.readInt32();
    this.taskNumDice = t.readString();
    this.wmTaskNum = 0;
    this.wmTaskNumDice = "";
    this.taskPos = new DPoint(t);
    this.itemAttbuiteCount = t.readInt32();
    this.itemAttributes = new Array;
    for (var e = 0; e < this.itemAttbuiteCount; e++) {
        var i = new DMallItemAttribute(t);
        this.itemAttributes.push(i)
    }
}

function DName(t) {
    this.ve = t.readInt32();
    this.isHide = t.readInt32();
    this.dictLength = t.readInt32();
    this.dictList = [];
    for (var e = 0; e < this.dictLength; e++) {
        this.dictList.push(t.readString())
    }
    this.viewport = new DViewport(t);
    this.row = t.readInt32();
    this.col = t.readInt32();
    this.spanRow = t.readInt32();
    this.spanCol = t.readInt32();
    this.textBtn = new DButtonIndex(t);
    this.backPic = new DFileName(t);
    this.backPos = new DPoint(t);
    this.confirmBtn = new DButtonIndex(t);
    this.randomBtn = new DButtonIndex(t);
    this.isRandom = t.readInt32();
    this.upBtn = new DButtonIndex(t);
    this.netxBtn = new DButtonIndex(t);
    this.pagePos = new DPoint(t);
    this.inputBg = new DFileName(t);
    this.inputFocusBg = new DFileName(t);
    this.inputLength = t.readInt32();
    this.inputBoxList = [];
    for (var i = 0; i < this.inputLength; i++) {
        var a = new DInputBox(t);
        this.inputBoxList.push(a)
    }
    this.inputBoxNumList = [];
    if (this.inputBoxList.length >= 15) {
        for (var s = 1; s <= 5; s++) {
            this.inputBoxNumList.push(this.inputBoxList.splice(0, s))
        }
        this.inputBoxList = this.inputBoxNumList[4]
    }
    this.textMd5 = t.readString();
    if (!this.textMd5) {
        this.textMd5 = "ef1aeec4170935af3b2e259660dd143b"
    }
    this.saveMd5 = t.readString();
    this.os = t.readString();
    this.saveImageTextSize = t.readString();
    this.deleteBtn = new DButtonIndex(t)
}

function DInputBox(t) {
    this.length = t.readInt32();
    this.id = t.readInt32();
    this.namePos = new DPoint(t);
    this.viewport = new DViewport(t)
}

function CTextChoice() {
    this.index = -1;
    this.usedList = new Array;
    this.waiting = false;
    this.data = tv.data.System.Buttons[tv.data.System.MessageBox.ChoiceButtonIndex];
    this.image1 = "";
    this.image2 = "";
    if (this.data) {
        this.image1 = "Graphics/Button/" + this.data.image1;
        this.image2 = "Graphics/Button/" + this.data.image2
    }
    this.iconImg = "graphics/other/ad/play.png";
    this.choiceSpace = 10;
    this.bg = null;
    var o = null;
    var r;
    var b = new Array;
    this.sp = new OContainer(gGameWidth,gGameHeight);
    this.sp.setVisible(false);
    this.sp.setBlockTouch(true);
    SAL_setElementIndex(g, this.sp.element, 3900);
    this.sp.setPosition(gGameX, 0);
    this.isFinish = function() {
        return !this.waiting
    }
    ;
    this.disposeChoice = function() {
        for (var t = 0; t < this.usedList.length; t++) {
            if (this.usedList[t].btn) {
                this.usedList[t].btn.dispose()
            }
            if (this.usedList[t].icon) {
                this.usedList[t].icon.dispose()
            }
            if (this.usedList[t].text) {
                this.usedList[t].text.dispose()
            }
            if (this.usedList[t].btnPos) {
                this.usedList[t].btnPos = null
            }
            if (this.usedList[t].btn) {
                this.usedList[t].textPos = null
            }
            this.usedList[t] = null
        }
        this.usedList.length = 0;
        b.length = 0;
        this.closeTimeBar();
        if (this.bg != null) {
            this.bg.dispose();
            this.bg = null
        }
    }
    ;
    this.clickChoice = function(t) {
        this.index = t;
        try {
            showTextChoiceCallback({
                textArr: b,
                chosenIndex: t
            }, this.closeChoice.bind(this))
        } catch (t) {
            this.closeChoice()
        }
    }
    ;
    this.setupChoice = function(t) {
        this.initChoice(t, -2001, -2001, "", 0, 0)
    }
    ;
    this.setupChoiceEX = function(t, e, i) {
        this.initChoice(t, e, i, "", 0, 0)
    }
    ;
    this.setupChoiceEX2 = function(t, e, i, a, s, n) {
        this.initChoice(t, e, i, a, s, n)
    }
    ;
    this.initChoice = function(t, c, u, f, d, m) {
        this.disposeChoice();
        if (t == null || t.length <= 0)
            return;
        this.sp.setVisible(true);
        this.sp.fadeTo(1, 0);
        stopSpeedRead();
        if (f.length > 0) {
            this.bg = new OBitmap("Graphics/UI/" + f);
            this.sp.addChild(this.bg);
            this.bg.setPosition(d, m)
        }
        var g = 0;
        var v = gGameHeight;
        if (tv.canvas.message[tv.canvas.msgIndex].isShow()) {
            v -= parseInt(tv.canvas.message[tv.canvas.msgIndex].getHeight())
        }
        var e, i, a, s, n;
        var r, o, p, S, I, w, h, l;
        var y = t.length;
        for (e = 0; e < y; e++) {
            i = utils.madeString(t[e].text, 1, 1, true);
            b.push(i);
            if (t[e].args) {
                o = t[e].args.split(",");
                p = o[0];
                S = tv.data.System.Buttons[p];
                I = "Graphics/Button/" + S.image1;
                w = "Graphics/Button/" + S.image2;
                h = parseInt(o[1]);
                l = parseInt(o[2]);
                if (!systemFont && !BitmapFont.getInstance().getHasBitmapFont(i)) {
                    a = new OImageTextButton(I,w,"",!systemFont);
                    this.sp.addChild(a);
                    a.init();
                    a.btn.setTransparencyFiltering(true)
                } else {
                    a = new ONButton(I,w,"",!systemFont);
                    this.sp.addChild(a);
                    a.setTransparencyFiltering(true)
                }
                n = {
                    btn: a,
                    icon: null,
                    btnPos: [h, l],
                    text: null,
                    textPos: null
                };
                if (o.length > 3 && o[3] == "1") {
                    a.setInfo(I, w, i);
                    a.setTextColor(tv.data.System.FontUiColor);
                    a.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor)
                } else if (o.length > 3 && o[3] == "0") {
                    r = new OFlowText(i,!systemFont);
                    r.setColor(tv.data.System.FontUiColor);
                    r.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
                    this.sp.addChild(r);
                    n.text = r;
                    n.textPos = [parseInt(o[4]), parseInt(o[5])]
                }
            } else {
                if (!systemFont && !BitmapFont.getInstance().getHasBitmapFont(i)) {
                    a = new OImageTextButton(this.image1,this.image2,utils.madeString(i, 0, 0, true),!systemFont);
                    this.sp.addChild(a);
                    a.init();
                    a.btn.setTransparencyFiltering(true)
                } else {
                    a = new ONButton(this.image1,this.image2,utils.madeString(i, 0, 0, true),!systemFont);
                    this.sp.addChild(a);
                    a.setTransparencyFiltering(true)
                }
                a.setTextSize(tv.data.System.FontSize);
                a.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor);
                n = {
                    btn: a,
                    icon: null,
                    text: null,
                    btnPos: null,
                    textPos: null
                }
            }
            a.addClick(this.clickChoice, t[e].index, this);
            if (t[e].needIcon) {
                s = new OBitmap(this.iconImg);
                this.sp.addChild(s);
                n.icon = s
            }
            this.usedList.push(n);
            if (g > 0) {
                g += this.choiceSpace
            }
            g += a.height
        }
        var _ = (v - g) / 2;
        if (u != -2001) {
            _ = 0
        }
        y = this.usedList.length;
        for (e = 0; e < y; e++) {
            a = this.usedList[e].btn;
            s = this.usedList[e].icon;
            r = this.usedList[e].text;
            if (this.usedList[e].btnPos) {
                h = this.usedList[e].btnPos[0];
                l = this.usedList[e].btnPos[1]
            } else {
                h = c == -2001 ? (gGameWidth - a.width) / 2 : c;
                if (u == -2001) {
                    l = _
                } else {
                    l = u + _
                }
            }
            a.setPosition(h, l);
            if (s) {
                s.setPosition(h, l + (a.height - s.height) / 2)
            }
            if (r) {
                r.setPosition(h + this.usedList[e].textPos[0], l + this.usedList[e].textPos[1])
            }
            _ += a.height + this.choiceSpace
        }
        this.waiting = true
    }
    ;
    this.setupTimeBar = function(t, e, i, a, s, n) {
        this.sp.setVisible(true);
        this.sp.fadeTo(1, 0);
        var r = {
            type: 1,
            bg: "Graphics/Other/" + t,
            cover: "Graphics/Other/" + e,
            value: i,
            max: i,
            enableEdit: false
        };
        o = new OScrollBar(r);
        o.setPosition(s, n);
        this.sp.setChildIndex(o, this.usedList.length + 1)
    }
    ;
    this.updateTimeBar = function(t, e) {
        if (o == null)
            return;
        o.setValue(e, t);
        o.moveBar()
    }
    ;
    this.updateMessage = function(t) {
        r = utils.TextAnalysis(t);
        var e = "";
        while (true) {
            if (r.length <= 0) {
                break
            }
            var i = r.substr(0, 1);
            r = r.substring(1, r.length);
            var a = i.charCodeAt(0);
            if (a == 208) {
                var s = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                r = tv.system.vars.getVar(s - 1) + r
            } else if (a == 209) {
                var s = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                r = tv.system.varsEx.getVar(s - 1) + r
            } else if (a == 210) {
                var s = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                r = utils.madeString(tv.system.string.getVar(s - 1), 0, 210) + r
            } else {
                e += i
            }
        }
        return e
    }
    ;
    this.TextToTemp = function(t, e, i) {
        var a = r.substring(r.indexOf(t) + 1, r.indexOf(e));
        r = r.substring(a.length + t.length + e.length, r.length);
        var s = a.replaceAll(i, "$1");
        var n = s.replaceAll(" ", "");
        return n
    }
    ;
    this.closeTimeBar = function() {
        if (o) {
            o.dispose()
        }
    }
    ;
    this.dispose = function() {
        this.closeChoice();
        if (this.sp) {
            this.sp.dispose();
            this.sp = null
        }
    }
    ;
    this.closeChoice = function() {
        this.disposeChoice();
        this.sp.setVisible(false);
        this.waiting = false
    }
}

function CButtonChoice() {
    this.index = -1;
    this.usedList = new Array;
    this.waiting = false;
    this.sp = new OContainer(gGameWidth,gGameHeight);
    this.sp.setVisible(false);
    SAL_setElementIndex(g, this.sp.element, 3800);
    this.sp.setPosition(gGameX, 0);
    this.isFinish = function() {
        return !this.waiting
    }
    ;
    this.setupChoice = function(t) {
        if (t == null || t.length <= 0) {
            return
        }
        var e = tv.data.System.Buttons.length;
        for (var i = 0; i < t.length; i++) {
            if (!t[i] || t[i].index > e) {
                continue
            }
            var a = tv.data.System.Buttons[t[i].index];
            if (a == null || a.image1.IsNil() && a.image2.IsNil()) {
                continue
            }
            var s = new ONButton("Graphics/Button/" + a.image1,"Graphics/Button/" + a.image2);
            s.setTransparencyFiltering(true);
            this.sp.addChild(s);
            s.setPosition(t[i].x, t[i].y);
            s.addClick(this.clickButton, i, this);
            this.usedList.push(s)
        }
        this.sp.setVisible(true);
        this.sp.fadeTo(1, 0);
        this.waiting = true
    }
    ;
    this.clickButton = function(t) {
        this.index = t;
        this.closeChoice()
    }
    ;
    this.dispose = function() {
        this.closeChoice();
        if (this.sp) {
            this.sp.dispose();
            this.sp = null
        }
    }
    ;
    this.closeChoice = function() {
        this.waiting = false;
        this.sp.setVisible(false);
        for (var t = 0; t < this.usedList.length; t++) {
            this.usedList[t].dispose()
        }
        this.usedList.length = 0
    }
}

function CRotate() {
    this.saveData = function(t) {
        for (var e = 0; e < tv.canvas.MAX_LAYER; e++) {
            var i = tv.canvas.GamePictrue[e];
            var a = {};
            if (i && i.rotateType > -1) {
                a.haveRotate = 1;
                a.totalFrams = 1;
                a.currentFrams = 1;
                a.RotateX = i.rotateCenterX;
                a.RotateY = i.rotateCenterY;
                a.type = i.rotateType;
                a.totalAngle = i.rotation;
                a.currentAngle = i.rotation;
                t.push(a)
            } else {
                a.haveRotate = 0;
                t.push(a)
            }
        }
    }
    ;
    this.loadData = function(t) {
        if (!t) {
            return
        }
        for (var e = 0; e < tv.canvas.MAX_LAYER; e++) {
            var i = tv.canvas.GamePictrue[e];
            var a = t.shift();
            if (!i) {
                continue
            }
            if (a.haveRotate == 1 && !isNaN(a.type) && a.type >= 0) {
                i.rotateImage(a.totalAngle, 1, a.RotateX, a.RotateY, a.type)
            }
        }
    }
}
var crotate = new CRotate;
var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(t) {
    return typeof t
}
: function(t) {
    return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
}
;
var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function(t) {
    return typeof t === "undefined" ? "undefined" : _typeof2(t)
}
: function(t) {
    return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof2(t)
}
;

function CMessage() {
    this.lineHeight = BitmapFont.getInstance().fontHeight;
    this.bitMapFontArr = new Array;
    this.nameText = null;
    if (tv.data.System.FontSize > 34) {
        tv.data.System.FontSize = 34
    }
    this.view = new OShowContainer(gGameWidth,gGameHeight);
    this.view.setPosition(gGameX, 0);
    var F = Math.floor(this.lineHeight * 1.5);
    var D = tv.data.System.MessageBox;
    var k = "Graphics/UI/" + D.Talk.backimage;
    var V = "Graphics/UI/" + D.Name.backimage;
    var P = new OBitmap(k);
    this.view.setChildIndex(P, 1);
    P.setPosition(D.Talk.backX, D.Talk.backY);
    var B = new OBitmap(V);
    this.view.setChildIndex(B, 4);
    B.setPosition(parseInt(D.Talk.backX) + parseInt(D.Name.backX), parseInt(D.Talk.backY) + parseInt(D.Name.backY));
    var r = new OBitmap;
    this.view.setChildIndex(r, 2);
    r.setVisible(false);
    if (D.faceInMessageBox() && !D.Talk.FaceBorderImage.IsNil()) {
        r.setUrl("Graphics/UI/" + D.Talk.FaceBorderImage)
    }
    var d = new OBitmap;
    this.view.setChildIndex(d, 3);
    d.setVisible(false);
    var O = false;
    this.isCMClose = false;
    var m = "";
    var R = "";
    var N = tv.data.System.FontTalkColor;
    var o = false;
    var U = false;
    var M;
    var W = false;
    this.drawSpeed = 0;
    var p = 0;
    var v = 0;
    var G = false;
    var S = false;
    var I = false;
    var w = 0;
    var y = 0;
    var E = 0;
    var H = 0;
    var _ = 0;
    var z;
    var X = false;
    var s = "";
    this.isRoll = false;
    this.cloneObject = function(t) {
        var e = t.constructor === Array ? [] : {};
        for (var i in t) {
            if (t.hasOwnProperty(i)) {
                e[i] = _typeof(t[i]) === "object" ? this.cloneObject(t[i]) : t[i]
            }
        }
        return e
    }
    ;
    this.msgboxFadeIn = function() {
        this.view.setVisible(true)
    }
    ;
    this.setFontVisible = function(t) {
        if (this.nameText) {
            this.nameText.setVisible(t)
        }
        if (this.bitMapFontArr.length > 0) {
            for (var e = 0; e < this.bitMapFontArr.length; e++) {
                if (this.bitMapFontArr[e]) {
                    SAL_setElementVisible(this.bitMapFontArr[e], t)
                }
            }
        }
    }
    ;
    this.clearFontDispose = function() {
        this.clearTextBitmapFont();
        this.clearNameBitmapFont()
    }
    ;
    this.msgBoxFadeOut = function() {
        this.view.setVisible(false);
        if (this.bitMapFontArr.length > 0) {
            this.clearFontDispose()
        }
        U = false
    }
    ;
    this.msgScreenRoll = function(c, u) {
        var t = u.split("|");
        var f = new Array;
        var d = t[0];
        if (d == 1) {
            var m = t[1];
            var g = t[2];
            var v = t[3];
            var p = t[4];
            var S = t[5];
            var e = t[2].split(",")[0];
            var i = t[2].split(",")[1];
            var I = t[3].split(",")[0];
            var w = t[3].split(",")[1];
            var y = t[4].split(",")[0];
            var _ = t[4].split(",")[1];
            var b = t[5].split(",")[0];
            var T = t[5].split(",")[1];
            var a, s, n, r;
            switch (parseInt(e)) {
            case 0:
                a = 0;
                break;
            case 1:
                a = gGameWidth / 2;
                break;
            case 2:
                a = gGameWidth;
                break;
            default:
                a = y;
                break
            }
            switch (parseInt(i)) {
            case 0:
                s = 0;
                break;
            case 1:
                s = gGameHeight / 2;
                break;
            case 2:
                s = gGameHeight;
                break;
            default:
                s = _;
                break
            }
            switch (parseInt(I)) {
            case 0:
                n = 0;
                break;
            case 1:
                n = gGameWidth / 2;
                break;
            case 2:
                n = gGameWidth;
                break;
            default:
                n = b;
                break
            }
            switch (parseInt(w)) {
            case 0:
                r = 0;
                break;
            case 1:
                r = gGameHeight / 2;
                break;
            case 2:
                r = gGameHeight;
                break;
            default:
                r = T;
                break
            }
            var o = c.split("\\n");
            var h = 0;
            var l = 0;
            if (o.length > 0) {
                var L = new Array;
                var A = new Array;
                for (var C = 0; C < o.length; C++) {
                    var x = utils.TextAnalysisNull(o[C]);
                    A = measureText(x);
                    L.push(A[0]);
                    f.push(x)
                }
                L.sort(this.sortNumber);
                h = L[0];
                l = o.length * this.lineHeight
            } else {
                h = BitmapFont.getInstance().blankSpaceW;
                l = F
            }
            if (a <= 0 || parseInt(e) == 3) {
                a = a - D.Talk.textX
            } else if (parseInt(e) == 1) {
                a = a - D.Talk.textX - h / 2
            } else {
                a = a - D.Talk.textX - h
            }
            if (s <= 0 || parseInt(i) == 3) {
                s = s - D.Talk.textY
            } else if (parseInt(i) == 1) {
                s = s - D.Talk.textY - l / 2
            } else {
                s = s - D.Talk.textY - l
            }
            if (n <= 0 || parseInt(I) == 3) {
                n = n - D.Talk.textX
            } else if (parseInt(I) == 1) {
                n = n - D.Talk.textX - h / 2
            } else {
                n = n - D.Talk.textX - h
            }
            if (r <= 0 || parseInt(w) == 3) {
                r = r - D.Talk.textY
            } else if (parseInt(w) == 1) {
                r = r - D.Talk.textY - l / 2
            } else {
                r = r - D.Talk.textY - l
            }
            this.sx = a;
            this.sy = s;
            this.ex = n;
            this.ey = r;
            this.msgRollFrame = parseInt(m);
            this.msgRollSwitch = parseInt(d)
        } else {}
    }
    ;
    this.megboxClear = function() {
        E = H = 0;
        this.clearFontDispose();
        G = false;
        m = "";
        R = "";
        d.setUrl("");
        r.setUrl("")
    }
    ;
    this.isTalking = function() {
        return m.length > 0
    }
    ;
    this.isShowing = function() {
        return U || m.length > 0
    }
    ;
    this.isShow = function() {
        return P.visible || R.length > 0
    }
    ;
    this.getHeight = function() {
        var t = 0;
        if (this.view.visible || R.length > 0) {
            t = P.height
        }
        return t
    }
    ;
    this.setMessagePosition = function(t) {
        var e = D.Talk.backX;
        var i = D.Talk.backY;
        switch (t) {
        case 0:
            i = D.Talk.backY;
            break;
        case 1:
            i = (gGameHeight - P.height) / 2;
            break;
        case 2:
            i = gGameHeight - (D.Talk.backY + P.height);
            break
        }
        this.setHightMessagePosition(e, i)
    }
    ;
    this.setHightMessagePosition = function(t, e) {
        P.setPosition(t, e);
        var i = parseInt(t) + parseInt(D.Name.backX);
        var a = parseInt(e) + parseInt(D.Name.backY);
        if (M[16]) {
            var s = M[16].split("|");
            if (s[5]) {
                var n = s[5].split(",")
            } else {
                var n = [0, 0, 0]
            }
            if (parseInt(n[0]) == 1) {
                i = parseInt(n[1]);
                a = parseInt(n[2])
            }
        }
        B.setPosition(i, a)
    }
    ;
    this.Talk = function(t, c) {
        var u = this;
        this.clearFontDispose();
        this.msgboxFadeIn();
        M = this.cloneObject(t);
        var e = k;
        var f = V;
        W = c;
        B.setVisible(t[0].length > 0);
        if (this.nameText) {
            this.nameText.setVisible(t[0].length > 0)
        }
        var i = parseInt(t[6]);
        this.drawSpeed = gloableStaticData.DRAW_TALK_SPEED[i];
        if (GloableData.getInstance().talkSpeedType == gloableStaticData.DRAW_SPEED_TYPE_CENTER) {
            i = GloableData.getInstance().talkSpeedType;
            this.drawSpeed = gloableStaticData.DRAW_TALK_SPEED[i]
        }
        if (GloableData.getInstance().talkSpeedType == gloableStaticData.DRAW_SPEED_TYPE_FAST) {
            this.drawSpeed = 0
        }
        if (localProjectPath) {
            if (i == 1) {
                i = GloableData.getInstance().talkSpeedType;
                this.drawSpeed = gloableStaticData.DRAW_TALK_SPEED[i]
            }
            if (i == 0) {
                this.drawSpeed = 0
            }
        }
        var a = [0];
        if (M[16]) {
            var s = M[16].split("|");
            var d = s[0].split(",");
            var n = s[1].split(",");
            var m = s[2].split(",");
            var v = s[3].split(",");
            if (s[4]) {
                a = s[4].split(",")
            }
            if (m) {
                if (parseInt(m[0]) == 1) {
                    X = true;
                    z = new Array;
                    for (var r = 3; r < 22; r++) {
                        if (tv.canvas.GamePictrue[r]) {
                            var o = new Object;
                            o.x = tv.canvas.GamePictrue[r].x;
                            o.y = tv.canvas.GamePictrue[r].y;
                            o.zoom_x = tv.canvas.GamePictrue[r].scale_x;
                            o.zoom_y = tv.canvas.GamePictrue[r].scale_y;
                            o.opacity = tv.canvas.GamePictrue[r].alpha;
                            z[r] = o
                        }
                    }
                    var h = tv.canvas.GamePictrue[parseInt(m[1])];
                    if (h) {
                        var p = h.x - (h.width * 1.15 - h.width) / 2;
                        var S = h.y - (h.height * 1.15 - h.height) / 2;
                        h.setAlpha(1);
                        h.scaleTo(1.15, 1.15, 5);
                        h.moveTo(p, S, 5)
                    }
                } else {
                    z = null
                }
            } else {
                z = null
            }
            if (v) {
                O = parseInt(v[2]) == 1
            }
            if (d[0] == 1) {
                e = "Graphics/UI/" + d[1]
            }
            P.setUrl(e);
            if (n[0] == 1) {
                this.setHightMessagePosition(parseFloat(n[1]), parseFloat(n[2]))
            } else {
                if (tv.canvas.msgIndex == 1) {
                    this.setHightMessagePosition(D.Talk.backX, D.Talk.backY)
                } else {
                    this.setMessagePosition(parseInt(t[5]))
                }
            }
        } else {
            P.setUrl(e);
            this.setMessagePosition(parseInt(t[5]))
        }
        P.setVisible(t[7] == "1");
        if (t[0].length > 0) {
            var l = utils.madeString(t[0], 0, 100, true);
            var I = N;
            if (t[1]) {
                var w = t[1].split(",");
                I = new OColorVal(w[0],w[1],w[2])
            }
            if (a[0] == 1) {
                f = "Graphics/UI/" + a[1]
            }
            B.setUrl(f);
            B.setVisible(t[7] == "1" && l.length > 0);
            if (this.nameText && l.length > 0) {
                this.nameText.setText(l);
                this.nameText.setColor(I);
                this.nameText.setVisible(true)
            } else if (!this.nameText && l.length > 0) {
                this.nameText = new OFlowText(l,!systemFont);
                var y = new OText(l,!systemFont);
                this.nameText.lineHeight = y.textHeight;
                this.nameText.setText(l);
                this.nameText.setTextSize(tv.data.System.FontSize);
                this.view.setChildIndex(this.nameText.element, 30);
                this.nameText.setText(l);
                this.nameText.setColor(I);
                if (tv.data.System.effectStyle != 0) {
                    this.nameText.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor)
                }
                this.nameText.setVisible(true)
            } else if (l.length <= 0) {
                if (this.nameText) {
                    this.nameText.setText("");
                    this.nameText.setVisible(false)
                }
            }
            var _, b;
            if (D.Name.isCenter) {
                var T = [0, 0];
                if (this.nameText) {
                    T = [this.nameText.textWidth, this.nameText.textHeight]
                }
                _ = parseInt(B.x) + parseInt((B.width - T[0]) / 2);
                b = parseInt(B.y) + parseInt((B.height - T[1]) / 2)
            } else {
                if (M[16]) {
                    var s = M[16].split("|");
                    if (s[5]) {
                        var L = s[5].split(",")
                    } else {
                        var L = [0, 0, 0]
                    }
                    if (parseInt(L[0]) == 1) {
                        B.x = L[1];
                        B.y = L[2]
                    }
                } else {
                    B.x = parseInt(P.x) + parseInt(D.Name.backX);
                    B.y = parseInt(P.y) + parseInt(D.Name.backY)
                }
                _ = parseInt(B.x) + D.Name.textX;
                b = parseInt(B.y) + D.Name.textY
            }
            if (this.nameText) {
                this.nameText.setPosition(_, b)
            }
        } else {
            B.setVisible(false);
            if (this.nameText) {
                this.nameText.setText("");
                this.nameText.setVisible(false)
            }
        }
        if (M[17] && parseInt(M[17]) != 0) {
            this.isRoll = true;
            this.msgScreenRoll(M[2], M[17])
        } else {
            this.isRoll = false
        }
        R = t[2];
        if (R.length <= 0) {
            G = true
        } else {
            G = false
        }
        this.initFaceAttribute(t);
        if (t[3].length > 0) {
            var A = "Graphics/Face/" + t[3];
            var C = fileListFato(A);
            var x = SAL_checkSRCPreloaded(g, C);
            if (!x) {
                SAL_preload(g, [C], function() {
                    u.setFacePos(t)
                })
            } else {
                this.setFacePos(t)
            }
        }
        U = true;
        E = 0;
        H = 0;
        this.updateMessage(W)
    }
    ;
    this.initFaceAttribute = function(t) {
        d.setVisible(t[3].length > 0);
        r.setVisible(D.FaceStyle == 1 && t[3].length > 0);
        p = 0
    }
    ;
    this.setFacePos = function(t) {
        d.setUrl("Graphics/Face/" + t[3]);
        if (D.FaceStyle == 1) {
            r.setUrl("Graphics/UI/" + D.Talk.FaceBorderImage);
            var e = r.width / parseInt(d.width);
            var i = r.height / parseInt(d.height);
            var a = Math.min(e, i);
            a = a > 1 ? 1 : a;
            d.setSize(Math.floor(parseInt(d.width) * a), Math.floor(parseInt(d.height) * a))
        }
        var s = 0;
        var n = 0;
        if (t[4] == "0") {
            switch (D.FaceStyle) {
            case 0:
                p = d.width;
                s = P.x;
                n = P.y + P.height - d.height;
                break;
            case 1:
                r.setPosition(P.x + D.Talk.FaceBorderX, P.y + D.Talk.FaceBorderY);
                s = r.x;
                n = r.y + (r.height - d.height);
                break;
            case 2:
                s = P.x;
                n = P.y - d.height;
                break
            }
        } else {
            switch (D.FaceStyle) {
            case 0:
                s = P.x + P.width - d.width;
                n = P.y + P.height - d.height;
                break;
            case 1:
                r.setPosition(P.x + P.width - D.Talk.FaceBorderX - r.width, P.y + D.Talk.FaceBorderY);
                s = r.x;
                n = r.y + (r.height - d.height);
                break;
            case 2:
                s = P.x + P.width - d.width;
                n = P.y - d.height;
                break
            }
        }
        d.setPosition(s, n);
        o = false
    }
    ;
    this.setLevel = function(t) {
        SAL_setElementIndex(g, this.view.element, t)
    }
    ;
    this.dispose = function() {
        tv.canvas.msgIndex = 0;
        if (this.view) {
            this.view.dispose();
            this.view = null
        }
    }
    ;
    this.showFastTip = function() {
        if (!(tv.scene instanceof SGame)) {
            return
        }
        if (downTime <= FPS * .3) {
            return
        }
        if (fastImg == null) {
            return
        }
        SAL_setElementVisible(fastImg, true);
        var t = srcLists[fastTime];
        SAL_resetElement(fastImg, t);
        SAL_setPosition(fastImg, onTouchX - 199 / 2 + gGameX, onTouchY - 190 / 2 - 20);
        fastTime += 1;
        if (fastTime > 8) {
            fastTime = 8
        }
    }
    ;
    this.update = function() {
        if (!o) {
            this.updateMessage(W)
        }
        this.showFastTip()
    }
    ;
    this.TerminateMessage = function() {
        if (O) {
            tv.canvas.msgIndex = 0;
            this.msgBoxFadeOut()
        }
        if (X) {
            X = false;
            for (var t = 3; t < 22; t++) {
                if (tv.canvas.GamePictrue[t]) {
                    var e = tv.canvas.GamePictrue[t];
                    e.zoom_x = z[t].zoom_x;
                    e.zoom_y = z[t].zoom_y;
                    e.x = z[t].x;
                    e.y = z[t].y;
                    e.opacity = z[t].opacity
                }
            }
        }
        R = "";
        U = false;
        m = "";
        v = 0;
        G = false;
        S = false
    }
    ;
    this.isSpeedRead = function() {
        return onTouchLong || tv.system.quickRun
    }
    ;
    this.isNextMessage = function() {
        return onClick()
    }
    ;
    this.isAutoNext = function() {
        return tv.system.autoRun
    }
    ;
    this.clearTextBitmapFont = function() {
        if (!this.bitMapFontArr || this.bitMapFontArr.length <= 0) {
            return
        }
        for (var t = 0; t < this.bitMapFontArr.length; t++) {
            this.bitMapFontArr[t] && SAL_destroyElement(this.bitMapFontArr[t])
        }
        this.bitMapFontArr.length = 0
    }
    ;
    this.clearNameBitmapFont = function() {
        if (this.nameText) {
            this.nameText.setText("")
        }
    }
    ;
    this.updateMenu = function() {}
    ;
    this.buttonClick = function(t) {
        if (t.tag === "Save") {
            tv.scene = new SSavefile(false,true)
        } else if (t.tag === "Load") {
            tv.scene = new SSavefile(false,false)
        } else if (t.tag === "Menu") {
            if (tv.data.System.MenuIndex == 10001 || tv.data.System.Cuis == null || tv.data.System.Cuis.length <= 0) {
                tv.scene = new SMenu
            } else {
                tv.scene = new SCUI(tv.data.System.MenuIndex)
            }
        } else if (t.tag === "Replay") {
            tv.scene = new SReplay
        } else if (t.tag === "Auto") {
            tv.system.autoRun = !tv.system.autoRun
        }
    }
    ;
    this.updateMessage = function(c) {
        if (S && !c && !this.isSpeedRead()) {
            if (this.isNextMessage()) {
                S = false;
                G = m.length <= 0
            }
            return
        }
        if (G) {
            if (w > 0) {
                w -= 1
            }
            if (this.isAutoNext() && w <= 0 && m.length <= 0) {
                this.TerminateMessage();
                E = 0;
                H = 0;
                G = false
            }
            if (this.isSpeedRead() || this.isNextMessage()) {
                if (m.length <= 0 && R.length <= 0) {
                    this.TerminateMessage()
                }
                E = 0;
                H = 0;
                G = false
            }
            if (y > 0) {
                y -= 1
            }
            if (y && y <= 0) {
                G = false
            }
            return
        }
        var t = true;
        if (this.isSpeedRead()) {
            t = false;
            this.drawSpeed = 0;
            v = 0;
            if (this.bitMapFontArr.length <= 0) {
                E = 0;
                H = 0
            }
        }
        if (this.isRoll) {
            if (this.isNextMessage()) {
                this.drawSpeed = 0;
                v = 0
            }
            t = false
        }
        if (m.length > 0) {
            this.loadFontReadSpeedSetting();
            if (this.isNextMessage()) {
                t = false;
                this.drawSpeed = 0;
                v = 0
            }
            if (v > 0 && !this.isSpeedRead()) {
                v -= 1;
                return
            }
            if (_ == 102) {
                t = false
            }
            var e;
            while (true) {
                if (m.length <= 0) {
                    break
                }
                if ((m.indexOf("\\k[") != -1 || m.indexOf("\\t[") != -1 || m.indexOf("\\v[") != -1 || m.indexOf("\\c[") != -1 || m.indexOf("\\x[") != -1) && m.indexOf("]") != -1) {
                    m = utils.madeString(m);
                    m = utils.TextAnalysis(m)
                }
                e = m.substr(0, 1);
                m = m.substring(1, m.length);
                var i = e.charCodeAt(0);
                if (i == 200) {
                    if (!systemFont) {
                        E = 0;
                        H += F
                    }
                } else if (i == 201) {
                    var u = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                    v += Math.ceil(u)
                } else if (i == 202) {
                    N = new OColorVal(this.TextToTemp("[", "]", /\[([0-9]+,[0-9]+,[0-9]+)]/g))
                } else if (i == 203) {
                    this.drawSpeed = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g))
                } else if (i == 204) {
                    v += Math.ceil(10 / 2)
                } else if (i == 205) {
                    v += Math.ceil(5 / 2)
                } else if (i == 206) {
                    this.TerminateMessage();
                    break
                } else if (i == 207) {
                    if (t) {
                        S = true;
                        break
                    }
                    I = true
                } else if (i == 208) {
                    var a = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                    m = tv.system.vars.getVar(a - 1) + m
                } else if (i == 209) {
                    var a = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                    m = tv.system.varsEx.getVar(a - 1) + m
                } else if (i == 210) {
                    var a = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                    m = utils.madeString(tv.system.string.getVar(a - 1), 0, 210) + m
                } else if (i == 211) {
                    var s = parseInt(this.TextToTemp("[", "]", /\[([0-9]+)]/g));
                    m = m.substr(s);
                    while (s > 0) {
                        s--;
                        m = "□" + m
                    }
                    break
                } else {
                    if (i == 32) {
                        if (BitmapFont.getInstance().blankSpaceW) {
                            E += BitmapFont.getInstance().blankSpaceW
                        } else {
                            E += 6
                        }
                        this.bitMapFontArr.push(0)
                    } else {
                        var n;
                        var r = BitmapFont.getInstance().bitMapDataArr[encodeURIComponent(e)];
                        if (!systemFont && !r) {
                            var o = new ImageFont(e,tv.data.System.FontSize);
                            o.setColor(N);
                            n = o.element;
                            if (tv.data.System.effectStyle != 0) {
                                o.setTextStyle(tv.data.System.effectStyle, tv.data.System.effectColor)
                            }
                        } else {
                            n = BitmapFont.getInstance().findBitmapTxt(e, N.getColor());
                            if (clientType == 6 && globalFont && fontSimple) {
                                SAL_setTextFont(n, fontSimple)
                            }
                        }
                        this.view.setChildIndex(n, 42);
                        if (tv.data.System.effectStyle != 0) {
                            SAL_setTextStyle(n, {
                                style: tv.data.System.effectStyle,
                                color: tv.data.System.effectColor.getColor(),
                                offsetX: 1,
                                offsetY: 1
                            })
                        }
                        if (this.isRoll) {
                            SAL_setPosition(n, parseInt(this.sx + E), parseInt(this.sy + H))
                        } else {
                            SAL_setPosition(n, parseInt(P.x + D.Talk.textX + p + E), parseInt(P.y + D.Talk.textY + H))
                        }
                        if (this.isRoll && this.msgRollSwitch) {
                            var f = SALAction({
                                type: "moveTo",
                                targetX: this.ex + E - gGameX,
                                targetY: this.ey + H,
                                duration: this.msgRollFrame * 1e3 / FPS
                            });
                            SAL_runAction(n, f)
                        }
                        var h = SAL_getTextSize(n)[0];
                        if (!systemFont && !r) {
                            h = SAL_getElementWidth(n)
                        }
                        this.bitMapFontArr.push(n);
                        E += h;
                        if (systemFont) {
                            var l = tv.data.System.MessageBox.Talk.talkWidth - h;
                            if (M[3] && d) {
                                if (M[4] == "1") {
                                    l -= tv.data.System.MessageBox.Talk.talkWidth + tv.data.System.MessageBox.Talk.textX - (960 - d.width)
                                } else if (M[4] == "0") {
                                    l -= d.width
                                }
                            }
                            if (E > l) {
                                E = 0;
                                H += F
                            }
                        }
                    }
                    if (_ > 0) {
                        v = 0
                    } else {
                        v += this.drawSpeed
                    }
                }
                if (m.length <= 0) {
                    m = "";
                    G = true;
                    if (this.isRoll || this.msgRollSwitch) {
                        y = this.msgRollFrame
                    }
                }
                if (t) {
                    break
                }
            }
        }
        if (R.length > 0) {
            U = true;
            this.refresh()
        }
    }
    ;
    this.refresh = function() {
        v = 0;
        this.clearTextBitmapFont();
        N = tv.data.System.FontTalkColor;
        s = m = utils.TextAnalysis(R);
        G = m.length <= 0;
        var t = m;
        t = this.replayAys(t);
        var e = utils.madeString(t, 0, 210);
        e = utils.TextAnalyRemove(e);
        var i = tv.system.replay.replay.length;
        if (tv.system.replay.replay[i - 2] != e) {
            if (M[0].length > 0) {
                var a = utils.madeString(M[0], 0, 100, true);
                tv.system.replay.Add(a)
            }
            tv.system.replay.Add(e);
            tv.system.replay.Add(" ")
        }
        if (this.isAutoNext()) {
            w = Math.floor(e.length / 9 * FPS);
            w = w < 90 ? 90 : w
        }
        R = ""
    }
    ;
    this.replayAys = function(t) {
        return t.replaceAll(/.\[([0-9]+,[0-9]+,[0-9]+)\]/g, "")
    }
    ;
    this.TextToTemp = function(t, e, i) {
        var a = m.substring(m.indexOf(t) + 1, m.indexOf(e));
        m = m.substring(a.length + t.length + e.length, m.length);
        var s = a.replaceAll(i, "$1");
        var n = s.replaceAll(" ", "");
        return n
    }
    ;
    this.TextToTemp2 = function(t, e, i, a) {
        var s = t.substring(t.indexOf(e) + 1, t.indexOf(i));
        t = t.substring(s.length + e.length + i.length, t.length);
        var n = new Array(s.replaceAll(a, "$1"),t);
        return n
    }
    ;
    this.saveArgs = function(t) {
        if (M == null) {
            t.push(0 + "|")
        } else {
            t.push(1 + "|");
            t.push(M.length + "|");
            for (var e = 0; e < M.length; ++e) {
                if (e == 16 || e == 17) {
                    if (M[e].indexOf("|") !== -1) {
                        M[e] = M[e].replace(/\|/g, "?")
                    }
                }
                t.push(M[e] + "|")
            }
        }
    }
    ;
    this.loadArgs = function(t) {
        E = 0;
        H = 0;
        var e = parseInt(t.shift()) != 0;
        if (e) {
            var i = new Array(parseInt(t.shift()));
            for (var a = 0; a < i.length; ++a) {
                i[a] = t.shift();
                if (a == 16 || a == 17) {
                    if (i[a].indexOf("?") !== -1) {
                        i[a] = i[a].replace(/\?/g, "|")
                    }
                }
            }
        }
    }
    ;
    this.sortNumber = function(t, e) {
        return e - t
    }
    ;
    this.loadFontReadSpeedSetting = function() {
        if (GloableData.getInstance().talkSpeedType == gloableStaticData.DRAW_SPEED_TYPE_FAST) {
            _ = 102
        } else if (GloableData.getInstance().talkSpeedType == gloableStaticData.DRAW_SPEED_TYPE_CENTER) {
            _ = 101
        } else {
            _ = 0
        }
    }
}

function CChatLayer(t) {
    ODisplayObject.call(this);
    this.id = t.id;
    this.width = parseInt(t.width);
    this.height = parseInt(t.height);
    this.element = SALContainer(this.width, this.height);
    this.setPosition(parseInt(t.startX), parseInt(t.startY));
    this.setAlpha(t.opacity);
    this.content = null;
    this.contentHeight = 0;
    this.chatItemList = new Array;
    this.border = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
    };
    this.isClick = false;
    this.scrollValue = 8;
    this.scrollFrames = 8;
    this.offsetY = 0;
    this.init = function(t) {
        if (!t) {
            return
        }
        var e = parseInt(t.areaLeft);
        if (!isNaN(e)) {
            this.border.left = parseInt(t.areaLeft);
            this.border.right = parseInt(t.areaRight);
            this.border.top = parseInt(t.areaUp);
            this.border.bottom = parseInt(t.areaDown)
        }
        var i = t.width - this.border.left - this.border.right;
        var a = t.height - this.border.top - this.border.bottom;
        this.content = new OSlideContainer(i,a);
        SAL_addElement(this.element, this.content.element);
        SAL_setElementBlockTouch(this.content.element, false);
        SAL_setPosition(this.content.element, this.border.left, this.border.top)
    }
    ;
    this.preLoadItem = function(t, e) {
        var i = this.addTask(t);
        SAL_preload(g, i, function(t) {
            if (t == 1) {
                e && e()
            }
        }, 8)
    }
    ;
    this.addChatItem = function(t, e) {
        var i = new CChatItem(t);
        this.contentHeight += i.init(this.contentHeight, this.content, e);
        this.content.currentHeight = this.contentHeight;
        if (this.contentHeight - this.content.height > 0) {
            if (t.length > 1) {
                this.content.touchScrollBar(0, this.content.height - this.contentHeight - this.content.currentOffsetY)
            } else {
                this.offsetY = (this.content.height - this.contentHeight - this.content.currentOffsetY) / this.scrollFrames;
                this.scrollValue = 0
            }
        }
        this.chatItemList.push(i)
    }
    ;
    this.addChatItemList = function(i) {
        var t = [], e;
        for (var a = 0; a < i.length; a++) {
            e = i[a];
            if (!e) {
                continue
            }
            var s = this.addTask(e);
            if (!s) {
                continue
            }
            for (var n = 0; n < s.length; n++) {
                if (s[n] && t.indexOf(s[n]) < 0) {
                    t.push(s[n])
                }
            }
        }
        var r = this;
        var o = function t() {
            for (var e = i.length > 20 ? i.length - 20 : 0; e < i.length; e++) {
                r.addChatItem(i[e], false)
            }
        };
        SAL_preload(g, t, function(t) {
            if (t == 1) {
                o()
            }
        }, 8)
    }
    ;
    this.addTask = function(t) {
        if (!t) {
            return
        }
        var e = [];
        var i;
        var a = parseInt(t.type);
        if (tv.DataVer <= 104) {
            i = fileListFato("Graphics/face/" + t.head);
            if (t.pos != 2 && i) {
                e.push(i)
            }
            if (a == 2) {
                i = fileListFato("Graphics/chat/" + t.picPath);
                if (i) {
                    e.push(i)
                }
                i = fileListFato("Graphics/chat/" + t.content);
                if (i) {
                    e.push(i)
                }
            } else {
                i = fileListFato("Graphics/UI/" + t.framePic);
                if (i) {
                    e.push(i)
                }
                if (a == 3) {
                    if (t.pos == 1) {
                        i = chatVoiceLeft
                    } else {
                        i = chatVoiceRight
                    }
                    e.push(i)
                }
            }
        } else {
            var s = tv.data.chatCharacter.GetChatCharacterByID(t.characterID);
            if (s) {
                i = fileListFato("Graphics/face/" + s.facePath);
                if (s.layoutType != 2 && i) {
                    e.push(i)
                }
                if (a == 2) {
                    i = fileListFato("Graphics/chat/" + s.picPath);
                    if (i) {
                        e.push(i)
                    }
                    i = fileListFato("Graphics/chat/" + t.picPath);
                    if (i) {
                        e.push(i)
                    }
                    i = fileListFato("Graphics/chat/" + t.content);
                    if (i) {
                        e.push(i)
                    }
                } else {
                    i = fileListFato("Graphics/UI/" + s.bgPath);
                    if (i) {
                        e.push(i)
                    }
                    if (a == 3) {
                        if (s.pos == 1) {
                            i = chatVoiceLeft
                        } else {
                            i = chatVoiceRight
                        }
                        e.push(i)
                    }
                }
            }
        }
        return e
    }
    ;
    this.updateContent = function() {
        if (this.scrollValue >= this.scrollFrames || !this.content) {
            return
        }
        this.content.touchScrollBar(0, this.offsetY);
        this.scrollValue++
    }
    ;
    this.dispose = function() {
        this.clearItems();
        if (this.element) {
            SAL_destroyElement(this.element);
            this.element = null
        }
    }
    ;
    this.clearItems = function() {
        this.contentHeight = 0;
        if (this.chatItemList && this.chatItemList.length > 0) {
            for (var t = 0; t < this.chatItemList.length; t++) {
                this.chatItemList[t].dispose()
            }
            this.chatItemList = null
        }
    }
    ;
    this.init(t)
}

function CFilterLayer() {
    var i = null;
    this.subFilterLayerList = [];
    this.index = "";
    this.maskImg = "";
    this.maskPath = "";
    this.maskElement = "";
    this.effectiveLayer = null;
    this.needRender = false;
    this.currentMaterialData = null;
    this.originalMaterialData = null;
    this.deltaMaterialData = null;
    this.duration = -1;
    this.isUpdatingMaterial = false;
    this.alpha = 1;
    this.addSubFilter = function(t) {
        t.layerIndex = this.index;
        this.subFilterLayerList.push(t)
    }
    ;
    this.addFilterToViewport = function(t) {
        if (t.FboFilter && t.activeState) {
            var e = this.getFilterIndex(t);
            tv.canvas.viewport.setChildIndex(t.FboFilter, e)
        }
    }
    ;
    this.getFilterIndex = function(t) {
        return t.layerIndex
    }
    ;
    this.removeFilter = function() {
        var t = this.subFilterLayerList.length;
        for (var e = 0; e < t; e++) {
            var i = this.subFilterLayerList[e];
            i.activeState = false
        }
    }
    ;
    this.render = function() {
        var e = this;
        var i = this.maskElement ? this.maskElement.element : this.maskImg;
        this.subFilterLayerList.forEach(function(t) {
            if (t.FboFilter) {
                SAL_setMask(t.FboFilter.element, i, e.materialData)
            }
        })
    }
    ;
    this.getFreeFilter = function() {
        var t = tv.canvas.filterArray;
        for (var e = 0; e < t.length; e++) {
            var i = t[e];
            if (!i.activeState) {
                this.addSubFilter(i);
                return i
            }
        }
        var a = this.createFilter();
        this.addSubFilter(a);
        return a
    }
    ;
    this.diffMaterialData = function(t) {
        var e = false;
        if (this.materialData.type != t.type) {
            e = true
        }
        if (this.materialData) {
            e = !(JSON.stringify(this.materialData) == JSON.stringify(t))
        }
        return e
    }
    ;
    this.createFilter = function() {
        var t = new OShowContainer(gGameWidth,gGameHeight);
        var e = {
            FboFilter: t,
            activeState: true,
            layerIndex: -1,
            viewportIndex: -1
        };
        tv.canvas.filterArray.push(e);
        return e
    }
    ;
    this.update = function() {
        if (!this.isUpdatingMaterial && !this.needRender) {
            return
        }
        this.updateMaterial();
        var t = this.maskElement ? this.maskElement.element : this.maskImg;
        for (var e = 0; e < this.subFilterLayerList.length; e++) {
            var i = this.subFilterLayerList[e];
            SAL_setMask(i.FboFilter.element, t, this.originalMaterialData)
        }
        if (this.needRender) {
            this.needRender = false
        }
    }
    ;
    this.getMaterialDeltaValue = function() {
        if (!this.originalMaterialData || !this.materialData) {
            this.isUpdatingMaterial = false;
            return
        }
        this.deltaMaterialData = JSON.parse(JSON.stringify(this.originalMaterialData));
        var t = (this.materialData.offsetX - this.originalMaterialData.offsetX) / this.duration;
        var e = (this.materialData.offsetY - this.originalMaterialData.offsetY) / this.duration;
        var i = (this.materialData.alpha - this.originalMaterialData.alpha) / this.duration;
        var a = (this.materialData.r - this.originalMaterialData.r) / this.duration;
        var s = (this.materialData.g - this.originalMaterialData.g) / this.duration;
        var n = (this.materialData.b - this.originalMaterialData.b) / this.duration;
        var r = (this.materialData.gray - this.originalMaterialData.gray) / this.duration;
        var o = (this.materialData.hue - this.originalMaterialData.hue) / this.duration;
        var h = (this.materialData.zoomX - this.originalMaterialData.zoomX) / this.duration;
        var l = (this.materialData.zoomY - this.originalMaterialData.zoomY) / this.duration;
        this.deltaMaterialData.offsetX = t;
        this.deltaMaterialData.offsetY = e;
        this.deltaMaterialData.alpha = i;
        this.deltaMaterialData.r = a;
        this.deltaMaterialData.g = s;
        this.deltaMaterialData.b = n;
        this.deltaMaterialData.gray = r;
        this.deltaMaterialData.hue = o;
        this.deltaMaterialData.zoomX = h;
        this.deltaMaterialData.zoomY = l;
        this.originalMaterialData.type = this.materialData.type
    }
    ;
    this.updateMaterial = function() {
        if (!this.deltaMaterialData || this.duration <= 0) {
            this.isUpdatingMaterial = false;
            this.originalMaterialData = this.materialData;
            return
        }
        this.duration--;
        this.originalMaterialData.offsetX += this.deltaMaterialData.offsetX;
        this.originalMaterialData.offsetY += this.deltaMaterialData.offsetY;
        this.originalMaterialData.alpha += this.deltaMaterialData.alpha;
        this.originalMaterialData.r += this.deltaMaterialData.r;
        this.originalMaterialData.g += this.deltaMaterialData.g;
        this.originalMaterialData.b += this.deltaMaterialData.b;
        this.originalMaterialData.gray += this.deltaMaterialData.gray;
        this.originalMaterialData.hue += this.deltaMaterialData.hue;
        this.originalMaterialData.zoomX += this.deltaMaterialData.zoomX;
        this.originalMaterialData.zoomY += this.deltaMaterialData.zoomY
    }
    ;
    this.fadeTo = function(t, e, i) {
        this.alpha = t;
        this.isUpdatingMaterial = true;
        this.originalMaterialData = JSON.parse(JSON.stringify(this.materialData));
        this.duration = e / 1e3 * 60;
        this.materialData.alpha = t;
        this.getMaterialDeltaValue()
    }
    ;
    this.dispose = function() {
        if (this.subFilterLayerList.length <= 0) {
            return
        }
        this.index = "";
        this.maskImg = "";
        this.maskPath = "";
        this.materialData = null;
        this.effectiveLayer = null;
        for (var t = 0; t < this.subFilterLayerList.length; t++) {
            var e = this.subFilterLayerList[t];
            e.FboFilter.removeAllRelationship();
            e.FboFilter.dispose();
            tv.canvas.filterArray.splice(tv.canvas.filterArray.indexOf(e), 1)
        }
        this.subFilterLayerList = []
    }
    ;
    Object.defineProperty(this, "materialData", {
        get: function t() {
            return i
        },
        set: function t(e) {
            i = e;
            this.needRender = true
        }
    })
}

function MaterialData() {
    this.type = -1;
    this.duration;
    this.offsetX;
    this.offsetY;
    this.zoomX;
    this.zoomY;
    this.alpha;
    this.mirror;
    this.r;
    this.g;
    this.b;
    this.gray;
    this.hue;
    this.strength = -1;
    this.durationCount = -1;
    this.setStrength = function(t) {
        this.strength = t
    }
    ;
    this.setDuration = function(t) {
        this.duration = t
    }
    ;
    this.setDurationCount = function(t) {
        this.durationCount = t
    }
}

function Popup(t, e) {
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var n = arguments[4];
    OContainer.call(this);
    this.init = function() {
        SAL_setElementIndex(g, this.element, 999999);
        this.setPosition(gGameX, 0);
        this.setBlockTouch(true);
        this.initElement()
    }
    ;
    this.initElement = function() {
        var s = this;
        this.bg = new OBitmap;
        this.title = new OText;
        this.message = new OText;
        var t = function t(e) {
            s.buttonInfo.push(n.button[e]);
            var i = n.button[e];
            var a = new ONButton(i.upPic,i.downPic);
            a.setPosition(i.x, i.y);
            a.addEvent("click", function(t) {
                i.fn()
            });
            s.addChild(a)
        };
        for (var e = 0; e < n.buttonCount; e++) {
            t(e)
        }
        this.addChild(this.bg);
        this.addChild(this.title);
        this.addChild(this.message)
    }
    ;
    this.setTitle = function(t) {
        this.title.setText(t)
    }
    ;
    this.setMessage = function(t) {
        this.message.setText(t)
    }
    ;
    this.dispose = function() {
        SAL_destroyElement(this.element)
    }
    ;
    this.init()
}

function CChatItem(t) {
    this.bubbleViewport = null;
    this.head = null;
    this.name = null;
    this.contentViewport = null;
    this.text = null;
    this.image = null;
    this.imageSource = null;
    this.imageSourceContainer = null;
    this.voiceImage = null;
    this.chatItem = t;
    this.charactorData = null;
    this.info = null;
    this.oSlide = null;
    this.addReplay = true;
    this.init = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        this.addReplay = i;
        if (tv.DataVer <= 104) {
            this.parentW = e.width;
            this.parentH = e.height;
            this.initOldChatItemData()
        } else {
            this.initNewChatItemData()
        }
        t += this.charactorData.bubbleOffY;
        this.oSlide = e;
        this.info = this.getContextInfo(t);
        if (!this.info) {
            return 0
        }
        if (!this.info.content.W || !this.info.content.H) {
            return 0
        }
        this.createElements();
        this.addElementsToContainer();
        this.setElementAttribute(i);
        if (i) {
            var a = utils.madeString(this.chatItem.content, 0);
            a = a.replaceAll("/", "");
            a = a.replaceAll(/.\[([0-9]+,[0-9]+,[0-9]+)\]/g, "");
            tv.system.replay.Add(this.charactorData.name);
            tv.system.replay.Add(a);
            tv.system.replay.Add(" ")
        }
        return this.info.viewport.H + this.charactorData.bubbleOffY
    }
    ;
    this.initNewChatItemData = function() {
        this.charactorData = tv.data.chatCharacter.GetChatCharacterByID(this.chatItem.characterID);
        if (!this.chatItem || !this.charactorData) {
            return
        }
        this.chatItem.pos = this.charactorData.layoutType;
        this.chatItem.framePic = this.charactorData.bgPath;
        this.chatItem.name = this.charactorData.name;
        this.chatItem.head = this.charactorData.facePath
    }
    ;
    this.MsgPicMaxW = 0;
    this.getMaxPicW = function() {
        if (this.parentW <= 300 - 10) {
            this.MsgPicMaxW = this.parentW - this.MsgHeadLength * 2 - this.MsgSpace * 2
        } else if (300 - 10 < this.parentW && this.parentW <= 400 - 16) {
            this.MsgPicMaxW = this.parentW / 2 - this.MsgHeadLength - this.MsgSpace
        } else {
            this.MsgPicMaxW = 200
        }
    }
    ;
    this.initOldChatItemData = function() {
        if (this.parentW <= 300 - 10) {
            this.MsgHeadLength = 32;
            this.MsgTextLineHeight = 4;
            this.MsgTextTBSpace = 8;
            this.MsgTextLRSpace = 10;
            this.MsgTextFontSize = 16;
            this.MsgNameSpace = 12;
            this.MsgNameFontSize = 12;
            this.MsgVoiceIconSize = 16;
            this.msgTextBgScale = .5;
            this.MsgTriangleSpace = 5;
            this.strEdge = [28, 4, 14, 14];
            if (this.chatItem.pos == 2) {
                this.MsgTextLineHeight = 2;
                this.MsgTextTBSpace = 4;
                this.MsgTextLRSpace = 8;
                this.MsgTextFontSize = 12;
                this.MsgNameSpace = 0;
                this.strEdge = [4, 4, 4, 4]
            }
            this.MsgSpace = 5
        } else if (300 - 10 < this.parentW && this.parentW <= 400 - 20) {
            this.MsgHeadLength = 48;
            this.MsgTextLineHeight = 6;
            this.MsgTextTBSpace = 12;
            this.MsgTextLRSpace = 16;
            this.MsgTextFontSize = 20;
            this.MsgNameSpace = 16;
            this.MsgNameFontSize = 16;
            this.MsgVoiceIconSize = 20;
            this.msgTextBgScale = .8;
            this.MsgTriangleSpace = 8;
            this.strEdge = [28, 4, 14, 14];
            if (this.chatItem.pos == 2) {
                this.MsgTextLineHeight = 4;
                this.MsgTextTBSpace = 6;
                this.MsgTextLRSpace = 12;
                this.MsgTextFontSize = 16;
                this.MsgNameSpace = 0;
                this.strEdge = [4, 4, 4, 4]
            }
            this.MsgSpace = 8
        } else {
            this.MsgHeadLength = 64;
            this.MsgTextLineHeight = 8;
            this.MsgTextTBSpace = 16;
            this.MsgTextLRSpace = 20;
            this.MsgTextFontSize = 24;
            this.MsgNameSpace = 18;
            this.MsgNameFontSize = 18;
            this.MsgVoiceIconSize = 24;
            this.msgTextBgScale = 1;
            this.MsgTriangleSpace = 10;
            this.strEdge = [28, 4, 14, 14];
            if (this.chatItem.pos == 2) {
                this.MsgTextLineHeight = 8;
                this.MsgTextTBSpace = 8;
                this.MsgTextLRSpace = 16;
                this.MsgTextFontSize = 18;
                this.MsgNameSpace = 0;
                this.strEdge = [4, 4, 4, 4]
            }
            this.MsgSpace = 10
        }
        this.MsgMaxW = this.parentW - this.MsgHeadLength * 2 - this.MsgSpace * 2;
        this.MsgMaxH = this.parentH - this.MsgNameFontSize * 2;
        this.getMaxPicW();
        this.charactorData = {
            bgPath: this.chatItem.framePic,
            bgTopH: this.strEdge[0],
            bgBottomH: this.strEdge[1],
            bgLeftW: this.strEdge[2],
            bgRightW: this.strEdge[3],
            faceHeight: this.MsgHeadLength,
            faceWidth: this.MsgHeadLength,
            facePath: this.chatItem.head,
            layoutType: this.chatItem.pos,
            lineSpace: this.MsgTextLineHeight,
            msgAreaBottomH: this.MsgTextTBSpace,
            msgAreaTopH: this.MsgTextTBSpace,
            msgAreaLeftW: this.MsgTextLRSpace,
            msgAreaRightW: this.MsgTextLRSpace,
            msgFontPath: "微软雅黑",
            msgFontSize: this.MsgTextFontSize,
            name: this.chatItem.name,
            nameFontSize: this.MsgNameFontSize,
            sendActionType: 0,
            spaceFaceAndMsg: this.MsgSpace,
            spaceFaceAndName: this.MsgTriangleSpace + this.msgTextBgScale * 10,
            spaceNameAndMsg: parseInt(this.MsgTextTBSpace),
            bubbleOffY: 20
        }
    }
    ;
    this.createElements = function() {
        this.head = new OBitmap("");
        this.headBg = new OBitmap("");
        this.name = new OFlowText("");
        this.image = new OBitmap("");
        this.headContainer = new OContainer(this.info.viewport.W,this.info.viewport.H);
        this.contentViewport = new OShowContainer(this.info.content.W,this.info.content.H);
        this.bubbleViewport = new OShowContainer(this.info.viewport.W,this.info.viewport.H)
    }
    ;
    this.addElementsToContainer = function() {
        this.headContainer.addChild(this.headBg);
        this.headContainer.addChild(this.head);
        this.bubbleViewport.addChild(this.name);
        this.bubbleViewport.addChild(this.headContainer);
        this.bubbleViewport.addChild(this.contentViewport);
        this.contentViewport.addChild(this.image);
        this.oSlide.addChild(this.bubbleViewport)
    }
    ;
    this.setElementAttribute = function(t) {
        this.bubbleViewport.setPosition(this.info.viewport.X, this.info.viewport.Y);
        this.contentViewport.setPosition(this.info.content.X, this.info.content.Y);
        this.setName();
        this.setHead();
        this.setContentBg();
        this.setContentText();
        if (t) {
            this.setEffect()
        }
    }
    ;
    this.setHead = function() {
        var t = this;
        if (2 == this.charactorData.layoutType) {
            this.head.setVisible(false);
            return
        }
        if (this.charactorData.facePath) {
            this.head.setUrl("Graphics/face/" + this.charactorData.facePath);
            var e = this.charactorData.faceHeight / this.head.height;
            var i = this.charactorData.faceWidth / this.head.width;
            var a = Math.min(e, i);
            var s = (this.charactorData.faceWidth - a * this.head.width) / 2;
            var n = (this.charactorData.faceHeight - a * this.head.height) / 2;
            this.head.setScale(a, a);
            this.head.setPosition(this.info.head.X + s, this.info.head.Y + n);
            this.headBg.setUrl(chatHeadBaseMap);
            this.headBg.setSize(this.charactorData.faceWidth, this.charactorData.faceHeight);
            this.headBg.setPosition(this.info.head.X, this.info.head.Y);
            if (this.charactorData.uiIndex && this.charactorData.uiIndex >= 0) {
                this.head.addEvent("click", function() {
                    t.stopEvent();
                    tv.scene = new SCUI(t.charactorData.uiIndex)
                })
            }
        }
    }
    ;
    this.setName = function() {
        if (2 == this.charactorData.layoutType) {
            this.name.setVisible(false);
            return
        }
        this.name.setPosition(this.info.name.X, this.info.name.Y);
        this.name.setTextSize(this.charactorData.nameFontSize);
        this.name.setColor(get16Color("#656161"));
        this.name.setText(this.getName(this.charactorData.name))
    }
    ;
    this.getName = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (!this.info.text) {
            return t
        }
        var i = void 0;
        if (e) {
            i = t + "..."
        } else {
            i = t
        }
        var a = 0;
        if (this.chatItem.head || this.charactorData.facePath) {
            a = this.charactorData.faceWidth
        }
        var s = this.oSlide.width - (a + this.charactorData.spaceFaceAndMsg) * 2;
        if (this.getFlowTextLength(i, this.charactorData.nameFontSize, gGameWidth)[0] > s) {
            t = t.substr(0, t.length - 1);
            return this.getName(t, true)
        } else {
            return i
        }
    }
    ;
    this.getHeaderColor = function() {
        return SALColor(0, 0, 0, 255)
    }
    ;
    this.setContentBg = function() {
        if (parseInt(this.chatItem.type) == 2) {
            return
        }
        this.image.setUrl("Graphics/UI/" + this.charactorData.bgPath);
        this.image.setSizeGrid([this.charactorData.bgLeftW, this.charactorData.bgRightW, this.charactorData.bgTopH, this.charactorData.bgBottomH], this.info.content.W, this.info.content.H)
    }
    ;
    this.setContentText = function() {
        switch (parseInt(this.chatItem.type)) {
        case 1:
            var t = this.getLineHeight(this.charactorData.msgFontSize, this.charactorData.lineSpace);
            this.text = new OFlowText("",false);
            this.text.maxWidth = this.maxWidth;
            this.text.setPosition(this.info.text.X, this.info.text.Y);
            this.contentViewport.addChild(this.text);
            this.text.setTextSize(this.charactorData.msgFontSize, t);
            this.text.setFont(this.charactorData.msgFontPath);
            this.text.setColor(this.getContentColor());
            this.text.setText(this.chatItem.content);
            break;
        case 2:
            var e = tv.DataVer <= 104 ? "Graphics/chat/" + this.chatItem.content : "Graphics/chat/" + this.chatItem.picPath;
            var i = "Graphics/chat/" + this.chatItem.content;
            this.image = new OBitmap(e);
            this.contentViewport.addChild(this.image);
            this.contentViewport.setChildIndex(this.image, 1001);
            if (i && this.chatItem.content.length > 0) {
                this.image.addEvent("click", this.showImageSource.bind(this))
            }
            var a = this.getScaleBigPic(this.image, this.MsgPicMaxW, this.MsgMaxH - 2 * this.MsgTextFontSize);
            this.image.setSize(a.w, a.h);
            break;
        case 3:
            if (this.chatItem.pos == 1) {
                this.voiceImage = new OBitmap(chatVoiceLeft);
                this.voiceImage.setPosition(this.charactorData.msgAreaLeftW, this.charactorData.msgAreaTopH)
            } else {
                this.voiceImage = new OBitmap(chatVoiceRight);
                this.voiceImage.setPosition(this.info.content.W - this.charactorData.msgAreaRightW - this.charactorData.msgFontSize, this.charactorData.msgAreaTopH)
            }
            this.contentViewport.addChild(this.voiceImage);
            this.contentViewport.setChildIndex(this.voiceImage, 1001);
            this.voiceImage.setSize(this.charactorData.msgFontSize, this.charactorData.msgFontSize);
            SAL_setElementBlockTouch(this.image.element, true);
            this.image.addEvent("click", this.startVoice.bind(this));
            break
        }
    }
    ;
    this.getScaleBigPic = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = {};
        var s = 0;
        var n = 0;
        if (t.width > e) {
            n = e;
            s = e * t.height / t.width
        } else {
            n = t.width;
            s = t.height
        }
        if (s > i) {
            n = i * n / s;
            s = i
        }
        a = {
            w: n,
            h: s
        };
        return a
    }
    ;
    this.setEffect = function() {
        this.bubbleViewport.setAlpha(0);
        var t = 0;
        var e = 0;
        switch (parseInt(this.charactorData.sendActionType)) {
        case 0:
            this.bubbleViewport.effectFadeIn(255);
            break;
        case 1:
            t = this.chatItem.pos == 1 || this.chatItem.pos == 2 ? -50 : 50;
            this.bubbleViewport.setPosition(this.info.viewport.X + t, this.info.viewport.Y);
            this.bubbleViewport.effectSameSideIn(this.chatItem.pos, 255, this.info.viewport.X + t, this.info.viewport.Y);
            break;
        case 2:
            this.bubbleViewport.setAlpha(1);
            this.bubbleViewport.setScale(0, 0);
            t = this.chatItem.pos == 1 || this.chatItem.pos == 2 ? -50 : 50;
            e = this.chatItem.pos == 1 || this.chatItem.pos == 2 ? this.info.viewport.X + t : this.info.viewport.X + t + this.info.viewport.W;
            this.bubbleViewport.setPosition(e, this.info.viewport.Y);
            this.bubbleViewport.effectSameSideScale(this.chatItem.pos, this.info.viewport.X + t, this.info.viewport.Y, this.info.viewport.W);
            break;
        case 3:
            this.bubbleViewport.setPosition(this.info.viewport.X, this.info.viewport.Y + 50);
            this.bubbleViewport.effectDownIn(255, this.info.viewport.X, this.info.viewport.Y + 50);
            break;
        case 4:
            t = this.chatItem.pos == 1 || this.chatItem.pos == 2 ? -70 : 70;
            this.bubbleViewport.setPosition(this.info.viewport.X + t, this.info.viewport.Y);
            this.contentViewport.setPosition(this.info.content.X - t * 2, this.info.content.Y);
            this.bubbleViewport.effectCrossIn(this.chatItem.pos, 255, this.info.viewport.X + t, this.info.viewport.Y, this.contentViewport.element, this.info.content.X - t * 2, this.info.content.Y);
            break;
        case 5:
            var i = this.chatItem.pos == 1 || this.chatItem.pos == 2 ? -50 : 50;
            this.bubbleViewport.setPosition(this.info.viewport.X + i, this.info.viewport.Y);
            this.bubbleViewport.effectElastic(this.chatItem.pos, 255, this.info.viewport.X + i, this.info.viewport.Y);
            break;
        case 6:
            e = this.chatItem.pos == 1 || this.chatItem.pos == 2 ? this.info.viewport.X : this.info.viewport.X + this.info.viewport.W;
            this.bubbleViewport.setPosition(e, this.info.viewport.Y);
            this.bubbleViewport.setScale(0, 0);
            this.bubbleViewport.setAlpha(1);
            this.bubbleViewport.effectExtend(this.chatItem.pos, e, this.info.viewport.Y, this.info.viewport.W);
            break;
        default:
            this.bubbleViewport.setAlpha(1);
            break
        }
        if (this.charactorData.cgPath && this.addReplay) {
            var a = fileListFato("Audio/se/" + this.charactorData.cgPath, "get chatItem content picPath");
            oaudio.playSE(a, 80)
        }
    }
    ;
    this.showImageSource = function() {
        var i = this;
        this.stopEvent();
        var t = fileListFato("Graphics/chat/" + this.chatItem.content);
        SAL_preload(g, [t], function() {
            i.imageSourceContainer = new OContainer(gGameWidth,gGameHeight);
            SAL_setElementIndex(g, i.imageSourceContainer.element, 10001);
            i.imageSourceContainer.setPosition(gGameX, 0);
            i.imageSourceContainer.setBlockTouch(true);
            var t = new OBitmap(autoSaveMaskPath);
            i.imageSourceContainer.addChild(t);
            t.setSize(gGameWidth, gGameHeight);
            i.imageSource = new OBitmap("Graphics/chat/" + i.chatItem.content);
            i.imageSourceContainer.addChild(i.imageSource);
            if (i.imageSource.width > gGameWidth || i.imageSource.height > gGameHeight) {
                var e = i.imageSource.width > i.imageSource.height ? t.width / i.imageSource.width : t.height / i.imageSource.height;
                i.imageSource.setSize(i.imageSource.width * e, i.imageSource.height * e)
            }
            i.imageSource.setPosition(gGameWidth - i.imageSource.width >> 1, gGameHeight - i.imageSource.height >> 1);
            SAL_setElementBlockTouch(i.imageSourceContainer.element, true);
            i.imageSourceContainer.addEvent("click", function() {
                i.stopEvent();
                i.imageSourceContainer && i.imageSourceContainer.dispose();
                i.imageSourceContainer = null;
                i.imageSource = null
            })
        }, 12)
    }
    ;
    this.startVoice = function() {
        this.stopEvent();
        var t = fileListFato("Audio/Voice/" + this.chatItem.content, "get chatItem content picPath");
        oaudio.playVoice(t, 80)
    }
    ;
    this.getContentColor = function() {
        return SALColor(0, 0, 0, 255)
    }
    ;
    this.getContextInfo = function(t) {
        var e = 0;
        var i = 0;
        if (this.chatItem.head || this.charactorData.facePath) {
            e = this.charactorData.faceWidth;
            i = this.charactorData.faceHeight
        }
        var a = this.getContentRegion();
        var s = this.chatItem.name;
        if (!s || s == "") {
            s = "正"
        }
        var n = this.getFlowTextLength(s, this.charactorData.nameFontSize, a);
        switch (parseInt(this.chatItem.pos)) {
        case 1:
            return {
                viewport: {
                    X: 0,
                    Y: t,
                    W: this.oSlide.width,
                    H: n[1] + this.charactorData.spaceNameAndMsg + a.H + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaTopH + this.charactorData.msgAreaBottomH)
                },
                head: {
                    X: 0,
                    Y: 0,
                    W: e,
                    H: i
                },
                name: {
                    X: e + this.charactorData.spaceFaceAndName,
                    Y: 0,
                    W: n[0],
                    H: n[1]
                },
                content: {
                    X: e + this.charactorData.spaceFaceAndMsg,
                    Y: n[1] + this.charactorData.spaceNameAndMsg,
                    W: a.W + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaLeftW + this.charactorData.msgAreaRightW),
                    H: a.H + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaTopH + this.charactorData.msgAreaBottomH)
                },
                text: {
                    X: this.charactorData.msgAreaLeftW,
                    Y: this.charactorData.msgAreaTopH,
                    W: a.W,
                    H: a.H
                }
            };
        case 2:
            return {
                viewport: {
                    X: 0,
                    Y: t,
                    W: this.oSlide.width,
                    H: a.H + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaTopH + this.charactorData.msgAreaBottomH)
                },
                head: {
                    X: 0,
                    Y: 0,
                    W: 0,
                    H: 0
                },
                name: {
                    X: 0,
                    Y: 0,
                    W: 0,
                    H: 0
                },
                content: {
                    X: (this.oSlide.width - (a.W + this.charactorData.msgAreaLeftW + this.charactorData.msgAreaRightW)) / 2,
                    Y: 0,
                    W: a.W + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaLeftW + this.charactorData.msgAreaRightW),
                    H: a.H + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaTopH + this.charactorData.msgAreaBottomH)
                },
                text: {
                    X: this.charactorData.msgAreaLeftW,
                    Y: this.charactorData.msgAreaTopH,
                    W: a.W,
                    H: a.H
                }
            };
        case 3:
            return {
                viewport: {
                    X: 0,
                    Y: t,
                    W: this.oSlide.width,
                    H: n[1] + this.charactorData.spaceNameAndMsg + a.H + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaTopH + this.charactorData.msgAreaBottomH)
                },
                head: {
                    X: this.oSlide.width - e,
                    Y: 0,
                    W: e,
                    H: i
                },
                name: {
                    X: this.oSlide.width - e - this.charactorData.spaceFaceAndName - this.getFlowTextLength(this.chatItem.name, this.charactorData.nameFontSize, this.oSlide.width - e - this.charactorData.spaceFaceAndName)[0],
                    Y: 0,
                    W: n[0],
                    H: n[1]
                },
                content: {
                    X: this.oSlide.width - e - this.charactorData.spaceFaceAndMsg - (a.W + this.charactorData.msgAreaLeftW + this.charactorData.msgAreaRightW),
                    Y: n[1] + this.charactorData.spaceNameAndMsg,
                    W: a.W + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaLeftW + this.charactorData.msgAreaRightW),
                    H: a.H + (parseInt(this.chatItem.type) == 2 ? 0 : this.charactorData.msgAreaTopH + this.charactorData.msgAreaBottomH)
                },
                text: {
                    X: this.charactorData.msgAreaLeftW,
                    Y: this.charactorData.msgAreaTopH,
                    W: a.W,
                    H: a.H
                }
            };
        default:
            return null
        }
    }
    ;
    this.getContentRegion = function() {
        var t = 0;
        if (this.chatItem.head || this.charactorData.facePath) {
            t = this.charactorData.faceWidth
        }
        if (!this.chatItem) {
            return {
                W: 0,
                H: 0
            }
        }
        if (this.chatItem.type == 3) {
            return {
                W: this.getVoiceLen(),
                H: this.charactorData.msgFontSize
            }
        }
        this.maxWidth = this.oSlide.width - (t + this.charactorData.spaceFaceAndMsg) * 2 - this.charactorData.msgAreaLeftW * 2;
        if (this.chatItem.type == 2) {
            var e = tv.DataVer <= 104 ? "Graphics/chat/" + this.chatItem.content : "Graphics/chat/" + this.chatItem.picPath;
            this.image = new OBitmap(e);
            this.image.setVisible(false);
            SAL_addElement(g, this.image.element);
            this.getMaxPicW();
            var i = this.getScaleBigPic(this.image, this.MsgPicMaxW, this.MsgMaxH - 2 * this.MsgTextFontSize);
            var a = i.w;
            var s = i.h;
            SAL_destroyElement(this.image.element);
            return {
                W: a,
                H: s
            }
        } else {
            var n = this.getLineHeight(this.charactorData.msgFontSize, this.charactorData.lineSpace);
            var r = this.getFlowTextLength(this.chatItem.content, this.charactorData.msgFontSize, this.maxWidth, n);
            return {
                W: r[0],
                H: r[1] - this.charactorData.lineSpace
            }
        }
    }
    ;
    this.getFlowTextLength = function(t, e, i, a) {
        var s = new OFlowText("",false);
        s.maxWidth = i;
        s.setTextSize(e, a ? a : null);
        s.setText(t);
        return [s.textWidth, s.textHeight]
    }
    ;
    this.getLineHeight = function(t, e) {
        var i = new OText("正",false,t);
        var a = (i.textHeight + e) * 1 / t;
        i.dispose();
        return a
    }
    ;
    this.update = function() {}
    ;
    this.getVoiceLen = function() {
        var t = parseInt(this.chatItem.size);
        var e = t / 10 + 1;
        if (e > 7) {
            e = 7
        }
        if (e < 2) {
            e = 2
        }
        var i = this.charactorData.msgFontSize;
        var a = i * e + this.charactorData.msgAreaLeftW + this.charactorData.msgAreaRightW;
        return a
    }
    ;
    this.dispose = function() {
        this.bubbleViewport && this.bubbleViewport.dispose();
        this.contentViewport && this.contentViewport.dispose();
        this.image && this.image.dispose();
        this.voiceImage && this.voiceImage.dispose();
        this.head && this.head.dispose();
        this.name && this.name.dispose();
        this.text && this.text.dispose();
        this.imageSourceContainer && this.imageSourceContainer.dispose();
        this.imageSource && this.imageSource.dispose();
        this.bubbleViewport = null;
        this.head = null;
        this.name = null;
        this.contentViewport = null;
        this.text = null;
        this.image = null;
        this.imageSource = null;
        this.imageSourceContainer = null;
        this.voiceImage = null;
        this.chatItem = null;
        this.charactorData = null;
        this.info = null;
        this.oSlide = null
    }
    ;
    this.stopEvent = function() {
        onTouchClick = false
    }
}

function CAnimation(t, e) {
    ODisplayObject.call(this);
    this.width = t;
    this.height = e;
    this.element = SALShowContainer(t, e);
    this.path = "";
    this.followName = "";
    this.actionList = new Array;
    this.typeList = new Array;
    this.animationList = new Array;
    this.loadData = function(t, e, i, a) {
        if (!e || e.length <= 0) {
            return
        }
        var s;
        if (tv.oaf2Data.hasOwnProperty(t.toLowerCase() + "x")) {
            s = tv.oaf2Data[t.toLowerCase() + "x"]
        } else if (tv.oaf2Data.hasOwnProperty(t.toLowerCase())) {
            s = tv.oaf2Data[t.toLowerCase()]
        }
        if (!s) {
            return
        }
        this.path = t;
        var n = s.createBGSprite();
        SAL_addElement(this.element, n);
        this.buildAnimation(s, e, i, a)
    }
    ;
    this.buildAnimation = function(t, e, c, u) {
        this.followName = utils.madeString(c, 0, 100, true);
        var i = void 0
          , a = void 0
          , s = void 0
          , n = void 0
          , r = void 0;
        var o = new Array;
        var h = new Array;
        for (r = 0; r < e.length; r++) {
            var f = e[r].split(",");
            o.push(parseInt(f[0]));
            h.push(parseInt(f[1]))
        }
        for (r = 0; r < this.actionList.length; r++) {
            if (o.indexOf(this.actionList[r]) >= 0) {
                continue
            }
            this.actionList.splice(r, 1);
            this.typeList.splice(r, 1);
            n = this.animationList[r];
            SAL_destroyElement(n.animation);
            this.animationList.splice(r, 1);
            r--
        }
        for (r = 0; r < o.length; r++) {
            a = o[r];
            i = h[r];
            s = this.actionList.indexOf(a);
            var l;
            if (s > -1) {
                n = this.animationList[s];
                l = n.animation;
                n.followName = this.followName;
                if (i != this.typeList[s]) {
                    this.typeList[s] = i;
                    SAL_resetElement(l, {
                        playType: i
                    })
                }
            } else {
                this.actionList.push(a);
                this.typeList.push(i);
                var d = {
                    width: t.MaxWidth,
                    height: t.MaxHeight,
                    loop: i == 2 ? 1 : i,
                    frames: t.getActionData(a)
                };
                l = SALAnimation(JSON.stringify(d));
                this.animationList.push({
                    animation: l,
                    followName: i == 2 ? this.followName : null
                })
            }
            var m = e[r].split(",");
            SAL_setElementIndex(this.element, l, m[0]);
            if (u && i != 1) {
                SAL_setAnimationPlay(l, false)
            }
        }
        this.pauseFollowNameAnimation(this.followName)
    }
    ;
    this.dispose = function() {
        SAL_destroyElement(this.element);
        this.width = 0;
        this.height = 0;
        this.path = "";
        this.followName = "";
        this.actionList = null;
        this.typeList = null
    }
    ;
    this.pauseFollowNameAnimation = function(t) {
        if (!this.followName) {
            return
        }
        for (var e = 0; e < this.animationList.length; e++) {
            if (this.typeList[e] == 2 && this.animationList[e].followName == t) {
                SAL_setAnimationPlay(this.animationList[e].animation, false)
            }
        }
    }
    ;
    this.runFollowNameAnimation = function(t) {
        if (this.followName == null) {
            return
        }
        for (var e = 0; e < this.animationList.length; e++) {
            if (this.typeList[e] == 2 && this.animationList[e].followName == t) {
                SAL_setAnimationPlay(this.animationList[e].animation, true)
            }
        }
    }
    ;
    this.setAnimationType = function(t, e) {
        for (var i = 0; i < this.animationList.length; i++) {
            if (this.typeList[i] == 2 && this.animationList[i].followName == t) {
                SAL_resetElement(this.animationList[i].animation, {
                    playType: e
                })
            }
        }
    }
    ;
    this.getSaveType = function() {
        var t = [];
        for (var e = 0; e < this.actionList.length; e++) {
            t.push({
                actType: this.typeList[e],
                actIndex: this.actionList[e]
            })
        }
        return t
    }
}

function CHintMessage() {
    this.container = null;
    this.message = null;
    var a = 0;
    var t = 0;
    var s = 300;
    this.canOpen = true;
    this.isStatic = false;
    this.setHint = function() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#ffffff";
        var i = arguments[2];
        if (!this.canOpen || t == "") {
            return
        }
        this.container = new OContainer;
        SAL_addElement(g, this.container.element);
        SAL_setElementIndex(g, this.container.element, 11001);
        this.isStatic = i ? i : false;
        this.canOpen = false;
        this.bg = new OBitmap(timeMallTipBg);
        this.container.addChild(this.bg);
        this.message = new OText(t);
        this.message.setTextSize(25);
        this.message.setColor(get16Color("#ffffff"));
        if (e) {
            this.message.setColor(get16Color(e))
        }
        this.bg.setSizeGrid([50, 50, 0, 0], (this.message.textWidth + 30) * 2, (this.message.textHeight + 20) * 2);
        this.bg.setScale(.5, .5);
        this.bg.setPosition(-15, -10);
        this.container.setPosition((gGameWidth + gGameX * 2 - this.message.textWidth) / 2, 324);
        this.container.addChild(this.message);
        this.container.setAlpha(0);
        a = 0;
        this.container.fadeTo(1, s);
        this.container.moveTo((gGameWidth + gGameX * 2 - this.message.textWidth) / 2, gGameHeight / 2, s)
    }
    ;
    this.fadeOut = function() {
        this.container.fadeTo(0, s);
        this.container.moveTo((gGameWidth + gGameX * 2 - this.message.textWidth) / 2, gGameHeight * 2 / 5, s)
    }
    ;
    this.dispose = function() {
        this.container && this.container.dispose();
        this.canOpen = true
    }
    ;
    this.update = function() {
        if (this.isStatic) {
            return
        }
        a++;
        var t = a / FPS;
        if (t == 1.5) {
            this.fadeOut()
        } else if (t == 1.8) {
            this.dispose()
        }
    }
}

function SWebFree() {
    var t = this;
    this.container = SALContainer(gGameWidth + gGameX, gGameHeight);
    SAL_addElement(g, this.container);
    SAL_setElementIndex(g, this.container, 6e3);
    SAL_setPosition(this.container, 0, 0);
    this.countdownTime = 0;
    this.timeBack = null;
    this.timeText = null;
    this.timePoint1 = null;
    this.timePoint2 = null;
    this.closeText = null;
    this.timerFree = null;
    this.isFree = false;
    this.isChangeTime = false;
    this.overBack = null;
    this.overMinTime = 0;
    this.ScreenScale = 1;
    this.isUserClose = false;
    this.maskSendFlower = null;
    this.screenV = false;
    var c = SALColor(255, 255, 255, 255);
    this.init = function() {
        var t = this;
        this.countdownTime = 0;
        this.overMinTime = 10;
        if (gGameWidth == 540) {
            this.screenV = true
        }
        GloableData.getInstance().getLightFreeStatus(function() {
            t.getFreeTimeComplete();
            sendMsgToClient(JSON.stringify({
                type: 5,
                status: 1,
                msg: "游戏开始",
                data: {
                    freeLimitType: GloableData.getInstance().freeLimitType,
                    time: 0
                }
            }), null);
            isSendMsgStart = true
        })
    }
    ;
    this.getFreeTimeComplete = function() {
        var t = this;
        this.isFree = GloableData.getInstance().isFreeLimit || GloableData.getInstance().msg_lightDay;
        if (this.isFree) {
            SAL_preload(g, [LIMIT_FREE_TIME_BG, LIMIT_FREE_TIME_CLOSE_BTN, LIMIT_FREE_TIME_OPEN_BTN, LIMIT_FREE_TIME_POINT], function() {
                t.countdownTime = GloableData.getInstance().isFreeTime;
                t.showCountDownView()
            }, 1, true);
            if (tv.canvas.cTrialReading && tv.canvas.cTrialReading.TimeComponent) {
                tv.canvas.cTrialReading.TimeComponent.destoryComponent()
            }
        } else {
            if (!tv.canvas.cTrialReading) {
                tv.canvas.cTrialReading = new STrialReading
            }
        }
        this.callback && this.callback()
    }
    ;
    this.createView = function() {
        var t = this;
        this.timeBacktContainer = new OContainer(gGameX,gGameHeight);
        this.addChild(this.timeBacktContainer.element);
        if (!GloableData.getInstance().isMobile() && !isM) {
            this.timeBacktContainer.setVisible(false)
        }
        if (gGameX) {
            this.timeBacktContainer.setPosition(gGameX - 40, 16)
        } else {
            this.timeBacktContainer.setPosition(10, 16)
        }
        this.timeBack = new OBitmap(LIMIT_FREE_TIME_BG);
        this.timeBacktContainer.addChild(this.timeBack);
        this.timeBack.setSizeGrid([0, 0, 20, 20], 36, 275);
        this.desText = new OText("免费倒计时",false,18);
        this.desText.setSize(30, 200);
        this.desText.setColor(get16Color("#ffffff"));
        this.desText.setFont("微软雅黑");
        this.timeBacktContainer.addChild(this.desText);
        this.desText.setPosition(9, 10);
        this.timeText = new OText("12\n\n12\n\n12",false,18);
        this.timeText.setFont("微软雅黑");
        this.timeText.setColor(get16Color("#FFB238"));
        this.timeText.setSize(30, 100);
        this.timeBacktContainer.addChild(this.timeText);
        this.timeText.setPosition(7, 125);
        this.timePoint1 = new OBitmap(LIMIT_FREE_TIME_POINT);
        this.timeBacktContainer.addChild(this.timePoint1);
        this.timePoint1.setPosition(12, 155);
        this.timePoint2 = new OBitmap(LIMIT_FREE_TIME_POINT);
        this.timeBacktContainer.addChild(this.timePoint2);
        this.timePoint2.setPosition(12, 199);
        this.closeBtn = new OBitmap(LIMIT_FREE_TIME_CLOSE_BTN);
        this.closeBtn.setBlockTouch(true);
        this.timeBacktContainer.addChild(this.closeBtn);
        this.closeBtn.setPosition(6, this.timeBack.height - 31);
        this.closeBtn.addEvent("click", function() {
            if (t.isUserClose) {
                t.timeBack.setSizeGrid([0, 0, 20, 20], 36, 275);
                t.closeBtn.setUrl(LIMIT_FREE_TIME_CLOSE_BTN);
                t.closeBtn.setPosition(6, t.timeBack.height - 31);
                t.desText.setText("免费倒计时");
                t.timeText.setVisible(true);
                t.timePoint1.setVisible(true);
                t.timePoint2.setVisible(true)
            } else {
                t.timeBack.setSizeGrid([0, 0, 20, 20], 36, 90);
                t.closeBtn.setUrl(LIMIT_FREE_TIME_OPEN_BTN);
                t.closeBtn.setPosition(6, t.timeBack.height - 31);
                t.desText.setText("免费");
                t.timeText.setVisible(false);
                t.timePoint1.setVisible(false);
                t.timePoint2.setVisible(false)
            }
            t.isUserClose = !t.isUserClose
        })
    }
    ;
    this.changeTime = function() {
        this.checkFreeStatus();
        if (this.isFree == false) {
            this.desText.setText("送花够，可以继续玩");
            this.timeText.setVisible(false);
            this.timePoint1.setVisible(false);
            this.timePoint2.setVisible(false);
            this.timeBack.setSizeGrid([0, 0, 20, 20], 36, 250);
            this.closeBtn.setPosition(6, this.timeBack.height - 31);
            this.clearView();
            return
        }
        if (this.isChangeTime && this.overBack) {
            this.setPicTime()
        }
        if (!this.overBack) {
            if (this.countdownTime <= this.overMinTime * 60) {
                this.createOverView()
            }
        }
        if (this.countdownTime <= 0) {
            this.gameOver();
            return
        }
        this.timeText.setText(this.getCountDownTimeString());
        this.countdownTime--
    }
    ;
    this.clearNum = 0;
    this.clearView = function() {
        this.clearNum++;
        if (this.maskSendFlower) {
            SAL_destroyElement(this.maskSendFlower)
        }
        if (this.overBack) {
            SAL_clearInterval(this.timerFree);
            SAL_destroyElement(this.overBack);
            this.overBack = null
        }
        if (this.clearNum == 10) {
            SAL_clearInterval(this.timerFree);
            this.timerFree = null;
            SAL_destroyElement(this.container)
        }
    }
    ;
    this.picM = null;
    this.picM1 = null;
    this.colon = null;
    this.picS = null;
    this.picS1 = null;
    this.picTimeBack = null;
    this.setPicTime = function() {
        if (!this.picM) {
            this.picM = SALSprite(LIMIT_FREE_NUMBER);
            this.getNum(this.picM, 1);
            this.picM1 = SALSprite(LIMIT_FREE_NUMBER);
            this.getNum(this.picM1, 1);
            this.colon = SALSprite(LIMIT_FREE_NUMBER);
            this.getNum(this.colon, 11);
            this.picS = SALSprite(LIMIT_FREE_NUMBER);
            this.getNum(this.picS, 1);
            this.picS1 = SALSprite(LIMIT_FREE_NUMBER);
            this.getNum(this.picS1, 1);
            SAL_setElementScale(this.picM, this.ScreenScale, this.ScreenScale);
            SAL_setElementScale(this.picM1, this.ScreenScale, this.ScreenScale);
            SAL_setElementScale(this.colon, this.ScreenScale, this.ScreenScale);
            SAL_setElementScale(this.picS, this.ScreenScale, this.ScreenScale);
            SAL_setElementScale(this.picS1, this.ScreenScale, this.ScreenScale);
            if (this.screenV) {
                SAL_setPosition(this.picM, 10, 0);
                SAL_setPosition(this.picM1, 10 + 63, 0);
                SAL_setPosition(this.colon, 10 + 63 + 50, 0);
                SAL_setPosition(this.picS, 10 + 63 + 50 + 50, 0);
                SAL_setPosition(this.picS1, 10 + 63 + 50 + 50 + 63, 0)
            } else {
                SAL_setPosition(this.picM, 20 * this.ScreenScale, 0);
                SAL_setPosition(this.picM1, (20 + 92) * this.ScreenScale - 5, 0);
                SAL_setPosition(this.colon, (20 + 92 * 2) * this.ScreenScale - 23, 0);
                SAL_setPosition(this.picS, (20 + 92 * 3) * this.ScreenScale - 41, 0);
                SAL_setPosition(this.picS1, (20 + 92 * 4) * this.ScreenScale - 46, 0)
            }
        }
        if (!this.picTimeBack) {
            this.picTimeBack = SALContainer();
            SAL_addElement(this.overBack, this.picTimeBack);
            SAL_addElement(this.picTimeBack, this.picM);
            SAL_addElement(this.picTimeBack, this.picM1);
            SAL_addElement(this.picTimeBack, this.colon);
            SAL_addElement(this.picTimeBack, this.picS);
            SAL_addElement(this.picTimeBack, this.picS1);
            if (this.screenV) {
                SAL_setPosition(this.picTimeBack, 150 * this.ScreenScale, 511 * this.ScreenScale)
            } else {
                SAL_setPosition(this.picTimeBack, 628 * this.ScreenScale, 150 * this.ScreenScale)
            }
        }
        var t = this.getCountDownTimeString();
        this.getNum(this.picM, t.substr(4, 1));
        this.getNum(this.picM1, t.substr(5, 1));
        this.getNum(this.colon, 11);
        this.getNum(this.picS, t.substr(8, 1));
        this.getNum(this.picS1, t.substr(9, 1))
    }
    ;
    this.getNum = function(t, e) {
        var i = 0;
        if (e == 0) {
            i = 9 * 92
        } else {
            i = (e - 1) * 92
        }
        SAL_setElementClip(t, 91, 122, i, 0)
    }
    ;
    this.createOverView = function() {
        var t = this;
        var e = [LIMIT_FREE_BTN_BUY, LIMIT_FREE_BTN_BUY_ACTIVE, LIMIT_FREE_ANIM_CLOCK, LIMIT_FREE_ANIM_CLOCK1, LIMIT_FREE_NUMBER, LIMIT_FREE_OVER_BG, LIMIT_FREE_BTN_EXIT, LIMIT_FREE_BTN_EXIT_ACTIVE, LIMIT_FREE_BTN_SAVE, LIMIT_FREE_BTN_SAVE_ACTIVE, LIMIT_FREE_FLOWER, autoSaveMaskPath, autoSaveBgPath, autoSaveJxPath];
        gLoadAssets.customPreload(e, function() {
            t.loadImageComplete()
        })
    }
    ;
    this.loadImageComplete = function() {
        var t = this;
        this.overBack = SALContainer(gGameWidth, gGameHeight);
        this.addChild(this.overBack);
        SAL_setPosition(this.overBack, gGameX, 0);
        var e = createImage(LIMIT_FREE_OVER_BG, {
            x: 0,
            y: 0
        }, {
            w: gGameWidth,
            h: gGameHeight
        }, this.overBack);
        SAL_setElementBlockTouch(e, true);
        SAL_addTouchDown(e, function() {});
        SAL_addTouchUp(e, function() {});
        SAL_addTouchMove(e, function() {});
        SAL_addClick(e, function() {});
        var i = SALContainer(gGameWidth, gGameHeight);
        SAL_addElement(this.overBack, i);
        var a = SALButton(LIMIT_FREE_BTN_BUY, LIMIT_FREE_BTN_BUY_ACTIVE);
        var s = SALButton(LIMIT_FREE_BTN_SAVE, LIMIT_FREE_BTN_SAVE_ACTIVE);
        var n = SALButton(LIMIT_FREE_BTN_EXIT, LIMIT_FREE_BTN_EXIT_ACTIVE);
        SAL_addElement(i, a);
        SAL_addElement(i, s);
        SAL_addElement(i, n);
        var r = gGameHeight / 720;
        var o = SAL_getElementWidth(a);
        var h = SAL_getElementHeight(a);
        if (this.screenV) {
            this.ScreenScale = 720 / gGameHeight;
            SAL_setPosition(s, 0, (h + 24) * this.ScreenScale);
            SAL_setPosition(n, 0, (h + 24) * 2 * this.ScreenScale);
            SAL_setPosition(i, 141 * this.ScreenScale, 881 * this.ScreenScale)
        } else {
            this.ScreenScale = gGameWidth / 1280;
            SAL_setPosition(s, o * this.ScreenScale + 56, 0);
            SAL_setPosition(n, (o * this.ScreenScale + 56) * 2, 0);
            SAL_setPosition(i, 367 / 2 * this.ScreenScale, 537 * r)
        }
        SAL_setElementScale(a, this.ScreenScale, this.ScreenScale);
        SAL_setElementScale(s, this.ScreenScale, this.ScreenScale);
        SAL_setElementScale(n, this.ScreenScale, this.ScreenScale);
        SAL_addClick(a, this.buyFree);
        SAL_addClick(s, this.showSaveView);
        SAL_addClick(n, function() {
            t.gameOver()
        });
        this.setPicClock();
        this.isChangeTime = true
    }
    ;
    this.buyFree = function() {
        t.showFlowerPannel()
    }
    ;
    this.showFlowerPannel = function() {
        var t = this;
        if (!this.maskSendFlower) {
            this.maskSendFlower = new OContainer(gGameWidth,gGameHeight);
            this.maskSendFlower.setPosition(gGameX, 0);
            this.addChild(this.maskSendFlower.element)
        }
        var e = new OBitmap(LIMIT_FREE_OVER_BG);
        e.setBlockTouch(true);
        this.maskSendFlower.addChild(e);
        e.setSize(gGameWidth, gGameHeight);
        var i = new OContainer(gGameWidth,gGameHeight);
        this.maskSendFlower.addChild(i);
        i.setPosition(gGameWidth - 440 >> 1, gGameHeight - 290 >> 1);
        var a = new OBitmap(autoSaveMaskPath);
        i.addChild(a);
        a.setSize(440, 290);
        var s = new OBitmap(LIMIT_FREE_FLOWER);
        i.addChild(s);
        s.setSize(50, 50);
        s.setPosition(80, 20);
        var n = Math.ceil(this.getPlayNum() - GloableData.getInstance().userData.realFlower);
        var r = {
            text: "你只需要打赏 " + n + " 朵鲜花，就能继续玩",
            font: "微软雅黑",
            fontColor: c
        };
        var o = new OText(r.text);
        o.setFont("微软雅黑");
        o.setColor(r.fontColor);
        i.addChild(o);
        o.setPosition(440 - o.textWidth >> 1, 80);
        var h = new ONButton(autoSaveJxPath,autoSaveJxPath,"取消");
        h.setFont("微软雅黑");
        h.setTextColor(get16Color("#ffffff"));
        i.addChild(h);
        h.setSize(160, 58);
        h.addClick(function() {
            t.canclePannel()
        });
        var l = new ONButton(autoSaveJxPath,autoSaveJxPath,"去打赏");
        l.setFont("微软雅黑");
        l.setTextColor(get16Color("#ffffff"));
        i.addChild(l);
        l.setSize(160, 58);
        l.addClick(function() {
            SAL_payMoney(3, 0, {
                purchaseType: "flower",
                countAvailable: true
            }, null, function() {
                GloableData.getInstance().getFlowerByMe()
            })
        });
        h.setPosition(50, 200);
        l.setPosition(230, 200)
    }
    ;
    this.canclePannel = function() {
        if (this.maskSendFlower) {
            this.maskSendFlower.dispose();
            this.maskSendFlower = null
        }
    }
    ;
    this.showSaveView = function() {
        GloableData.getInstance().isCloud = true;
        tv.scene = new SSavefile(false,true)
    }
    ;
    this.gameOver = function() {
        this.isChangeTime = false;
        if (this.timerFree) {
            SAL_clearInterval(this.timerFree);
            this.timerFree = null
        }
        if (GloableData.getInstance().isMobile()) {
            SAL_exit()
        } else if (GloableData.getInstance().gameInfo.isPc) {
            aBoxRefreshPage()
        } else {
            this.dispose();
            backToMainMenu();
            aBoxRefreshPage()
        }
    }
    ;
    this.checkFreeStatus = function() {
        if (GloableData.getInstance().userData.realFlower >= this.getPlayNum()) {
            this.isFree = false
        }
        GloableData.getInstance().isFreeLimit = this.isFree
    }
    ;
    this.getPlayNum = function() {
        if (this.isNewOldShop()) {
            if (hasFileItem("data/mallnew.bin")) {
                if (tv.gameNewMall.goodList.goods[0].itemStatus != 2 && tv.gameNewMall.goodList.goods[0].itemType == 3) {
                    return this.getMallPackPrice()
                }
            } else {
                if (tv.gameMallBin.items[0].itemStatus != 2 && tv.gameMallBin.items[0].itemType == 3) {
                    return this.getMallPackPrice()
                }
            }
        } else {
            return GloableData.getInstance().gameInfo.flowerLock
        }
    }
    ;
    this.isNewOldShop = function() {
        if (hasFileItem("data/mallnew.bin")) {
            for (var t in tv.gameNewMall.goodList.goods) {
                if (tv.gameNewMall.goodList.goods[t].itemType == 3 && tv.gameNewMall.goodList.goods[t].itemStatus != 2) {
                    return true
                }
            }
        } else if (hasFileItem("data/mall.bin")) {
            for (var t in tv.gameMallBin.items) {
                if (tv.gameMallBin.items[t].itemType == 3 && tv.gameMallBin.items[t].itemStatus != 2) {
                    return true
                }
            }
        }
        return false
    }
    ;
    this.getMallPackPrice = function() {
        if (hasFileItem("data/mallnew.bin")) {
            return tv.gameNewMall.goodList.goods[0].itemPrice
        } else if (hasFileItem("data/mall.bin")) {
            return tv.gameMallBin.items[0].itemPrice
        }
        return 0
    }
    ;
    this.showCountDownView = function() {
        var t = this;
        if (this.timerFree) {
            return
        }
        var e = "";
        if (gGameWidth == 540) {
            e = "v"
        }
        this.createView();
        this.changeTime();
        this.timerFree = SAL_setInterval(function() {
            t.changeTime()
        }, 1e3)
    }
    ;
    this.getCountDownTimeString = function() {
        var t = Math.floor(this.countdownTime / 60 / 60);
        var e = void 0;
        if (t < 10) {
            e = "0" + t.toString() + "\n\n"
        } else {
            e = t.toString() + "\n\n"
        }
        var i = Math.floor(this.countdownTime / 60) % 60;
        var a = void 0;
        if (i < 10) {
            a = "0" + i.toString() + "\n\n"
        } else {
            a = i.toString() + "\n\n"
        }
        var s = this.countdownTime % 60;
        var n = void 0;
        if (s < 10) {
            n = "0" + s.toString()
        } else {
            n = s.toString()
        }
        return e + a + n
    }
    ;
    this.clockPic = false;
    this.picClockId = 0;
    this.setPicClock = function() {
        var t = this;
        if (this.clockPic) {
            return
        }
        var e = 30;
        this.clockPic = true;
        this.changeClock();
        SAL_setElementVisible(this.overBack, true);
        this.picClockId = SAL_setInterval(function() {
            t.changeClock()
        }, e)
    }
    ;
    this.clockSp = null;
    this.useclock = 0;
    this.changeClock = function() {
        var t = "";
        if (this.useclock == 0) {
            this.useclock = 1;
            t = LIMIT_FREE_ANIM_CLOCK
        } else if (this.useclock == 1) {
            this.useclock = 0;
            t = LIMIT_FREE_ANIM_CLOCK1
        }
        if (!this.clockSp) {
            var e = {
                x: 0,
                y: 0
            };
            if (this.screenV) {
                e.x = 98 * this.ScreenScale;
                e.y = 46 * this.ScreenScale
            } else {
                e.x = 96 * this.ScreenScale;
                if (gGameWidth == 800) {
                    e.y = 65 * this.ScreenScale + 50
                } else {
                    e.y = 65 * this.ScreenScale
                }
            }
            this.clockSp = createImage(t, e, null, this.overBack);
            SAL_setElementScale(this.clockSp, this.ScreenScale, this.ScreenScale)
        }
        SAL_resetElement(this.clockSp, t)
    }
    ;
    this.dispose = function() {
        this.container && SAL_destroyElement(this.container);
        this.maskSendFlower && SAL_destroyElement(this.maskSendFlower);
        this.overBack && SAL_destroyElement(this.overBack);
        this.timeBacktContainer && SAL_destroyElement(this.timeBacktContainer);
        this.timeBack && SAL_destroyElement(this.timeBack);
        this.timeText && SAL_destroyElement(this.timeText);
        this.closeText && SAL_destroyElement(this.closeText);
        SAL_clearInterval(this.picClockId)
    }
    ;
    this.addChild = function(t) {
        SAL_addElement(this.container, t)
    }
    ;
    this.init()
}

function STrialReading() {
    var i = this;
    OContainer.call(this);
    SAL_addElement(g, this.element);
    SAL_setElementIndex(g, this.element, 1e4);
    this.setSize(gGameWidth, gGameHeight);
    this.setPosition(gGameX, 0);
    this.isTrailReading = false;
    var r = "";
    var o = "";
    var h = -1;
    var l = -1;
    this.init = function() {
        var e = this;
        var t = function t() {
            if (GloableData.getInstance().trialReadingStatus == 1 || GloableData.getInstance().trialReadingStatus == 3) {
                return
            }
            e.TimeComponent = new TimeComponent;
            e.addChild(e.TimeComponent);
            e.TimeComponent.countdownTime = GloableData.getInstance().trialReadingTime;
            e.isTrailReading = GloableData.getInstance().trialReadingTime > 0;
            e.TimeComponent.setPosition(gGameWidth - 258, 15);
            if (!GloableData.getInstance().isMobile()) {
                e.TimeComponent.setPosition(tv.canvas.cgMenu.x - 258, 15)
            }
            e.TimeComponent.explainBtn.addClick(function() {
                e.initExplain()
            });
            e.TimeComponent.setLayout();
            e.CountDownFunctionGenerater()
        };
        GloableData.getInstance().getTrialReadingStatus(function() {
            t()
        })
    }
    ;
    this.blockGame = function() {
        t.end()
    }
    ;
    this.initExplain = function() {
        if (this.MessageComponent && this.mask && this.mask.visible) {
            return
        }
        if (this.MessageComponent) {
            this.removeChild(this.MessageComponent)
        }
        this.addMask();
        var a = this;
        var t = GloableData.getInstance().isMobile() ? webConfig.GET_BOX_TRY_PLAY_NUM : webConfig.GET_TRY_PLAY_NUM;
        t += "?gindex=" + gIndex;
        t += GloableData.getInstance().isMobile() ? "&channel=" + channelName : "&channel=pc";
        if (GloableData.getInstance().isMobile())
            t += "&token=" + GloableData.getInstance().userData.token;
        serverAjax.sendGetAjaxJSON(t, function(t) {
            if (!t.data) {
                return
            }
            h = t.data.can_num_limit;
            l = t.data.can_num;
            r = "重新计时 (" + l + "/" + h + ")";
            o = Math.floor(a.TimeComponent.countdownTime / 60);
            var e = a.initExplainInfo();
            a.addMask();
            a.setBlockTouch(true);
            e.message = t.data.msg_body.try_play.join("\n");
            a.MessageComponent = new MessagePanel(e);
            a.addChild(a.MessageComponent);
            a.MessageComponent.init();
            a.MessageComponent.setSize(gGameWidth * .38, gGameHeight * .5);
            a.MessageComponent.setPosition(gGameWidth - a.MessageComponent.width >> 1, gGameHeight - a.MessageComponent.height >> 1);
            var i = a.MessageComponent.getButtons();
            i[0].setSize(137, 50);
            a.MessageComponent.setLayout()
        }, function() {
            SAL_log("get try play number error")
        }, null, null, true)
    }
    ;
    this.initExplainInfo = function() {
        var e = this;
        return {
            title: "作品试看",
            message: "• 未拥有作品的用户只能通过在线试看阅读本作品，在线试看时长" + o + "分钟，请在试看时间结束前购买作品，否则将无法继续阅读；已拥有的用户可以继续阅读或者下载阅读，下载次数不限。" + "\n• 单笔充值8元以上，所有作品在线试看的时长可以重新计时1次，重新计时的次数不累计；重新计时的1次机会使用后，充值8元以上会再次拥有1次重新计时的机会。",
            messageSize: 17,
            messageLineHeight: 28,
            messageOffsetX: 0,
            backUrl: addictionPreventionContentBgPath,
            buttons: [{
                buttonText: r,
                buttonTextColor: get16Color("#999999"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_FIRST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_FIRST,
                clickEvent: function t() {
                    c.call(e)
                }
            }, {
                buttonText: "我知道了",
                buttonTextColor: get16Color("#FFFFFF"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_LAST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_LAST,
                clickEvent: function t() {
                    a.call(e)
                }
            }]
        }
    }
    ;
    this.resetConfirmInfo = function() {
        var e = this;
        return {
            title: "重置试看时间",
            message: "是否使用重新计时？重新计时后，所有作品在线试看的时长将重新计算。",
            messageSize: 17,
            messageLineHeight: 28,
            messageOffsetX: 0,
            backUrl: addictionPreventionContentBgPath,
            buttons: [{
                buttonText: "重新计时",
                buttonTextColor: get16Color("#999999"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_FIRST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_FIRST,
                clickEvent: function t() {
                    u.call(e)
                }
            }, {
                buttonText: "取消",
                buttonTextColor: get16Color("#FFFFFF"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_LAST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_LAST,
                clickEvent: function t() {
                    a.call(e)
                }
            }]
        }
    }
    ;
    this.trialWillEndInfo = function() {
        var e = this;
        return {
            title: "试看结束提醒",
            message: "• 在线试看的时长不足5分钟，检测你拥有所有作品试看时长重新计时的机会" + l + "次，可手动进行重置。" + "\n• 请在试看结束前购买此作品，否则将无法继续阅读；已拥有的用户可以继续阅读或者下载阅读，下载次数不限。 " + "\n• 单笔充值8元以上，所有作品在线试看的时长可以重新计时1次，重新计时的次数不累计；重新计时的1次机会使用后，充值8元以上会再次拥有1次重新计时的机会。 ",
            messageSize: 17,
            messageLineHeight: 28,
            messageOffsetX: 0,
            backUrl: addictionPreventionContentBgPath,
            buttons: [{
                buttonText: r,
                buttonTextColor: get16Color("#999999"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_FIRST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_FIRST,
                clickEvent: function t() {
                    c.call(e)
                }
            }, {
                buttonText: "我知道了",
                buttonTextColor: get16Color("#FFFFFF"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_LAST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_LAST,
                clickEvent: function t() {
                    a.call(e)
                }
            }]
        }
    }
    ;
    this.trialEndInfo = function() {
        var e = this;
        return {
            title: "试看结束",
            message: "作品试看已结束，剩余内容需要购买作品后可继续阅读；原创区已拥有的作品或者同人区送花≥30朵的作品，用户可以继续在线试看或者下载阅读，下载次数不限。",
            messageSize: 17,
            messageLineHeight: 28,
            messageOffsetX: 0,
            backUrl: addictionPreventionContentBgPath,
            cancelBtn: {
                cancelBtnUpUrl: TRAIL_READING_BUUTON_CANCEL,
                cancelBtnDownUrl: TRAIL_READING_BUUTON_CANCEL,
                clickEvent: function t() {
                    n.call(e)
                }
            },
            buttons: [{
                buttonText: "重新计时",
                buttonTextColor: get16Color("#999999"),
                buttonUpUrl: TRAIL_READING_BUTTON_T_FIRST,
                buttonDownUrl: TRAIL_READING_BUTTON_T_FIRST,
                clickEvent: function t() {
                    c.call(e)
                }
            }, {
                buttonText: "存档",
                buttonTextColor: get16Color("#999999"),
                buttonUpUrl: TRAIL_READING_BUTTON_T_FIRST,
                buttonDownUrl: TRAIL_READING_BUTTON_T_FIRST,
                clickEvent: function t() {
                    f.call(e)
                }
            }, {
                buttonText: "去购买",
                buttonTextColor: get16Color("#FFFFFF"),
                buttonUpUrl: TRAIL_READING_BUTTON_T_LAST,
                buttonDownUrl: TRAIL_READING_BUTTON_T_LAST,
                clickEvent: function t() {
                    s.call(e)
                }
            }]
        }
    }
    ;
    this.trialEndBlockInfo = function() {
        var e = this;
        return {
            title: "试看结束",
            message: "作品在线试看时间已结束，检测你拥有重新计时" + l + "次的机会，是否使用重新计时？重新计时后，所有作品在线试看的时长将重新计算。",
            messageSize: 17,
            messageLineHeight: 28,
            messageOffsetX: 0,
            backUrl: addictionPreventionContentBgPath,
            cancelBtn: {
                cancelBtnUpUrl: TRAIL_READING_BUUTON_CANCEL,
                cancelBtnDownUrl: TRAIL_READING_BUUTON_CANCEL,
                clickEvent: function t() {
                    n.call(e)
                }
            },
            buttons: [{
                buttonText: "重新计时",
                buttonTextColor: get16Color("#999999"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_FIRST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_FIRST,
                clickEvent: function t() {
                    c.call(e)
                }
            }, {
                buttonText: "去购买",
                buttonTextColor: get16Color("#FFFFFF"),
                buttonUpUrl: TRAIL_READING_BUTTON_W_LAST,
                buttonDownUrl: TRAIL_READING_BUTTON_W_LAST,
                clickEvent: function t() {
                    s.call(e)
                }
            }]
        }
    }
    ;

    function u() {
        var e = this;
        var t = GloableData.getInstance().isMobile() ? webConfig.GET_BOX_RESET_TRY_PLAY : webConfig.GET_RESET_TRY_PLAY;
        t += "?gindex=" + gIndex;
        t += GloableData.getInstance().isMobile() ? "&channel=" + channelName : "&channel=pc";
        if (GloableData.getInstance().isMobile())
            t += "&token=" + GloableData.getInstance().userData.token;
        serverAjax.sendGetAjaxJSON(t, function(t) {
            if (t.status == -1) {// hintMessage.setHint("重置失败")
            } else {
                // hintMessage.setHint("重置成功");
                if (e.mask)
                    e.mask.setVisible(false);
                e.MessageComponent.setVisible(false);
                e.setBlockTouch(false);
                if (e.TimeComponent) {
                    e.TimeComponent.destoryComponent();
                    e.removeChild(e.TimeComponent);
                    e.TimeComponent = null
                }
                e.init()
            }
        }, function() {
            SAL_log("reset try error")
        }, null, null, true)
    }

    function c() {
        if (l == 0) {
            return
        }
        if (this.MessageComponent) {
            this.removeChild(this.MessageComponent)
        }
        this.addMask();
        this.setBlockTouch(true);
        var t = this.resetConfirmInfo();
        this.MessageComponent = new MessagePanel(t);
        this.addChild(this.MessageComponent);
        this.MessageComponent.init();
        this.MessageComponent.setSize(gGameWidth * .38, gGameHeight * .4);
        this.MessageComponent.setPosition(gGameWidth - this.MessageComponent.width >> 1, gGameHeight - this.MessageComponent.height >> 1);
        var e = this.MessageComponent.getButtons();
        e[0].setSize(137, 50);
        this.MessageComponent.setLayout()
    }

    function a() {
        if (this.mask)
            this.mask.setVisible(false);
        this.MessageComponent.setVisible(false);
        this.setBlockTouch(false);
        if (!this.TimeComponent) {
            t.end(false)
        }
    }

    function s() {
        var t = this;
        SAL_payMoney(7, 0, {
            purchaseType: "flower",
            countAvailable: true
        }, null, function() {
            GloableData.getInstance().getFlowerByMe(function() {
                if (t.mask)
                    t.mask.setVisible(false);
                t.MessageComponent.setVisible(false);
                t.setBlockTouch(false);
                t.init()
            })
        })
    }

    function f() {
        if (this.mask)
            this.mask.setVisible(false);
        this.MessageComponent.setVisible(false);
        this.setBlockTouch(false);
        tv.scene = new SSavefile(false,true)
    }

    function n() {
        SAL_exit()
    }
    this.CountDownFunctionGenerater = function() {
        if (!this.TimeComponent) {
            return
        }
        this.TimeComponent.willEndFunction = t.willEnd;
        this.TimeComponent.endFunction = t.end
    }
    ;
    var t = {
        willEnd: function t() {
            SAL_log("trial reading will end!");
            var a = i;
            var e = GloableData.getInstance().isMobile() ? webConfig.GET_BOX_TRY_PLAY_NUM : webConfig.GET_TRY_PLAY_NUM;
            e += "?gindex=" + gIndex;
            e += GloableData.getInstance().isMobile() ? "&channel=" + channelName : "&channel=pc";
            if (GloableData.getInstance().isMobile())
                e += "&token=" + GloableData.getInstance().userData.token;
            serverAjax.sendGetAjaxJSON(e, function(t) {
                if (!t.data) {
                    return
                }
                h = t.data.can_num_limit;
                l = t.data.can_num;
                r = "重新计时 (" + l + "/" + h + ")";
                o = Math.floor(a.TimeComponent.countdownTime / 60);
                if (a.MessageComponent) {
                    a.removeChild(a.MessageComponent)
                }
                var e = a.trialWillEndInfo();
                a.addMask();
                a.setBlockTouch(true);
                e.message = t.data.msg_body.try_notice.join("\n");
                a.MessageComponent = new MessagePanel(e);
                a.addChild(a.MessageComponent);
                a.MessageComponent.init();
                a.MessageComponent.setSize(gGameWidth * .38, gGameHeight * .5);
                a.MessageComponent.setPosition(gGameWidth - a.MessageComponent.width >> 1, gGameHeight - a.MessageComponent.height >> 1);
                var i = a.MessageComponent.getButtons();
                i[0].setSize(137, 50);
                a.MessageComponent.setLayout()
            }, function() {
                SAL_log("get try play number error")
            }, null, null, true)
        },
        end: function t() {
            var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            SAL_log("trial reading is end!");
            var n = i;
            var e = GloableData.getInstance().isMobile() ? webConfig.GET_BOX_TRY_PLAY_NUM : webConfig.GET_TRY_PLAY_NUM;
            e += "?gindex=" + gIndex;
            e += GloableData.getInstance().isMobile() ? "&channel=" + channelName : "&channel=pc";
            if (GloableData.getInstance().isMobile())
                e += "&token=" + GloableData.getInstance().userData.token;
            serverAjax.sendGetAjaxJSON(e, function(t) {
                if (!t.data) {
                    return
                }
                h = t.data.can_num_limit;
                l = t.data.can_num;
                r = "重新计时 (" + l + "/" + h + ")";
                o = n.TimeComponent ? Math.floor(n.TimeComponent.countdownTime / 60) : 0;
                n.isTrailReading = false;
                if (n.MessageComponent) {
                    n.removeChild(n.MessageComponent)
                }
                if (n.TimeComponent) {
                    n.TimeComponent.destoryComponent();
                    n.removeChild(n.TimeComponent);
                    n.TimeComponent = null
                }
                n.addMask();
                n.setBlockTouch(true);
                var e = n.trialEndInfo();
                var i = tv.storyList.currentStory && tv.storyList.currentStory.event;
                if (tv.storyList)
                    e = i ? n.trialEndInfo() : n.trialEndBlockInfo();
                if (l > 0 && s) {
                    c.call(n);
                    return
                }
                e.message = t.data.msg_body.try_end.join("\n");
                n.MessageComponent = new MessagePanel(e);
                n.addChild(n.MessageComponent);
                n.MessageComponent.init();
                if (tv.storyList) {
                    tv.storyList.currentStory && tv.storyList.currentStory.event ? n.MessageComponent.setSize(gGameWidth * .38, gGameHeight * .5) : n.MessageComponent.setSize(gGameWidth * .38, gGameHeight * .45)
                }
                n.MessageComponent.setPosition(gGameWidth - n.MessageComponent.width >> 1, gGameHeight - n.MessageComponent.height >> 1);
                if (!i) {
                    var a = n.MessageComponent.getButtons();
                    a[0].setSize(137, 50)
                }
                n.MessageComponent.setLayout()
            }, function() {
                SAL_log("get try play number error")
            }, null, null, true)
        }
    };
    this.addMask = function() {
        if (!this.mask) {
            this.mask = new OBitmap(autoSaveMaskPath);
            this.addChild(this.mask);
            this.mask.setSize(gGameWidth, gGameHeight);
            this.mask.setAlpha(.8)
        }
        this.mask.setVisible(true)
    }
    ;
    this.init()
}

function MessagePanel(r) {
    OContainer.call(this);
    var e = 21;
    var o = null;
    var h = null;
    var l = null;
    var c = [];
    var u = null;
    var f = [];
    var d = -1;
    var m = 24;
    var g = null;
    this.titleText = r.title;
    this.messageText = r.message;
    this.buttonArrayInfo = r.buttons;
    this.init = function() {
        var i = this;
        o = new OBitmap(r.backUrl);
        h = new OText(this.titleText);
        h.setTextSize(e);
        h.setFont("微软雅黑");
        h.setColor(get16Color("#000000"));
        if (this.messageText instanceof Array) {
            this.messageText.forEach(function(t) {
                var e = new OText(t);
                e.setTextSize(r.messageSize);
                e.setColor(get16Color("#666666"));
                e.setTextLineHeight(r.messageLineHeight);
                c.push(e)
            })
        } else {
            l = new OText(this.messageText);
            l.setTextSize(r.messageSize);
            l.setColor(get16Color("#666666"));
            l.setTextLineHeight(r.messageLineHeight)
        }
        g = new OSlideContainer;
        if (this.messageText instanceof Array) {
            c.forEach(function(t) {
                g.addChild(t)
            })
        } else {
            g.addChild(l)
        }
        this.addChild(o);
        this.addChild(h);
        this.addChild(g);
        if (r.cancelBtn && GloableData.getInstance().isMobile()) {
            var t = r.cancelBtn;
            u = new ONButton(t.cancelBtnUpUrl,t.cancelBtnDownUrl);
            u.addClick(t.clickEvent);
            this.addChild(u)
        }
        d = this.buttonArrayInfo.length;
        this.buttonArrayInfo.forEach(function(t) {
            var e = new ONButton(t.buttonUpUrl,t.buttonDownUrl,t.buttonText);
            e.addClick(t.clickEvent);
            e.setTextColor(t.buttonTextColor);
            i.addChild(e);
            if (d >= 3) {
                e.setSizeGrid([10, 10, 10, 10], 100, e.height);
                e.setTextSize(18)
            }
            f.push(e)
        })
    }
    ;
    this.setLayout = function() {
        var i = this;
        o.setSize(this.width, this.height);
        h.setPosition(this.width - h.textWidth >> 1, m);
        if (this.messageText instanceof Array) {
            var a = 0;
            c.forEach(function(t) {
                t.setSize(i.width - (m + r.messageOffsetX) * 2);
                var e = SAL_getTextSize(t.element);
                t.setSize(i.width - (m + r.messageOffsetX) * 2, e[1]);
                t.setPosition(0, a);
                a += t.height
            })
        } else {
            l.setSize(this.width - (m + r.messageOffsetX) * 2);
            var t = SAL_getTextSize(l.element);
            l.setSize(this.width - (m + r.messageOffsetX) * 2, t[1]);
            l.setPosition(0, 0)
        }
        if (u) {
            u.setPosition(this.width - 34, 6)
        }
        var e = m;
        var s = 0;
        f.forEach(function(t) {
            s += t.width
        });
        var n = parseInt((this.width - e * 2 - s) / (d - 1));
        f.forEach(function(t) {
            t.setPosition(e, i.height - m - t.height);
            e += t.width + n
        });
        g.setSize(this.width - (m + r.messageOffsetX) * 2, this.height - m * 2 - h.textHeight - 72);
        g.setPosition(this.width - g.width >> 1, h.y + h.textHeight + m - 10)
    }
    ;
    this.resetButton = function(t) {
        var a = this;
        t.buttons.forEach(function(t, e) {
            if (f[e]) {
                var i = f[e];
                i.setInfo(t.buttonUpUrl, t.buttonDownUrl, t.buttonText);
                i.removeClick(a.buttonArrayInfo[e].clickEvent);
                i.addClick(t.clickEvent)
            } else {
                var i = new ONButton(t.buttonUpUrl,t.buttonDownUrl,t.buttonText);
                i.addClick(t.clickEvent);
                a.addChild(i);
                f.push(i)
            }
        });
        this.buttonArrayInfo = t.buttons
    }
    ;
    this.resetTitle = function(t) {
        this.titleText = t.title;
        h.setText(this.titleText)
    }
    ;
    this.resetMessage = function() {
        this.messageText = r.message;
        l.setText(this.messageText)
    }
    ;
    this.getButtons = function() {
        return f
    }
}

function TimeComponent() {
    OContainer.call(this);
    this.setSize(255, 38);
    this.setBlockTouch(true);
    var t = "试看倒计时:";
    var e = null;
    var i = null;
    var a = null;
    this.explainBtn = null;
    this.willEndFunction = null;
    this.endFunction = null;
    this.timer = null;
    this.countdownTime = -1;
    this.formatTime = "";
    this.init = function() {
        this.drawElements();
        this.startCountDown()
    }
    ;
    this.drawElements = function() {
        e = new OBitmap("",function() {
            e.setPosition(0, 0);
            e.setAlpha(.8);
            e.setSize(250, 38)
        }
        );
        this.addChild(e);
        e.setUrl(hpMsgTipBg);
        i = new OText(t + " " + this.formatTime);
        this.addChild(i);
        a = new ONButton(TRAIL_READING_BUUTON_CANCEL,TRAIL_READING_BUUTON_CANCEL);
        this.addChild(a);
        this.explainBtn = new ONButton(TRAIL_READING_BUUTON_QUESTION_MARK,TRAIL_READING_BUUTON_QUESTION_MARK);
        this.addChild(this.explainBtn)
    }
    ;
    this.setLayout = function() {
        var t = this;
        i.setColor(get16Color("#FFFFFF"));
        i.setPosition(45, 5.5);
        i.setTextSize(17);
        a.setPosition(212, 2);
        a.addClick(function() {
            t.setVisible(false)
        });
        this.explainBtn.setPosition(12, 6.5);
        this.explainBtn.setScale(.5, .5)
    }
    ;
    this.startCountDown = function() {
        var t = this;
        if (this.timer) {
            return
        }
        this.timer = SAL_setInterval(function() {
            t.changeTime()
        }, 1e3)
    }
    ;
    this.changeTime = function() {
        this.checkTrialReadingStatus();
        this.formatTime = this.getFormatTime();
        i.setText(t + " " + this.formatTime);
        this.countdownTime--
    }
    ;
    this.checkTrialReadingStatus = function() {
        if (this.countdownTime <= 300 && this.countdownTime > 0) {
            this.willEndFunction && this.willEndFunction();
            this.willEndFunction = null;
            return
        }
        if (this.countdownTime <= 0) {
            this.endFunction && this.endFunction();
            this.endFunction = null;
            return
        }
    }
    ;
    this.getFormatTime = function() {
        var t = Math.floor(this.countdownTime / 60 / 60);
        var e = void 0;
        if (t < 10) {
            e = "0" + t.toString() + ":"
        } else {
            e = t.toString() + ":"
        }
        var i = Math.floor(this.countdownTime / 60) % 60;
        var a = void 0;
        if (i < 10) {
            a = "0" + i.toString() + ":"
        } else {
            a = i.toString() + ":"
        }
        var s = this.countdownTime % 60;
        var n = void 0;
        if (s < 10) {
            n = "0" + s.toString()
        } else {
            n = s.toString()
        }
        return e + a + n
    }
    ;
    this.destoryComponent = function() {
        SAL_clearInterval(this.timer);
        this.timer = null;
        this.dispose()
    }
    ;
    this.init()
}

function CHPLockErrorMessageView() {
    OContainer.call(this);
    SAL_addElement(g, this.element);
    this.parent = g;
    this.setIndex(8e3);
    this.setBlockTouch(true);
    this.back = null;
    this.closeBtn = null;
    this.bg = null;
    this.button_1 = null;
    this.button_2 = null;
    this.button_3 = null;
    this.itemTextTitle = null;
    this.itemText = null;
    this.textMsg = "请检查或打开网络后重试";
    this.titleMsg = "网络异常";
    this.viewSp = null;
    this.postionObj = {
        round: 22.5,
        bg: {
            w: 480,
            h: 320
        },
        textp: {
            w: 220,
            h: 50,
            x: .5,
            y: 22
        },
        closeBtn: {
            x: 42,
            y: 24
        },
        btn_1: {
            x: 70,
            y: 17,
            w: 145,
            h: 46
        },
        btn_2: {
            x: 260,
            y: 0,
            w: 145,
            h: 46
        },
        btn_3: {
            x: 318,
            y: 0,
            w: 138,
            h: 45
        },
        icon: {
            x: .5,
            y: 44,
            w: 80,
            h: 80
        }
    };
    this.init = function() {
        var t = this;
        this.viewSp = new OContainer;
        this.back = new OBitmap(autoSaveMaskPath);
        this.addChild(this.back);
        this.bg = new OBitmap(SHOP_LOCK_BG,function() {
            t.bg.setSize(t.postionObj.bg.w, t.postionObj.bg.h)
        }
        );
        this.bg.setPosition(gGameWidth - this.postionObj.bg.w >> 1, gGameHeight - this.postionObj.bg.h >> 1);
        this.addChild(this.bg);
        this.icon = new OBitmap(hpErrorIcon,function() {
            t.icon.setSize(t.postionObj.icon.w, t.postionObj.icon.h)
        }
        );
        this.icon.setPosition(gGameWidth - this.postionObj.icon.w >> 1, this.bg.y + this.postionObj.icon.y);
        this.addChild(this.icon);
        this.addChild(this.viewSp);
        this.itemTextTitle = new OText(this.titleMsg);
        this.itemTextTitle.setTextSize(18);
        this.itemTextTitle.setColor(get16Color("#2e2f31"));
        this.itemTextTitle.setPosition(gGameWidth - this.itemTextTitle.textWidth >> 1, 0);
        this.viewSp.addChild(this.itemTextTitle);
        this.itemText = new OText(this.textMsg);
        this.itemText.setTextSize(18);
        this.itemText.setColor(get16Color("#2e2f31"));
        this.itemText.setPosition(gGameWidth - this.itemText.textWidth >> 1, this.itemTextTitle.y + this.itemTextTitle.textHeight + 14);
        this.viewSp.addChild(this.itemText);
        this.closeBtn = new ONButton(SHOP_LOCK_CLOSE,SHOP_LOCK_CLOSE);
        this.closeBtn.setPosition(this.bg.x + this.postionObj.bg.w - this.postionObj.closeBtn.x, this.bg.y + this.postionObj.closeBtn.y);
        this.addChild(this.closeBtn);
        this.closeBtn.addClick(function() {
            t.closeView()
        });
        this.button_2 = new ONButton(autoSaveJxPath,autoSaveJxPath,"重试");
        this.button_2.setFont("黑体");
        this.button_2.setTextColor(get16Color("#ffffff"));
        if (clientType == 1 || clientType == 5) {
            this.button_2.setTextColor(get16Color("#2e2f31"))
        }
        this.button_2.setPosition(gGameWidth - this.postionObj.btn_2.w >> 1, this.itemText.y + this.itemText.textHeight + this.postionObj.btn_1.y + this.postionObj.btn_2.y + this.postionObj.btn_1.y);
        this.viewSp.addChild(this.button_2);
        this.button_2.addClick(function() {
            t.continueView()
        });
        this.viewSp.setPosition(0, this.icon.y + this.postionObj.icon.h + this.postionObj.textp.y)
    }
    ;
    this.continueView = function() {
        this.dispose()
    }
    ;
    this.openSaveFile = function() {
        tv.scene = new SSavefile(false,true)
    }
    ;
    this.closeView = function() {
        this.dispose()
    }
    ;
    this.init()
}

function UnauditedText() {
    OContainer.call(this);
    SAL_addElement(g, this.element);
    SAL_setElementIndex(g, this.element, 100100);
    this.setPosition(gGameX, 0);
    this.line_1 = "尚未经过审核，请勿传播";
    this.line_2 = "本作品由player制作";
    this.line_3 = "用户";
    this.line_4 = "ID: uid";
    this.line_5 = "作品";
    this.line_6 = "ID: guid";
    this.fontSize = 14;
    this.fontColor = "#ffffff";
    this.textWidth = 15;
    this.init = function() {
        this.line_2 = this.line_2.replace("player", GloableData.getInstance().gameInfo.author_uname + "");
        this.line_4 = this.line_4.replace("uid", GloableData.getInstance().gameInfo.author_uid + "");
        this.line_6 = this.line_6.replace("guid", gIndex + "");
        this.text_1 = this.createText(this.line_1);
        this.text_2 = this.createText(this.line_2);
        this.text_3 = this.createText(this.line_3);
        this.text_4 = this.createText(this.line_4, 200);
        this.text_5 = this.createText(this.line_5);
        this.text_6 = this.createText(this.line_6, 200);
        this.text_2.setPosition(this.text_1.width, 0);
        this.text_3.setPosition(this.text_2.x + this.text_2.width + 8, 0);
        this.text_4.setRotation(90, 0, 0);
        this.text_4.setPosition(this.text_3.x + this.textWidth + 2, this.text_3.y + this.text_3.textHeight + 20);
        this.text_5.setPosition(this.text_3.x, this.text_4.y + this.text_4.textWidth);
        this.text_6.setRotation(90, 0, 0);
        this.text_6.setPosition(this.text_4.x, this.text_5.y + this.text_5.textHeight + 20);
        this.addChild(this.text_1);
        this.addChild(this.text_2);
        this.addChild(this.text_3);
        this.addChild(this.text_4);
        this.addChild(this.text_5);
        this.addChild(this.text_6);
        this.setAlpha(.5);
        var t = 120 + 72;
        var e = 80;
        var i = 60;
        this.setPosition(gGameWidth - e + (i - 30 >> 1), t + 18)
    }
    ;
    this.createText = function(t, e) {
        var i = this.textWidth;
        if (e) {
            i = e
        }
        var a = new OText(t);
        a.setFont("微软雅黑");
        a.setTextSize(this.fontSize);
        a.setColor(get16Color(this.fontColor));
        a.setSize(i, gGameHeight);
        if (e) {
            a.width = a.textWidth
        }
        return a
    }
    ;
    this.init()
}

function CAdverConfirm() {
    this.container = SALContainer();
    SAL_addTouchDown(this.container, function() {});
    SAL_addTouchUp(this.container, function() {});
    SAL_addTouchMove(this.container, function() {});
    SAL_setElementIndex(g, this.container, 8e3);
    SAL_setPosition(this.container, gGameX, 0);
    SAL_setElementVisible(this.container, false);
    var l = null;
    var c = null;
    var u = null;
    var f = null;
    var d = null;
    var m = "";
    this.init = function() {
        var t = this;
        var e = fileListFato("graphics/other/ad/bg.png");
        var i = fileListFato("graphics/other/ad/icon.png");
        var a = fileListFato("graphics/other/ad/cancel.png");
        var s = fileListFato("graphics/other/ad/confirm.png");
        var n, r, o, h;
        l = SALSprite(e);
        SAL_addElement(this.container, l);
        n = SAL_getElementWidth(l);
        r = SAL_getElementHeight(l);
        o = (gGameWidth - n) / 2;
        h = (gGameHeight - r) / 2;
        SAL_setPosition(l, o, h);
        c = SALSprite(i);
        SAL_addElement(this.container, c);
        n = SAL_getElementWidth(c);
        r = SAL_getElementHeight(c);
        o = (gGameWidth - n) / 2;
        h = (gGameHeight - r) / 2;
        SAL_setPosition(c, o, h - 96);
        f = SALButton(s, "", "看广告");
        SAL_addElement(this.container, f);
        n = SAL_getElementWidth(f);
        r = SAL_getElementHeight(f);
        o = (gGameWidth - n) / 2;
        h = (gGameHeight - r) / 2;
        SAL_setPosition(f, o + 93, h + 100);
        SAL_addClick(f, function() {
            t.hide();
            oaudio.pauseBgAudio();
            SAL_showADVideo(tv.adInfo.adSuccessCallback.bind(tv.adInfo), tv.adInfo.adFailCallback.bind(tv.adInfo), m)
        });
        d = SALButton(a, "", "取消");
        SAL_addElement(this.container, d);
        n = SAL_getElementWidth(d);
        r = SAL_getElementHeight(d);
        o = (gGameWidth - n) / 2;
        h = (gGameHeight - r) / 2;
        SAL_setPosition(d, o - 93, h + 100);
        SAL_addClick(d, tv.adInfo.adFailCallback.bind(tv.adInfo));
        u = SALText();
        SAL_setElementSize(u, 260, 60);
        SAL_addElement(this.container, u)
    }
    ;
    this.dispose = function() {
        SAL_destroyElement(this.container);
        l = null;
        c = null;
        u = null;
        f = null;
        d = null
    }
    ;
    this.show = function(t, e) {
        m = e;
        if (u != null) {
            SAL_resetElement(u, t);
            var i = SAL_getTextSize(u);
            SAL_setTextColor(u, SALColor(136, 136, 136, 255));
            SAL_setPosition(u, (gGameWidth - i[0]) / 2, (gGameHeight - i[1]) / 2 + 12)
        }
        SAL_setElementVisible(this.container, true)
    }
    ;
    this.hide = function() {
        oaudio.resumeBgAudio();
        SAL_setElementVisible(this.container, false)
    }
    ;
    this.init()
}

function CAdCountDown() {
    this.width = 320;
    this.height = 30;
    this.curCD = 0;
    this.timerID = -1;
    this.visible = false;
    this.container = SALContainer(this.width, this.height);
    SAL_addTouchDown(this.container, function() {});
    SAL_addTouchUp(this.container, function() {});
    SAL_addTouchMove(this.container, function() {});
    SAL_setElementIndex(g, this.container, 7900);
    SAL_setPosition(this.container, gGameX, 0);
    SAL_setElementVisible(this.container, this.visible);
    var t = null
      , a = null;
    this.init = function() {
        t = SALSprite(adCountDownBG);
        SAL_addElement(this.container, t);
        a = SALText();
        SAL_setTextColor(a, SALColor(255, 255, 255, 255));
        SAL_setTextFontSize(a, 18);
        SAL_addElement(this.container, a)
    }
    ;
    this.dispose = function() {
        SAL_destroyElement(this.container);
        t = null;
        a = null
    }
    ;
    this.show = function(t, e) {
        this.curCD = t;
        if (a != null) {
            SAL_resetElement(a, this.getCDString());
            var i = SAL_getTextSize(a);
            SAL_setPosition(a, (this.width - i[0]) / 2, (this.height - i[1]) / 2);
            this.timerID = SAL_setInterval(this.updateCD.bind(this), 1e3)
        }
        SAL_setPosition(this.container, (gGameWidth - this.width) / 2, e);
        this.visible = true;
        SAL_setElementVisible(this.container, this.visible)
    }
    ;
    this.hide = function() {
        this.visible = false;
        SAL_setElementVisible(this.container, this.visible);
        SAL_clearInterval(this.timerID)
    }
    ;
    this.updateCD = function() {
        this.curCD--;
        if (this.curCD > 0) {
            SAL_resetElement(a, this.getCDString());
            var t = SAL_getTextSize(a);
            SAL_setPosition(a, (this.width - t[0]) / 2, (this.height - t[1]) / 2)
        } else {
            this.hide()
        }
    }
    ;
    this.getCDString = function() {
        var t = Math.floor(this.curCD / 60);
        var e = Math.floor(this.curCD - t * 60);
        var i = e + "秒";
        if (t > 0) {
            i = t + "分" + i
        }
        return "广告冷却中，" + i + "后可再次观看"
    }
    ;
    this.init()
}

function Splash() {
    OContainer.call(this);
    this.adView = null;
    this.adViewBG = null;
    this.tips = null;
    this.tf = null;
    this.pbg = null;
    this.ph = null;
    this.pf = null;
    this.logo = null;
    this.adurl = "";
    this.imgurl = "";
    this.pbgurl = "";
    this.pfurl = "";
    this.phurl = "";
    this.logoY = 100;
    this.up = true;
    this.logoFloatTimerID = -1;
    this.loadingBarPosY = 0;
    this.pfW = 0;
    this.setSize(gGameWidth, gGameHeight);
    var t = new Array;
    this.init = function() {
        var e = this;
        t.push(splashBG);
        SAL_preload(g, t, function(t) {
            if (t == 1) {
                e.adViewBG = new OBitmap(splashBG);
                e.addChild(e.adViewBG);
                e.adViewBG.setSize(gGameWidth, gGameHeight)
            }
        }, 4, true)
    }
    ;
    this.blockViewShow = function(t) {
        var e = this;
        this.imgurl = t;
        SAL_preload(g, [this.imgurl], function(t) {
            if (t == 1) {
                e.adView = new OBitmap(e.imgurl);
                e.addChild(e.adView);
                e.adView.setPosition(gGameWidth - e.adView.width >> 1, gGameHeight - e.adView.height >> 1)
            }
        }, 4, true)
    }
    ;
    this.adViewShow = function() {
        var t = this;
        this.currentProgress = 0;
        if (this.imgurl) {
            this.adView = new OBitmap(this.imgurl);
            this.addChild(this.adView);
            this.adView.setPosition(gGameWidth - this.adView.width >> 1, gGameHeight - this.adView.height >> 1);
            this.adView.addEvent("click", function() {
                SAL_openWebView(t.adurl)
            })
        }
        this.setLoadingBar();
        this.tipsViewShow()
    }
    ;
    this.tipsViewShow = function() {
        var t = Tips.length;
        var e = Math.floor(Math.random() * t);
        this.tips = new OText(Tips[e]);
        this.addChild(this.tips);
        this.tips.setTextSize(13);
        this.tips.setColor(get16Color("#FFFFFF"));
        var i = parseInt(this.tips.textWidth);
        this.imgurl ? this.tips.setPosition((gGameWidth - i) / 2, this.pbg.y + 50) : this.tips.setPosition((gGameWidth - i) / 2, this.pbg.y + 60)
    }
    ;
    this.setLoadingBar = function() {
        this.tf = new OText("0%");
        this.tf.setColor(get16Color("#D0D0D0"));
        this.tf.setTextSize(16);
        this.addChild(this.tf);
        this.pbg = new OBitmap(this.pbgurl);
        this.addChild(this.pbg);
        this.ph = new OBitmap(this.phurl);
        this.addChild(this.ph);
        this.ph.setIndex(20);
        this.ph.rotateImage(360, 768, .5, .5, true);
        this.pf = new OBitmap(this.pfurl);
        this.addChild(this.pf);
        if (!this.imgurl) {
            this.logo = new OBitmap(this.logourl);
            this.addChild(this.logo)
        }
        this.setLoadingPos()
    }
    ;
    this.setLoadingPos = function() {
        var t = this;
        var e = gGameWidth - this.pbg.width >> 1;
        this.loadingBarPosY = gGameWidth > gGameHeight ? gGameWidth <= 960 ? 451 : gGameHeight / 2 + 260 : gGameHeight <= 960 ? 798 : 840;
        if (!this.imgurl) {
            gGameWidth > gGameHeight ? this.loadingBarPosY -= 116 : this.loadingBarPosY -= 266
        }
        this.pbg.setPosition(e, this.loadingBarPosY);
        var i = e + (this.pbg.width - this.pf.width >> 1);
        var a = this.loadingBarPosY + (this.pbg.height - this.pf.height >> 1);
        this.pf.setPosition(i, a);
        this.pf.setClip(0, this.pf.height);
        this.pfW = this.pf.width;
        var s = this.pf.x;
        var n = this.pf.y + (this.pf.height >> 1);
        this.ph.setAnchor(.5, .5);
        this.ph.setPosition(s, n);
        this.tf.setPosition(this.pbg.x + this.pbg.width + 10, this.loadingBarPosY + (this.pbg.height - this.tf.textHeight >> 1));
        var r = this.loadingBarPosY - 100;
        if (clientType == 1) {
            r = this.loadingBarPosY - 170
        }
        if (!this.imgurl) {
            this.logo.setPosition(gGameWidth - this.logo.width >> 1, r);
            this.logoY = this.logo.y;
            this.logoFloatTimerID = SAL_setInterval(function() {
                if (t.logoY > r + 10) {
                    t.up = false
                } else if (t.logoY < r - 10) {
                    t.up = true
                }
                t.logoY += t.up ? 1 : -1;
                t.logo.setPosition(t.logo.x, t.logoY)
            }, 64)
        }
    }
    ;
    this.progress = 0;
    var e = FPS / 1e5;
    this.setProgress = function(t) {
        t > 1 && (t = 1);
        this.progress = t
    }
    ;
    this.currentProgress = 0;
    this.update = function() {
        var t = this.currentProgress > .9 ? e : e * 5;
        if (this.progress >= 1) {
            t = e * 30
        }
        this.currentProgress += t;
        if (this.currentProgress >= .99 && this.progress < 1) {
            this.currentProgress = .99
        }
        this.currentProgress > 1 && (this.currentProgress = 1);
        if (this.tf && this.pf) {
            this.tf.setText(parseInt(this.currentProgress * 100) + "%");
            this.tf.setPosition(this.pbg.x + this.pbg.width + 10, this.loadingBarPosY + (this.pbg.height - this.tf.textHeight >> 1));
            this.pf.setClip(parseInt(this.currentProgress * this.pfW), this.pf.height);
            this.ph.setPosition(this.pf.x + this.pfW * this.currentProgress, this.ph.y)
        }
        if (this.currentProgress >= 1 && this.pf) {
            SAL_clearInterval(this.logoFloatTimerID);
            if (GloableData.getInstance().isMobile() && !isM) {
                this.endSplash()
            } else {
                this.setComplete()
            }
        }
    }
    ;
    this.disposeAnim = function() {
        if (this.pbg) {
            this.pbg.dispose();
            this.pbg = null
        }
        if (this.pf) {
            this.pf.dispose();
            this.pf = null
        }
        if (this.ph) {
            this.ph.dispose();
            this.ph = null
        }
        if (this.logo) {
            this.logo.dispose();
            this.logo = null
        }
        if (this.tips) {
            this.tips.dispose();
            this.tips = null
        }
    }
    ;
    this.setComplete = function() {
        var t = this;
        this.disposeAnim();
        this.tf.setText("点击任意位置进入");
        this.tf.setPosition(gGameWidth - this.tf.textWidth >> 1, this.loadingBarPosY);
        if (!this.imgurl) {
            this.endSplash()
        } else {
            this.adViewBG.addEvent("click", function() {
                t.endSplash()
            })
        }
    }
    ;
    this.endSplash = function() {
        if (!Configuration.isH5 && !Configuration.isXyxAdVideo) {
            tv.getFlower()
        }
        gLoadAssets.endScene();
        this.dispose();
        SAL_manualGC(g, 4);
        splash = null
    }
    ;
    this.loadAss = function(t, e) {
        var i = this;
        this.imgurl = t;
        this.adurl = e;
        this.pbgurl = splashLoading + "pbg.png";
        this.pfurl = splashLoading + "pf.png";
        this.phurl = splashLoading + "ph.png";
        this.logourl = splashLoading + "logo.png";
        var a = [this.pbgurl, this.pfurl, this.phurl, this.logourl];
        if (this.imgurl) {
            a.push(this.imgurl)
        }
        SAL_preload(g, a, function(t) {
            if (t == 1) {
                i.adViewShow()
            }
        }, 4, true)
    }
    ;
    this.init()
}

function CommonMessage(u, f, t, d, e) {
    var m = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "提示";
    OContainer.call(this, gGameWidth, gGameHeight);
    this.message = u;
    this.callback1 = t;
    this.callback2 = e;
    this.titleMessage = m;
    var i = void 0
      , a = void 0
      , s = void 0
      , n = void 0
      , r = void 0
      , o = void 0
      , h = void 0
      , l = void 0
      , c = void 0;
    this.bgUrl = commonMessageBg;
    this.lineUrl = commonMessageLine;
    this.cnUrl = commonMessageIcon;
    this.leftBtnUrl = commonMessageLeftBtn;
    this.rightBtnUrl = commonMessageRightBtn;
    this.aloneBtnUrl = commonMessageAloneBtn;
    this.succenUrl = commonMessageSuccenBg;
    this.messageSize = 17;
    this.setBlockTouch(true);
    this.btn1Color = "#232323";
    this.btn2Color = "#232323";
    this.messageColor = "#666666";
    this.isShowSuccenBg = false;
    this.init = function() {
        var t = this;
        i = new OBitmap(autoSaveMaskPath);
        this.addChild(i);
        i.setSize(gGameWidth, gGameHeight);
        l = new OBitmap(this.succenUrl);
        if (this.isShowSuccenBg) {
            this.addChild(l)
        }
        a = new OBitmap(this.bgUrl);
        this.addChild(a);
        a.setPosition((gGameWidth - 354) / 2, (gGameHeight - 220) / 2);
        o = new OBitmap(this.lineUrl);
        this.addChild(o);
        o.setPosition(gGameWidth - 300 >> 1, (gGameHeight - 220) / 2);
        l.setPosition(gGameWidth - 482 >> 1, a.y - 180);
        h = new OBitmap(this.cnUrl);
        this.addChild(h);
        h.setPosition(gGameWidth - 118 >> 1, a.y - 80);
        c = new OText(this.titleMessage);
        c.setSize(354, 100);
        c.setTextSize(26);
        this.addChild(c);
        c.setPosition(gGameWidth - c.textWidth >> 1, a.y + 45);
        c.setColor(get16Color("#2C2C2C"));
        s = new OText(u);
        s.setSize(300, 200);
        s.setTextSize(this.messageSize);
        s.setTextLineHeight(30);
        this.addChild(s);
        s.setPosition((gGameWidth - s.textWidth) / 2, c.y + 45);
        s.setColor(get16Color(this.messageColor));
        a.setSizeGrid([20, 20, 20, 20], 354, 217 + (s.textHeight - 30));
        if (clientType == 1 || clientType == 5) {
            a.setSizeGrid([20, 20, 20, 20], 354, 210 + (s.textHeight - 30))
        }
        var e = this.aloneBtnUrl;
        if (d) {
            e = this.leftBtnUrl
        }
        n = new ONButton(e,e,f);
        this.addChild(n);
        n.setPosition((gGameWidth - n.width) / 2, a.y + a.height - 79);
        n.setTextSize(19);
        n.setTextColor(get16Color("#ffffff"));
        n.setFont("微软雅黑");
        n.addClick(function() {
            t.callback1 && t.callback1();
            t.dispose()
        });
        if (clientType == 1 || clientType == 5) {
            o.setSize(354, 86);
            o.setPosition(a.x, a.y - 30);
            c.setPosition(gGameWidth - c.textWidth >> 1, o.y + (o.height - c.textHeight >> 1));
            s.setPosition((gGameWidth - s.textWidth) / 2, c.y + 75);
            h.setVisible(false);
            l.setVisible(false);
            n.setTextColor(get16Color(clientType == 5 ? "#ffffff" : "#000000"));
            n.setPosition((gGameWidth - n.width) / 2, a.y + a.height - n.height - 30)
        }
        if (d) {
            r = new ONButton(this.rightBtnUrl,this.rightBtnUrl,d);
            this.addChild(r);
            n.setPosition(a.x, a.y + a.height - 72);
            n.setTextColor(get16Color(this.btn1Color));
            r.setPosition(a.x + 176, n.y);
            r.setTextSize(19);
            r.setFont("微软雅黑");
            r.setTextColor(get16Color(this.btn2Color));
            r.addClick(function() {
                t.callback2 && t.callback2();
                t.dispose()
            });
            if (clientType == 1 || clientType == 5) {
                n.setPosition(a.x + 20, a.y + a.height - 82);
                r.setPosition(a.x + 196, n.y)
            }
        }
        if (this.callback2) {
            i.addEvent("click", function() {
                t.callback2 && t.callback2();
                t.dispose()
            })
        }
    }
    ;
    this.update = function() {}
}

function CommonMessageOfColorText(i, a, t, s, e) {
    var u = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "提示";
    OContainer.call(this, gGameWidth, gGameHeight);
    this.message = i;
    this.callback1 = t;
    this.callback2 = e;
    this.titleMessage = u;
    var n = void 0
      , r = void 0
      , o = void 0
      , h = void 0
      , l = void 0
      , c = void 0;
    this.bgUrl = commonMessageBg;
    this.leftBtnUrl = commonMessageLeftBtn;
    this.rightBtnUrl = commonMessageRightBtn;
    this.aloneBtnUrl = commonMessageAloneBtn;
    this.messageSize = 20;
    this.setBlockTouch(true);
    this.btn1Color = "#232323";
    this.btn2Color = "#232323";
    this.messageColor = "#2c2c2c";
    this.init = function() {
        var t = this;
        n = new OBitmap(autoSaveMaskPath);
        this.addChild(n);
        n.setSize(gGameWidth, gGameHeight);
        r = new OBitmap(this.bgUrl);
        this.addChild(r);
        r.setPosition((gGameWidth - 354) / 2, (gGameHeight - 220) / 2);
        c = new OFlowText(this.titleMessage);
        c.setSize(354, 100);
        c.setTextSize(26);
        this.addChild(c);
        c.setPosition(gGameWidth - c.textWidth >> 1, r.y + 25);
        c.setColor(get16Color("#2C2C2C"));
        o = new OFlowText;
        o.setSize(300, 300);
        o.maxWidth = 300;
        o.setTextSize(this.messageSize);
        this.addChild(o);
        o.setPosition(gGameWidth - 300 >> 1, c.y + 45);
        o.setColor(get16Color(this.messageColor));
        o.setText(i);
        console.log(o.textWidth, o.textHeight);
        r.setSizeGrid([20, 20, 20, 20], 354, 200 + (o.textHeight - 30));
        var e = this.aloneBtnUrl;
        if (s) {
            e = this.leftBtnUrl
        }
        h = new ONButton(e,e,a);
        this.addChild(h);
        h.setPosition((gGameWidth - h.width) / 2, r.y + r.height - 79);
        h.setTextSize(19);
        h.setTextColor(get16Color("#ffffff"));
        h.setFont("微软雅黑");
        h.addClick(function() {
            t.callback1 && t.callback1();
            t.dispose()
        });
        if (s) {
            l = new ONButton(this.rightBtnUrl,this.rightBtnUrl,s);
            this.addChild(l);
            h.setPosition(r.x, r.y + r.height - 72);
            h.setTextColor(get16Color(this.btn1Color));
            l.setPosition(r.x + 176, h.y);
            l.setTextSize(19);
            l.setFont("微软雅黑");
            l.setTextColor(get16Color(this.btn2Color));
            l.addClick(function() {
                t.callback2 && t.callback2();
                t.dispose()
            })
        }
        if (this.callback2) {
            n.addEvent("click", function() {
                t.callback2 && t.callback2();
                t.dispose()
            })
        }
    }
    ;
    this.update = function() {}
}

function MallProxy() {
    this.pmode = 0;
    this.sendObj = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = {
            flower_place: 1,
            gindex: gIndex,
            goods_id: t,
            buy_num: e,
            open_id: "",
            uid: GloableData.getInstance().userData.uid,
            channel_id: "",
            channel_type: "",
            device: GloableData.getInstance().userData.device,
            engine: "H5",
            pmode: this.pmode,
            token: GloableData.getInstance().userData.token,
            rebate: GloableData.getInstance().rebate,
            shop_type: i
        };
        if (clientType == 3 || clientType == 6) {
            a.plat = GloableData.getInstance().userData.plat;
            a.username = GloableData.getInstance().userData.userName
        } else {
            a.plat_id = 0
        }
        return a
    }
    ;
    this.sendCreateOrder = function(t, e, i) {
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        if (localProjectPath) {
            i && i({
                status: 1
            });
            return
        }
        var s = this.sendObj(t, e, a);
        if (clientType == 1) {
            if (mallPriceType) {
                s.plat_id = 100;
                var n = void 0;
                if (a == 0) {
                    n = GloableData.getInstance().getItemDataById(t)
                } else {
                    n = tv.gameTimeMall.getItemDataById(t)
                }
                if (n) {
                    s.rebate = n.discount
                }
            }
        }
        var r = function t() {
            serverAjax.sendGetAjaxJSONPForM(webConfig.GET_MALL_BUY_ITEM_ORDER_V2, i, null, s)
        };
        if (!GloableData.getInstance().userData.isLogin) {
            SAL_Login(function() {
                refreshAfterLogin();
                r()
            })
        } else {
            r()
        }
    }
    ;
    this.useVarItem = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var a = GloableData.getInstance().getItemDataById(t);
        GloableData.getInstance().userItem(a.itemId, e, i);
        this.addAttributeByItem(a, e)
    }
    ;
    this.useItemOnly = function(t, e) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var a = GloableData.getInstance().getItemDataById(t);
        if (a.itemType == 1) {
            GloableData.getInstance().userItem(a.itemId)
        } else if (a.itemType == 2) {
            this.useVarItem(a.itemId, e, i)
        } else if (a.itemType == 3) {
            GloableData.getInstance().userItem(a.itemId);
            var s = a.itemAttribute.split(",");
            for (var n in s) {
                var r = GloableData.getInstance().getItemDataById(parseInt(s[n]));
                if (r && r.itemId != a.itemId && r.itemType !== 3) {
                    this.useItemOnly(parseInt(s[n]), 1)
                }
            }
        }
    }
    ;
    this.useTimeItemOnly = function(t, c, u) {
        var e = GloableData.getInstance().timeMallBuyItem.get(t);
        if (e) {
            e.conut++
        } else {
            var f = {
                id: t,
                count: 1
            };
            GloableData.getInstance().timeMallBuyItem.set(t, f)
        }
        var i = tv.gameTimeMall.getItemDataById(t);
        if (i.itemAttributes.length < 1) {}
        i.itemType = 2;
        var a = {};
        for (var s = 0; s < i.itemAttbuiteCount; s++) {
            var n = i.itemAttributes[s];
            var d = tv.system.vars.getVar(n.arrributeId);
            a[n.arrributeId] = d
        }
        this.addAttributeByItem(i, c);
        var r = {};
        for (var o = 0; o < i.itemAttbuiteCount; o++) {
            var h = i.itemAttributes[o];
            var m = tv.system.vars.getVar(h.arrributeId);
            r[h.arrributeId] = m
        }
        var g = JSON.stringify({
            uid: GloableData.getInstance().userData.uid,
            id: t,
            yData: a,
            lData: r,
            time: serverTime.timestramp,
            platform: GloableData.getInstance().userData.platform
        });
        var v = GloableData.getInstance().userData.platform.toLowerCase();
        var l = 0;
        if (v.indexOf("android") > -1) {
            l = 2
        } else if (v.indexOf("ios") > -1) {
            l = 1
        } else if (isM) {
            l = 4
        }
        var p = {
            gindex: gIndex,
            token: GloableData.getInstance().userData.token,
            order_id: u,
            client_type: l,
            event_type: "timeMall",
            data: g
        };
        var S = webConfig.UP_TIME_MALL_RECORD_LOG;
        serverAjax.sendGetAjaxJSONPForM(S, null, null, p)
    }
    ;
    this.getMyMoney = function(i) {
        var t = this.sendObj("");
        var e = function t(e) {
            if (e.status == 1) {
                if (clientType == 3 || clientType == 6) {
                    i && i(e.data.flower)
                } else if (clientType == 1) {
                    i && i(e.data.flower_count / 100, e.data.wz_count / 100)
                } else {
                    i && i(isNaN(Math.floor(e.data.coin_count / 100)) ? 0 : Math.floor(e.data.coin_count / 100))
                }
            } else {
                i(0, 0)
            }
        };
        GloableData.getInstance().openEncrypt = true;
        serverAjax.sendGetAjaxJSON(webConfig.GET_MY_MONEY, e, function() {
            i(0, 0)
        }, t)
    }
    ;
    this.addAttributeByItem = function(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (t.itemStatus == 2 || t.itemType != 2) {
            return
        }
        for (var i = 0; i < e; i++) {
            for (var a in t.itemAttributes) {
                var s = t.itemAttributes[a];
                var n = tv.system.vars.getVar(s.arrributeId);
                var r = s.operator;
                var o = s.varValue;
                switch (r) {
                case 0:
                    n = o;
                    break;
                case 1:
                    n += o;
                    break;
                case 2:
                    n -= o;
                    break;
                case 3:
                    n *= o;
                    break;
                case 4:
                    n = n / o;
                    break;
                case 5:
                    n = n % o;
                    break
                }
                tv.system.vars.setVar(s.arrributeId, n)
            }
        }
    }
}
var mallProxy = new MallProxy;

function CloudProxy() {
    this.getData = function() {
        var t = {};
        t.guid = guid;
        t.gindex = gIndex;
        t.client_type = 7;
        var e = Math.ceil(Date.now() / 1e3);
        var i = {};
        i["r"] = md5(e.toString()).substr(1, 3);
        var a = JSON.stringify(i);
        var s = Base64.encodeURL(a);
        var n = encodeURIComponent(s);
        t.auth = n;
        t.ts = e;
        if (GloableData.getInstance().isMobile()) {
            t.token = GloableData.getInstance().userData.token
        }
        return t
    }
    ;
    this.getCloudSign = function(t) {
        var e = Object.keys(t).sort();
        var i = ""
          , a = void 0;
        for (a = 0; a < e.length; a++) {
            i += e[a] + "=" + t[e[a]] + "&"
        }
        if (i.length > 0) {
            i = i.substring(0, i.length - 1)
        }
        t.sign = md5(i + "t_16b4a01f45313e88")
    }
    ;
    this.getEncryptContent = function(t) {
        var e = Base64.encode(t);
        e = e.replace(/=/g, "!");
        e = e.replace(/\//g, "_");
        e = e.replace(/\+/g, "-");
        return e
    }
    ;
    this.upSaveExData = function(t, e, i) {
        var a = this.getData();
        a.varsEx = this.getEncryptContent(e);
        a.varsType = t;
        this.sendData(webConfig.CLOUD_SAVE_EX, a, i)
    }
    ;
    this.downSaveExData = function(t, e) {
        var i = this.getData();
        i.varsType = t;
        this.sendData(webConfig.CLOUD_LOAD_EX, i, e)
    }
    ;
    this.downSaveData = function(t, e) {
        var i = this.getData();
        this.sendData(webConfig.CLOUD_LOAD, i, t, e)
    }
    ;
    this.upSaveCloudData = function(t, e) {
        var i = this.getData();
        i.content = this.getEncryptContent(JSON.stringify(t));
        this.sendData(webConfig.CLOUD_SAVE, i, e)
    }
    ;
    this.deleteCloudData = function(t, e) {
        var i = this.getData();
        i.gear = t;
        this.sendData(webConfig.CLOUD_DELETE, i, e)
    }
    ;
    this.sendData = function(t, e, i, a) {
        this.getCloudSign(e);
        t += "?ts=" + e.ts + "&sign=" + e.sign + "&client_type=" + e.client_type;
        if (GloableData.getInstance().isMobile()) {
            t += "&token=" + GloableData.getInstance().userData.token
        } else {
            e.needCookie = true
        }
        serverAjax.sendPostJSON(t, function(t) {
            i && i(t)
        }, function() {
            if (a) {
                a()
            } else {// hintMessage.setHint("网络异常")
            }
        }, e)
    }
}
var cloudProxy = new CloudProxy;
var _createClass = function() {
    function a(t, e) {
        for (var i = 0; i < e.length; i++) {
            var a = e[i];
            a.enumerable = a.enumerable || false;
            a.configurable = true;
            if ("value"in a)
                a.writable = true;
            Object.defineProperty(t, a.key, a)
        }
    }
    return function(t, e, i) {
        if (e)
            a(t.prototype, e);
        if (i)
            a(t, i);
        return t
    }
}();

function _classCallCheck(t, e) {
    if (!(t instanceof e)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function getFilterEffectiveLayer(t, e) {
    if (t.length <= 0) {
        return []
    }
    var i;
    var a = t[2] == 1;
    if (a) {
        i = t[3].split(",")
    } else {
        i = new Array;
        for (var s = 0; s < e; s++) {
            i[s] = s.toString()
        }
    }
    if (i.indexOf(e.toString()) > -1) {
        i.splice(i.indexOf(e.toString()), 1)
    }
    return i
}

function getLayerAttribute(t, e) {
    if (e && isFilterLayer(e)) {
        return
    }
    var i, a;
    var s = parseFloat(t.Argv[5]) / 100;
    var n = parseFloat(t.Argv[6]) / 100;
    var r = parseFloat(t.Argv[7]) / 255;
    var o = t.Argv[8] == "1";
    var h = parseInt(t.Argv[9]);
    if (t.Argv[2] == "1") {
        i = tv.system.vars.getVar(parseInt(t.Argv[3]));
        a = tv.system.vars.getVar(parseInt(t.Argv[4]))
    } else {
        i = parseInt(t.Argv[3]);
        a = parseInt(t.Argv[4])
    }
    if (h <= 0) {
        h = 1
    }
    h = h * 1e3 / FPS;
    return {
        x: e ? e.x : i,
        y: e ? e.y : a,
        zoom_x: e ? e.scale_x : s,
        zoom_y: e ? e.scale_y : n,
        alpha: e ? e.alpha : r,
        mirror: e ? e.mirror : o,
        frames: h
    }
}

function initMaterialData(t, e) {
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var a = i ? i.type : getFilterType(parseInt(t[0]), parseInt(t[1]));
    if (a < 0) {
        return
    }
    var s = t ? t[1].split(",") : [];
    return {
        type: a,
        duration: i ? i.duration : -1,
        offsetX: e.x,
        offsetY: e.y,
        zoomX: e.zoom_x,
        zoomY: e.zoom_y,
        alpha: e.alpha,
        mirror: e.mirror,
        r: s.length >= 5 ? parseInt(s[0]) / 100 : -1,
        g: s.length >= 5 ? parseInt(s[1]) / 100 : -1,
        b: s.length >= 5 ? parseInt(s[2]) / 100 : -1,
        gray: s.length >= 5 ? parseInt(s[3]) / 100 : -1,
        hue: s.length >= 5 ? parseInt(s[4]) : -1,
        isLoop: i ? i.isLoop : false,
        strength: i ? i.strength : -1,
        durationCount: i ? i.isLoop : -1,
        deltaTime: i ? i.deltaTime : .2
    }
}

function getFilterType(t, e) {
    var i = {};
    i[0] = 21;
    i[1] = 22;
    i[2] = 24;
    i[3] = 23;
    i[4] = 25;
    i[5] = 27;
    i[6] = 26;
    var a = {};
    a[1] = 12;
    a[2] = 13;
    a[3] = 9;
    a[4] = 15;
    a[5] = 8;
    switch (t) {
    case 1:
        return 19;
    case 2:
        if (e < 0) {
            return -1
        }
        return i[e];
    case 3:
        if (e <= 0) {
            return -1
        }
        return a[e];
    default:
        return -1
    }
}

function isFilterLayer(t) {
    return t instanceof CFilterLayer
}

function resetMaterialData(t, e) {
    var i = getFilterType(parseInt(t[0]), parseInt(t[1]));
    if (i < 0) {
        return
    }
    var a = t[1] ? t[1].split(",") : [];
    var s = new MaterialData;
    s.type = i;
    s.offsetX = e.x;
    s.offsetY = e.y;
    s.zoomX = e.zoom_x;
    s.zoomY = e.zoom_y;
    s.alpha = e.alpha;
    s.mirror = e.mirror;
    s.r = a.length >= 5 ? parseInt(a[0]) / 100 : -1;
    s.g = a.length >= 5 ? parseInt(a[1]) / 100 : -1;
    s.b = a.length >= 5 ? parseInt(a[2]) / 100 : -1;
    s.gray = a.length >= 5 ? parseInt(a[3]) / 100 : -1;
    s.hue = a.length >= 5 ? parseInt(a[4]) : -1;
    return s
}

function getSystemValue(t, e) {
    return t ? tv.system.varsEx.getVar(e) : tv.system.vars.getVar(e)
}

function setSystemValue(t, e, i) {
    t ? tv.system.varsEx.setVar(e, i) : tv.system.vars.setVar(e, i)
}

function convertValueOperationData(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var i = {};
    if (t[0].indexOf("EX") > -1) {
        i.isExValue = true;
        i.index = parseInt(t[0].split("|")[1])
    } else {
        i.isExValue = e;
        i.index = parseInt(t[0])
    }
    i.equalType = parseInt(t[1]);
    i.firstValueData = new ValueData(t.slice(2, 5));
    if (t[6] > -1) {
        i.operationType = parseInt(t[6]) + 1;
        i.secondValueData = new ValueData(t.slice(7, 9))
    }
    i.useIndex = t.length >= 6 ? t[5] == "1" : false;
    return i
}

function getValue(t) {
    if (!t) {
        return 0
    }
    var e = void 0;
    var i = t.type;
    var a = t.attribute;
    switch (i) {
    case 0:
        e = t.idOrValue;
        break;
    case 1:
        e = tv.system.vars.getVar(t.idOrValue);
        break;
    case 2:
        var s = a.randB - a.randA;
        e = a.randA + parseInt(Math.random() * s);
        break;
    case 3:
        e = tv.system.varsEx.getVar(t.idOrValue);
        break;
    case 4:
        var n = tv.system.vars.getVar(t.idOrValue) - 1;
        e = tv.system.vars.getVar(n);
        break;
    case 5:
        var r = t.dataMessage.indexOf("ON") > -1;
        e = r && serverTime == -1 ? -1 : getServerTimeByType(t.idOrValue);
        break;
    case 6:
        if (Configuration.isH5) {
            e = GloableData.getInstance().userData.totalFlower
        } else {
            e = tv.getAvailableFlowerCount()
        }
        break;
    case 7:
        e = getMaxValueByArr(a.valueArr);
        break;
    case 8:
        e = getMinValueByArr(a.valueArr);
        break;
    case 9:
        e = 0;
        break;
    case 10:
        e = getLocalTimeByType(t.idOrValue);
        break;
    case 11:
        if (GloableData.getInstance().userData.allWZ) {
            e = GloableData.getInstance().userData.allWZ
        } else {
            e = 0
        }
        break
    }
    return e
}

function getAns(t, e, i) {
    var a = 0;
    switch (e) {
    case 0:
        a = i;
        break;
    case 1:
        a = parseInt(t + i);
        break;
    case 2:
        a = parseInt(t - i);
        break;
    case 3:
        a = parseInt(t * i);
        break;
    case 4:
        a = notZero(i) ? parseInt(t / i) : 0;
        break;
    case 5:
        a = notZero(i) ? parseInt(t % i) : 0;
        break
    }
    return a
}

function notZero(t) {
    t = +t;
    if (!t) {
        // hintMessage.setHint("数值操作不可以除以零，请联系作者");
        return false
    }
    return true
}
var ValueData = function() {
    function e(t) {
        _classCallCheck(this, e);
        this.type = parseInt(t[0]);
        this.attribute = {};
        this.idOrValue = null;
        this.dataMessage = "";
        this.initValueAttribute(t)
    }
    _createClass(e, [{
        key: "initValueAttribute",
        value: function t(e) {
            if (this.type == 2) {
                var i = parseInt(e[1].split("|")[0]);
                var a = parseInt(e[1].split("|")[1]);
                this.attribute = {
                    randA: i,
                    randB: a
                }
            } else if (this.type == 7 || this.type == 8) {
                var s = getMinMaxNumArr(e[1]);
                this.attribute = {
                    valueArr: s
                }
            } else if (this.type == 9) {
                var n = parseInt(e[1].split("|")[0]);
                var r = parseInt(e[1].split("|")[1]);
                this.attribute = {
                    task_id: n,
                    point_type: r
                }
            } else {
                this.idOrValue = parseInt(e[1])
            }
            this.dataMessage = e[2] ? e[2] : ""
        }
    }]);
    return e
}();

function getMinMaxNumArr(t) {
    var e = t.split(",");
    for (var i = 0; i < e.length; i++) {
        var a = e[i].split("|");
        if (a[0] == "v") {
            e[i] = tv.system.vars.getVar(a[1])
        } else if (a[0] == "x") {
            e[i] = tv.system.varsEx.getVar(a[1])
        } else {
            e[i] = a[1]
        }
    }
    return e
}

function getMaxValueByArr(t) {
    if (t.length <= 0) {
        SAL_log("Max value array is empty!");
        return 0
    }
    var e = parseInt(t[0]);
    for (var i = 1; i < t.length; i++) {
        e = e < parseInt(t[i]) ? parseInt(t[i]) : e
    }
    return e
}

function getMinValueByArr(t) {
    if (t.length <= 0) {
        SAL_log("Min value array is empty!");
        return 0
    }
    var e = parseInt(t[0]);
    for (var i = 0; i < t.length; i++) {
        e = e > parseInt(t[i]) ? parseInt(t[i]) : e
    }
    return e
}

function checkPaltform() {
    var t = {
        pc: 1,
        web: 2,
        android: 3,
        ios: 4,
        h5: 5
    };
    var e = GloableData.getInstance().userData.platform.toLowerCase();
    var i = void 0;
    if (t.hasOwnProperty(e)) {
        i = t[e]
    }
    return i
}

function IEventList() {
    this.im = new IEventMaker;
    this.MakerEvent = function(t, e) {
        if (t == null) {
            return null
        }
        switch (t.Code) {
        case 100:
            return new this.im.IText(t,e);
        case 101:
            return new this.im.ITextDif(t,e);
        case 1010:
            return new this.im.ITextDifEX(t,e);
        case 1011:
            return new this.im.ITextDifEX2(t,e);
        case 102:
            return new this.im.ITextEnd(t,e);
        case 103:
            return new this.im.IAutoPlay(t,e);
        case 104:
            return new this.im.IQuickPlay(t,e);
        case 107:
            return new this.im.INotes(t,e);
        case 108:
            return new this.im.ITextChoice(t,e);
        case 109:
            return new this.im.IDisposeText(t,e);
        case 112:
            return new this.im.IDFloatButton(t,e);
        case 150:
            return new this.im.IUpdateUI(t,e);
        case 151:
            return new this.im.IBackGame(t,e);
        case 200:
            return new this.im.IIF(t,e);
        case 201:
            return new this.im.IIfEnd(t,e);
        case 202:
            return new this.im.ILoop(t,e);
        case 203:
            return new this.im.ILoopAboveStart(t,e);
        case 204:
            return new this.im.IButtonDif(t,e);
        case 205:
            return new this.im.IButtonDifEnd(t,e);
        case 206:
            return new this.im.IJumpStory(t,e);
        case 2062:
            return new this.im.ISkipStory(t,e);
        case 2063:
            return new this.im.ISCUIJumpStory(t,e);
        case 207:
            return new this.im.IVar(t,e);
        case 208:
            return new this.im.IBackTitle(t,e);
        case 209:
            return new this.im.ILoopBreak(t,e);
        case 210:
            return new this.im.IWait(t,e);
        case 211:
            return new this.im.IIfChoice(t,e);
        case 212:
            return new this.im.IButtonDifChoose(t,e);
        case 213:
            return new this.im.IVarEx(t,e);
        case 214:
            return new this.im.ICallMenu(t,e);
        case 215:
            return new this.im.IString(t,e);
        case 216:
            return new this.im.IAdvData(t,e);
        case 217:
            return new this.im.IIFEx(t,e);
        case 218:
            return new this.im.IMustSaveRead(t,e);
        case 230:
            return new this.im.ICallAD(t,e);
        case 231:
            return new this.im.IAdContent(t,e);
        case 232:
            return new this.im.IAdEnd(t,e);
        case 251:
            return new this.im.ICallSubStory(t,e);
        case 301:
            return new this.im.ICWeather(t,e);
        case 302:
            return new this.im.IShake(t,e);
        case 303:
            return new this.im.IFlash(t,e);
        case 307:
            return new this.im.IBGMAdd(t,e);
        case 308:
            return new this.im.ICGAdd(t,e);
        case 310:
            return new this.im.ISimpleEffect(t,e);
        case 400:
            return new this.im.IShowPic(t,e);
        case 401:
            return new this.im.IDisposePic(t,e);
        case 402:
            return new this.im.IMovePic(t,e);
        case 404:
            return new this.im.IRotatePic(t,e);
        case 405:
            return new this.im.preLoadPic(t,e);
        case 406:
            return new this.im.IShowDynamicPic(t,e);
        case 501:
            return new this.im.IStartBGM(t,e);
        case 502:
            return new this.im.IStartSE(t,e);
        case 503:
            return new this.im.IStartVoice(t,e);
        case 504:
            return new this.im.IStartBGS(t,e);
        case 505:
            return new this.im.IFadeBGM(t,e);
        case 506:
            return new this.im.IStopSE(t,e);
        case 507:
            return new this.im.IStopVoice(t,e);
        case 508:
            return new this.im.IFadeBGS(t,e);
        case 600:
            return new this.im.IStartVideo(t,e);
        case 601:
            return new this.im.operationVideo(t,e);
        case 220:
            return new this.im.IBubbleMode(t,e);
        case 221:
            return new this.im.ISendBubble(t,e);
        case 252:
            return new this.im.IHpLock(t,e);
        case 253:
            return new this.im.IStoryLock(t,e);
        case 4062:
            return new this.im.IShowDynamicPic(t,e);
        default:
            return null
        }
    }
}
var lastTime = 0;
var huaNum = -1;

function IEventMaker() {
    this.IText = function(a, t) {
        var s = 10;
        this.init = function() {
            s = Configuration.speedUpDelay;
            tv.system.rwFile.autoSave(a);
            tv.canvas.msgIndex = 0;
            if (tv.canvas.isShowTextStyle == 0) {
                var t = a.Argv[16];
                if (t) {
                    var e = t.split("|")[3];
                    if (e) {
                        var i = e.split(",");
                        if (parseInt(i[0]) == 1) {
                            switch (parseInt(i[1])) {
                            case 0:
                                tv.canvas.msgIndex = 1;
                                tv.canvas.message[tv.canvas.msgIndex].msgboxFadeIn();
                                break;
                            case 1:
                                tv.canvas.msgIndex = 2;
                                tv.canvas.message[tv.canvas.msgIndex].msgboxFadeIn();
                                break
                            }
                        }
                    }
                }
            }
            if (tv.canvas.isShowTextStyle == 0 && a.Argv[2]) {
                tv.canvas.message[tv.canvas.msgIndex].Talk(a.Argv, false)
            }
            this.followAnim(true);
            return false
        }
        ;
        this.playWmodTypeVoice = function(t, e) {
            if (t) {
                if (GloableData.getInstance().wmodUseType == "wmod") {
                    var i = "";
                    if (GloableData.getInstance().wmodStory) {
                        var a = GloableData.getInstance().wmodStory.eventList.get(t);
                        if (a) {
                            var c = GloableData.getInstance().wmodList.fristValue();
                            i = c.resList.get(a.name.toLowerCase()).url;
                            oaudio.playVoice(i, 100)
                        }
                    }
                    GloableData.getInstance().wmodPlayUrl = i
                } else if (GloableData.getInstance().wmodUseType == "group") {
                    if (GloableData.getInstance().wmodGroup) {
                        var s = "";
                        if (!e) {
                            e = "旁白"
                        }
                        var n = GloableData.getInstance().wmodStoryGroup.get(e);
                        if (n && n != "1") {
                            var r = n.eventList.get(t);
                            if (r) {
                                var o = GloableData.getInstance().wmodGroup.get(e);
                                if (o) {
                                    var h = GloableData.getInstance().wmodList.get(o);
                                    if (h) {
                                        var l = h.resList.get(r.name.toLowerCase());
                                        s = l.getUrl();
                                        if (l.isUpDone == 0) {
                                            l.isUpDone = 1;
                                            countServer.submitAllFlow(l.fileSize, 1, GloableData.getInstance().groupID, o)
                                        }
                                        oaudio.playVoice(s, 100)
                                    }
                                }
                            }
                        }
                        GloableData.getInstance().wmodPlayUrl = s
                    }
                }
            }
        }
        ;
        var e = a.Argv[18];
        var i = a.Argv[0];
        this.playWmodTypeVoice(e, i);
        this.followAnim = function(t) {
            var e = utils.madeString(a.Argv[0], 0, 100, true);
            for (var i = 0; i < tv.canvas.MAX_LAYER; i++) {
                if (tv.canvas.GamePictrue[i]instanceof CAnimation) {
                    this.setFollowAnimType(tv.canvas.GamePictrue[i], e, 1);
                    t ? tv.canvas.GamePictrue[i].runFollowNameAnimation(e) : tv.canvas.GamePictrue[i].pauseFollowNameAnimation(e)
                }
            }
        }
        ;
        this.setFollowAnimType = function(t, e, i) {
            t.setAnimationType(e, i)
        }
        ;
        this.update = function() {
            s--;
            if (!tv.canvas.message[tv.canvas.msgIndex].isTalking()) {
                var t = utils.madeString(a.Argv[0], 0, 100, true);
                for (var e = 0; e < tv.canvas.MAX_LAYER; e++) {
                    if (tv.canvas.GamePictrue[e]instanceof CAnimation) {
                        this.setFollowAnimType(tv.canvas.GamePictrue[e], t, 0)
                    }
                }
            }
        }
        ;
        this.finish = function() {
            var t = false;
            if ((tv.system.quickRun || onTouchLong) && Configuration.speedUpDelay != 0) {
                if (s <= 0 && !tv.canvas.message[tv.canvas.msgIndex].isTalking()) {
                    tv.canvas.message[tv.canvas.msgIndex].TerminateMessage();
                    t = true
                }
            } else {
                var e;
                if (tv.canvas.isShowTextStyle == 0) {
                    e = tv.canvas.message[tv.canvas.msgIndex]
                }
                if (e.isEnd) {
                    e.isEnd = false;
                    t = true
                } else {
                    t = !e.isShowing()
                }
            }
            if (t) {
                if (GloableData.getInstance().wmodPlayUrl) {
                    oaudio.stopVoice()
                }
                try {
                    showMessageCallback({
                        message: utils.getShowText(a.Argv[2])
                    })
                } catch (t) {}
            }
            return t
        }
    }
    ;
    this.ITextDif = function(c, u) {
        this.init = function() {
            tv.system.rwFile.autoSave(c);
            var t = new Array;
            var e = 0;
            var i, a;
            var s = new Array;
            for (var n = u.pos; n < u.story.length; n++) {
                var r = u.story[n];
                if (r.Code == 108 && r.Indent == u.story[u.pos].Indent + 1) {
                    i = n + 1;
                    t.push(i);
                    a = false;
                    if (i < u.story.length && u.story[i].Code == 107 && u.story[i].Argv[0] && u.story[i].Argv[0].indexOf("call_ad") >= 0) {
                        a = true
                    }
                    s.push(a);
                    continue
                }
                if (r.Code == 102 && r.Indent == u.story[u.pos].Indent) {
                    e = n + 1;
                    break
                }
            }
            var o = utils.uniquerTextDif(u, t, e);
            if (!o) {
                u.indentStack.push(new BranchInfo(t,e))
            }
            var h = new Array, l;
            for (var n = 0; n < c.Argv.length; n++) {
                l = {
                    text: c.Argv[n],
                    index: n,
                    needIcon: s[n]
                };
                h.push(l)
            }
            tv.canvas.TextChoice.setupChoice(h);
            return false
        }
        ;
        this.finish = function() {
            if (!tv.canvas.TextChoice.isFinish()) {
                return false
            }
            submitWebLogChoice(c.Code, u, tv.canvas.TextChoice.index, c.Argv[tv.canvas.TextChoice.index]);
            u.jumpToBranchIndex(108, u.story[u.pos].Indent, tv.canvas.TextChoice.index);
            return true
        }
        ;
        this.update = function() {}
    }
    ;
    this.ITextDifEX = function(c, u) {
        var f, d;
        var m = -1, g;
        var v = new Array;
        this.init = function() {
            tv.system.rwFile.autoSave(c);
            var t = new Array;
            var e = new Array;
            var i = 0;
            g = c.Argv[0].indexOf("ORGTEXT|") > -1;
            var a = g ? parseInt(c.Argv[0].split("|")[1]) : c.Argv.length;
            var s, n;
            for (var r = u.pos; r < u.story.length; ++r) {
                var o = u.story[r];
                if (o.Code == 108 && o.Indent == u.story[u.pos].Indent + 1) {
                    s = r + 1;
                    t.push(s);
                    n = false;
                    if (s < u.story.length && u.story[s].Code == 107 && u.story[s].Argv[0] && u.story[s].Argv[0].indexOf("call_ad") >= 0) {
                        n = true
                    }
                    e.push(n);
                    continue
                }
                if (o.Code == 102 && o.Indent == u.story[u.pos].Indent) {
                    i = r + 1;
                    break
                }
            }
            m = t.length - 1;
            var h = utils.uniquerTextDif(u, t, i);
            if (!h) {
                u.indentStack.push(new BranchInfo(t,i))
            }
            if (g) {
                for (var r = 0; r < a; ++r) {
                    if (c.Argv[9 + r * 2].length <= 0)
                        continue;
                    if (c.Argv[9 + r * 2].indexOf("ORGTIMEOVER|") > -1)
                        break;
                    if (choiceIf(c.Argv[10 + r * 2])) {
                        v.push({
                            text: c.Argv[9 + r * 2],
                            index: r,
                            needIcon: e[r]
                        })
                    }
                }
                var l = c.Argv[1] === "1";
                f = d = parseInt(c.Argv[4]) * FPS;
                if (f == 0)
                    f = d = -200;
                tv.canvas.TextChoice.setupChoiceEX(v, l ? -2001 : parseInt(c.Argv[2]), l ? -2001 : parseInt(c.Argv[3]));
                if ((c.Argv[5].length > 0 || c.Argv[6].length > 0) && f > 0) {
                    tv.canvas.TextChoice.setupTimeBar(c.Argv[5], c.Argv[6], d, f, parseInt(c.Argv[7]), parseInt(c.Argv[8]))
                }
            } else {
                for (var r = 0; r < c.Argv.length; r++) {
                    v.push({
                        text: c.Argv[r],
                        index: r,
                        needIcon: e[r]
                    })
                }
                tv.canvas.TextChoice.setupChoice(v)
            }
            return false
        }
        ;
        this.update = function() {
            if (d > 0)
                d -= 1;
            tv.canvas.TextChoice.updateTimeBar(f, d)
        }
        ;
        this.finish = function() {
            if (d == 0) {
                submitWebLogChoice(c.Code, u, m, "倒计时结束");
                tv.canvas.TextChoice.closeChoice();
                u.jumpToBranchIndex(108, u.story[u.pos].Indent, m);
                return true
            }
            if (v.length <= 0) {
                return true
            }
            if (!tv.canvas.TextChoice.isFinish())
                return false;
            if (tv.canvas.TextChoice.index < 0)
                return true;
            var t = c.Argv[tv.canvas.TextChoice.index];
            if (g) {
                t = c.Argv[9 + tv.canvas.TextChoice.index * 2]
            }
            submitWebLogChoice(c.Code, u, tv.canvas.TextChoice.index, t);
            u.jumpToBranchIndex(108, u.story[u.pos].Indent, tv.canvas.TextChoice.index);
            return true
        }
    }
    ;
    this.ITextDifEX2 = function(m, g) {
        var v, p;
        var S = -1;
        this.init = function() {
            tv.system.rwFile.autoSave(m);
            var t = new Array;
            var e = new Array;
            var i = 0;
            var c = m.Argv[0];
            var a, s;
            for (var n = g.pos; n < g.story.length; ++n) {
                var r = g.story[n];
                if (r.Code == 108 && r.Indent == g.story[g.pos].Indent + 1) {
                    a = n + 1;
                    t.push(a);
                    s = false;
                    if (a < g.story.length && g.story[a].Code == 107 && g.story[a].Argv[0] && g.story[a].Argv[0].indexOf("call_ad") >= 0) {
                        s = true
                    }
                    e.push(s);
                    continue
                }
                if (r.Code == 102 && r.Indent == g.story[g.pos].Indent) {
                    i = n + 1;
                    break
                }
            }
            S = t.length - 1;
            var u = utils.uniquerTextDif(g, t, i);
            if (!u) {
                g.indentStack.push(new BranchInfo(t,i))
            }
            var o = new Array;
            var f = m.Argv[14] == "1";
            var h;
            for (var n = 0; n < c; ++n) {
                if (m.Argv[15 + n * 3].length <= 0)
                    continue;
                if (m.Argv[15 + n * 3].indexOf("ORGTIMEOVER|") > -1)
                    break;
                if (choiceIf(m.Argv[16 + n * 3])) {
                    h = {
                        text: m.Argv[15 + n * 3],
                        index: n,
                        needIcon: e[n],
                        args: f ? m.Argv[17 + n * 3] : null
                    };
                    o.push(h)
                }
            }
            var l = m.Argv[1] === "1";
            v = p = parseInt(m.Argv[4]) * FPS;
            var d = m.Argv[9] == "1";
            if (v == 0)
                v = p = -200;
            tv.canvas.TextChoice.setupChoiceEX2(o, l ? -2001 : parseInt(m.Argv[2]), l ? -2001 : parseInt(m.Argv[3]), d ? m.Argv[10] : "", parseInt(m.Argv[11]), parseInt(m.Argv[12]));
            if ((m.Argv[5].length > 0 || m.Argv[6].length > 0) && v > 0) {
                tv.canvas.TextChoice.setupTimeBar(m.Argv[5], m.Argv[6], p, v, parseInt(m.Argv[7]), parseInt(m.Argv[8]))
            }
            return false
        }
        ;
        this.update = function() {
            if (p > 0)
                p -= 1;
            tv.canvas.TextChoice.updateTimeBar(v, p)
        }
        ;
        this.finish = function() {
            if (m.Argv[2] == "") {
                return true
            }
            if (tv.canvas.message[tv.canvas.msgIndex].isEnd) {
                tv.canvas.message[tv.canvas.msgIndex].isEnd = false;
                return true
            }
            if (p == 0) {
                submitWebLogChoice(m.Code, g, S, "倒计时结束");
                tv.canvas.TextChoice.closeChoice();
                g.jumpToBranchIndex(108, g.story[g.pos].Indent, S);
                return true
            }
            if (!tv.canvas.TextChoice.isFinish())
                return false;
            if (tv.canvas.TextChoice.index < 0)
                return true;
            submitWebLogChoice(m.Code, g, tv.canvas.TextChoice.index, m.Argv[15 + tv.canvas.TextChoice.index * 3]);
            g.jumpToBranchIndex(108, g.story[g.pos].Indent, tv.canvas.TextChoice.index);
            return true
        }
    }
    ;
    this.ITextEnd = function(t, e) {
        this.init = function() {
            e.auxFetchBranchinfo();
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IAutoPlay = function(t, e) {
        this.init = function() {
            tv.system.autoRun = t.Argv[0] === "1";
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IQuickPlay = function(t, e) {
        this.init = function() {
            tv.system.quickRun = t.Argv[0] === "1";
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.INotes = function(I, w) {
        var y = false;
        var _ = true;
        this.init = function() {
            var t = I.Argv[0];
            if (t.indexOf("@i~") > -1) {
                try {
                    var c = t.substring(3);
                    var e = c.split("|");
                    if (e.length < 2)
                        return null;
                    var u = parseInt(e[1]);
                    if (u != e.length - 2)
                        return null;
                    var f = parseInt(e[0]);
                    if (f == 107)
                        return null;
                    var d = new Array;
                    for (var i = 2; i < e.length; i++) {
                        d[i - 2] = e[i]
                    }
                    var m = new DEvent1(f,I.Indent,u,d);
                    w.MakerEvent(m)
                } catch (t) {}
            } else if (t.indexOf("call_pay") > -1 && tv.scene instanceof SCUI) {
                if (GloableData.getInstance().isLoginStatus()) {
                    y = true;
                    tv.scene.createRecharge()
                }
            } else if (t.indexOf("call_login") > -1 && (clientType == 3 || clientType == 6)) {
                var a = t.split("@@");
                if (a.length >= 5) {
                    _ = false;
                    var s = {
                        type: "callLogin",
                        data: {
                            style: a[1],
                            loginPicPath: fileListFato(a[2].substring(5)),
                            ageTipPicPath: fileListFato(a[3].substring(5)),
                            showText: a[4]
                        }
                    };
                    sendMsgToClient(JSON.stringify(s), this.logonCallback.bind(this))
                }
            } else if (t.indexOf("call_protocol") > -1) {
                _ = false;
                var s = {
                    type: "callOpenUserAgreement",
                    wIndex: gIndex
                };
                sendMsgToClient(JSON.stringify(s), this.logonCallback.bind(this))
            } else if (t.indexOf("call_privacy") > -1) {
                _ = false;
                var s = {
                    type: "callOpenPrivacyPolicy",
                    wIndex: gIndex
                };
                sendMsgToClient(JSON.stringify(s), this.logonCallback.bind(this))
            } else if (t.indexOf("call_ad") > -1) {
                var a = t.split("@@");
                var g = false;
                var n = "";
                var r = "";
                var o = "2";
                var v = "";
                if (a.length > 1) {
                    v = a[1]
                }
                if (a.length > 2) {
                    n = a[2];
                    g = n.length > 0
                }
                var p = -1;
                if (tv.scene instanceof SGame) {
                    p = getOriginalChoicePos(w)
                }
                o += "," + p;
                if (a.length > 3) {
                    r = a[3]
                }
                if (a.length > 6) {
                    var h = a[6];
                    var l = parseInt(a[4]);
                    if (l < 0) {
                        h = "once" + h;
                        if (tv.adInfo.checkManualAuthority(h)) {
                            return false
                        }
                        o += "," + h
                    } else {
                        l = l * 60;
                        var S = tv.adInfo.getCountDownTime(h);
                        o += "," + h;
                        if (S >= 0 && S < l) {
                            if (!tv.adInfo.isCDShowing()) {
                                tv.adInfo.showCountDown(l - S, parseInt(a[5]))
                            }
                            if (tv.scene instanceof SCUI) {
                                tv.scene.setAllButtonEnable(true)
                            }
                            _ = false;
                            return false
                        }
                    }
                }
                _ = false;
                if (g) {
                    tv.adInfo.showADConfirm(n, o, r, v, w)
                } else {
                    tv.adInfo.openAD(o, r, v, w)
                }
            }
            return y
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            return _
        }
        ;
        this.skip = function() {
            _ = true
        }
        ;
        this.logonCallback = function(t, e) {
            if (e && e["status"] != "0") {
                _ = true
            }
        }
    }
    ;
    this.ITextChoice = function(t, e) {
        this.init = function() {
            try {
                e.auxFetchBranchinfo()
            } catch (t) {
                SAL_log("ITextChoice error!")
            }
            e.jumpToOverCodeIndex(102, t.Indent - 1);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IDisposeText = function(t, e) {
        this.init = function() {
            for (var t = 0; t < tv.canvas.message.length; t++) {
                tv.canvas.message[t].TerminateMessage();
                tv.canvas.message[t].msgBoxFadeOut()
            }
            tv.canvas.msgIndex = 0;
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IDFloatButton = function(i, t) {
        this.init = function() {
            if (tv.DataVer >= 104) {
                if (tv.canvas.sFloatButton == null) {
                    tv.canvas.sFloatButton = new SFloatButton;
                    tv.canvas.sFloatButton.setVisible(false)
                }
            }
            var t = parseInt(i.Argv[0]);
            var e = parseInt(i.Argv[2]);
            if (e == -1 || i.Argv.length < 3) {
                tv.canvas.sFloatButton.setVisible(t == 1)
            } else {
                tv.canvas.sFloatButton.showButtonByIndex(e, t == 1)
            }
            return true
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IUpdateUI = function(t, e) {
        this.init = function() {
            try {
                if (tv.scene instanceof SCUI) {
                    return false
                } else {
                    return true
                }
            } catch (t) {
                SAL_log(t.message);
                return true
            }
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IBackGame = function(e, t) {
        isSCUI = false;
        this.init = function() {
            if (e.Argv[1] && e.Argv[1] == "1") {
                var t = e.Argv[2] ? parseInt(e.Argv[2]) : 0;
                tv.scene.fadeScene(t)
            } else {
                tv.scene.dispose();
                tv.scene = new SGame
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IIF = function(o, h) {
        var l = false;
        var p = false;
        var c = false;
        var u = -1;
        var S = -1;
        var f = -1;
        var d = -1;
        var m = 0;
        var g = -1;
        var I = -1;
        var w = -1;
        var v;
        var y = true;
        var _ = new Array;
        var b = 0;
        this.init = function() {
            for (var t = h.pos; t < h.story.length; t++) {
                var e = h.story[t];
                if (e.Code == 211 && e.Indent == h.story[h.pos].Indent) {
                    _.push(t + 1);
                    continue
                }
                if (e.Code == 201 && e.Indent == h.story[h.pos].Indent) {
                    b = t + 1;
                    break
                }
            }
            this.DataToVar();
            var i = -1;
            var a = -1;
            if (m <= 1) {
                i = m == 0 ? tv.system.vars.getVar(g) : tv.system.varsEx.getVar(g);
                if (f == 0) {
                    a = u
                } else if (f == 1) {
                    a = tv.system.vars.getVar(u)
                } else if (f == 2) {
                    a = tv.system.varsEx.getVar(u)
                }
                l = compareVar(i, a, d)
            } else if (m == 2) {
                if (p) {
                    l = onTouchX > v.x && onTouchX <= v.x + v.width && onTouchY > v.y && onTouchY <= v.y + v.height && (w == 0 ? true : onTouchImageClick)
                } else {
                    if (tv.canvas.GamePictrue[I]) {
                        var s = tv.canvas.GamePictrue[I].getRect();
                        l = onTouchX > s.x && onTouchX <= s.x + s.width && onTouchY > s.y && onTouchY <= s.y + s.height && (w === 0 ? true : onTouchImageClick)
                    }
                }
                if (l && w) {
                    onTouchImageClick = false
                }
                onTouchDown = false
            } else if (m == 3) {
                var n = -1;
                var r = -1;
                if (Configuration.isQQ) {
                    i = 99999
                } else {
                    n = GloableData.getInstance().userData.allWZ;
                    i = GloableData.getInstance().userData.totalFlower
                }
                a = getValueB(f, u);
                if (clientType == 1 && S) {
                    r = getValueB(f, S);
                    if (d == 4) {
                        l = compareVar(i, a, d) && compareVar(n, r, d)
                    } else {
                        l = compareVar(i, a, d) || compareVar(n, r, d)
                    }
                } else {
                    l = compareVar(i, a, d)
                }
            } else if (m == 4) {
                l = u == checkPaltform()
            } else if (m == 5) {
                l = true;
                tv.system.varsEx.setVar(g, -1)
            } else if (m == 6) {
                l = true
            } else if (m == 7) {
                c = o.Argv[4] == 1;
                if (Configuration.enablePurchase && !Configuration.isQQ) {
                    if (GloableData.getInstance().isFreeLimit || GloableData.getInstance().isLightDay || GloableData.getInstance().isLightVIP) {
                        l = true
                    } else {
                        y = false;
                        GloableData.getInstance().loadMallAllItems(function() {
                            var t = GloableData.getInstance().getItemPurchaseInfoById(o.Argv[2]);
                            l = t != null && t.max > 0;
                            y = true
                        })
                    }
                } else {
                    l = true
                }
            } else if (m == 8) {
                y = false;
                GloableData.getInstance().loadTimeMallAllItems(function() {
                    var t = GloableData.getInstance().timeMallBuyItem.get(o.Argv[2]);
                    l = t != null && t.count > 0;
                    y = true
                })
            }
            return false
        }
        ;
        this.finish = function() {
            if (y) {
                this.goToEnd()
            }
            return y
        }
        ;
        this.update = function() {}
        ;
        this.DataToVar = function() {
            if (o.Argv[0].indexOf("EX") > -1) {
                m = 1;
                g = parseInt(o.Argv[0].split("|")[1]);
                d = parseInt(o.Argv[1]);
                f = parseInt(o.Argv[2]);
                u = parseInt(o.Argv[3]);
                c = parseInt(o.Argv[4]) != 0
            } else if (o.Argv[0].indexOf("MO") > -1) {
                m = 2;
                p = o.Argv[1] == "0";
                if (p) {
                    var t = o.Argv[2].split(",");
                    v = {
                        x: parseInt(t[0]),
                        y: parseInt(t[1]),
                        width: parseInt(t[2]),
                        height: parseInt(t[3])
                    }
                } else {
                    I = parseInt(o.Argv[2])
                }
                w = parseInt(o.Argv[3]);
                c = parseInt(o.Argv[4]) != 0
            } else if (o.Argv[0].indexOf("FL") > -1) {
                m = 3;
                d = parseInt(o.Argv[1]);
                f = parseInt(o.Argv[2]);
                u = parseInt(o.Argv[3]);
                S = parseInt(o.Argv[6]);
                c = parseInt(o.Argv[4]) != 0
            } else if (o.Argv[0].indexOf("PT") > -1) {
                m = 4;
                u = parseInt(o.Argv[3]);
                c = parseInt(o.Argv[4]) != 0
            } else if (o.Argv[0].indexOf("PA") > -1) {
                m = 5;
                g = parseInt(o.Argv[0].split("|")[1]);
                d = parseInt(o.Argv[2])
            } else if (o.Argv[0].indexOf("TA") > -1) {
                m = 6;
                c = parseInt(o.Argv[4]) != 0;
                g = parseInt(o.Argv[6].split("|")[1])
            } else if (o.Argv[0].indexOf("ST") > -1) {
                m = 7
            } else if (o.Argv[0].indexOf("LT") > -1) {
                c = o.Argv[4] == 1;
                m = 8
            } else {
                g = parseInt(o.Argv[0]);
                d = parseInt(o.Argv[1]);
                f = parseInt(o.Argv[2]);
                u = parseInt(o.Argv[3]);
                c = parseInt(o.Argv[4]) != 0
            }
        }
        ;
        this.goToEnd = function() {
            if (l) {
                h.indentStack.push(new IFInfo(b))
            } else {
                if (c) {
                    h.indentStack.push(new IFInfo(b));
                    h.jumpToIndex(_[0])
                } else {
                    h.jumpToIndex(b)
                }
            }
            return false
        }
    }
    ;
    this.IIFEx = function(s, i) {
        var e = false;
        var a = 0;
        var n;
        var r;
        var o;
        var h = true;
        var l = true;
        var c = new Array;
        this.init = function() {
            n = new Array;
            var t = void 0;
            for (t = i.pos; t < i.story.length; t++) {
                var e = i.story[t];
                if (e.Code == 211 && e.Indent == i.story[i.pos].Indent) {
                    n.push(t + 1);
                    continue
                }
                if (e.Code == 201 && e.Indent == i.story[i.pos].Indent) {
                    a = t + 1;
                    break
                }
            }
            r = parseInt(s.Argv[0]) == 0;
            o = parseInt(s.Argv[1]) == "1";
            this.buildConditionList();
            return false
        }
        ;
        this.finish = function() {
            if (h && l) {
                this.checkCondition();
                this.goToEnd()
            }
            return h && l
        }
        ;
        this.update = function() {}
        ;
        this.buildConditionList = function() {
            var t = void 0;
            var e = parseInt(s.Argv[3]);
            for (t = 0; t < e; t++) {
                var i = s.Argv[4 + t].split("&");
                var a = new DEvent1("","","",i);
                c.push(a);
                if (h && a.Argv[0].indexOf("ST") > -1) {
                    h = false
                }
                if (l && a.Argv[0].indexOf("LT") > -1) {
                    l = false
                }
            }
            if (!h) {
                GloableData.getInstance().loadMallAllItems(function() {
                    h = true
                })
            }
            if (!l) {
                GloableData.getInstance().loadTimeMallAllItems(function() {
                    l = true
                })
            }
        }
        ;
        this.checkCondition = function() {
            var t = void 0;
            e = !r;
            for (t = 0; t < c.length; t++) {
                if (checkIIF(c[t])) {
                    if (r) {
                        e = true;
                        break
                    }
                } else {
                    if (!r) {
                        e = false;
                        break
                    }
                }
            }
        }
        ;
        this.goToEnd = function() {
            if (e) {
                i.indentStack.push(new IFInfo(a))
            } else {
                if (o) {
                    i.indentStack.push(new IFInfo(a));
                    i.jumpToIndex(n[0])
                } else {
                    i.jumpToIndex(a)
                }
            }
        }
    }
    ;
    this.IIfEnd = function(t, e) {
        this.init = function() {
            e.auxFetchIfinfo();
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.ILoop = function(t, i) {
        this.init = function() {
            for (var t = i.pos; t < i.story.length; t++) {
                var e = i.story[t];
                if (e.Code == 203 && e.Indent == i.story[i.pos].Indent) {
                    i.indentStack.push(new LoopInfo(i.pos + 1,t + 1));
                    break
                }
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.ILoopAboveStart = function(t, i) {
        this.init = function() {
            for (var t = i.pos; t >= 0; t--) {
                var e = i.story[t];
                if (e.Code == 202 && e.Indent == i.story[i.pos].Indent) {
                    i.jumpToIndex(t + 1);
                    break
                }
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IButtonDif = function(l, c) {
        this.init = function() {
            tv.system.rwFile.autoSave(l);
            var t = new Array;
            var e = 0;
            for (var i = c.pos; i < c.story.length; i++) {
                var a = c.story[i];
                if (a.Code == 212 && a.Indent == c.story[c.pos].Indent + 1) {
                    t.push(i + 1);
                    continue
                }
                if (a.Code == 205 && a.Indent == c.story[c.pos].Indent) {
                    e = i + 1;
                    break
                }
            }
            var s = utils.uniquerTextDif(c, t, e);
            if (!s) {
                c.indentStack.push(new BranchInfo(t,e))
            }
            var n = new Array(l.Argv.length);
            var r = 0;
            for (var i = 0; i < n.length; i++) {
                var o = l.Argv[i].split(",");
                var h = o.splice(3, o.length - 1);
                if (h.toString() < 1 || choiceIf(h.toString())) {
                    n[i] = new DButtonIndex(o);
                    r++
                } else {
                    n[i] = null
                }
            }
            if (r == 0) {
                c.jumpToOverCodeIndex(205, l.Indent);
                return true
            }
            tv.canvas.ButtonChoice.setupChoice(n);
            return false
        }
        ;
        this.finish = function() {
            if (!tv.canvas.ButtonChoice.isFinish()) {
                return false
            }
            submitWebLogChoice(l.Code, c, tv.canvas.ButtonChoice.index, "图片选项" + tv.canvas.ButtonChoice.index);
            c.jumpToBranchIndex(212, l.Indent, tv.canvas.ButtonChoice.index)
        }
        ;
        this.update = function() {}
    }
    ;
    this.IButtonDifEnd = function(t, e) {
        this.init = function() {
            e.auxFetchBranchinfo();
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IJumpStory = function(e, i) {
        var a = false;
        this.fadeFps = 0;
        this.init = function() {
            a = false;
            for (var t = 0; t < tv.canvas.message.length; t++) {
                tv.canvas.message[t].msgBoxFadeOut()
            }
            tv.system.rwFile.autoSave(e);
            if (e.Argv.length > 3) {
                if (e.Argv[4] && e.Argv[4] == "1") {
                    if (e.Argv[5] == "1") {
                        tv.canvas.fadeOut(parseInt(e.Argv[6]));
                        this.fadeFps = parseInt(e.Argv[6])
                    }
                    if (e.Argv[8] == "1") {
                        oaudio.fadeAll(parseInt(e.Argv[9]))
                    }
                } else {
                    if (e.Argv[1] == "1") {
                        tv.canvas.fadeOut(parseInt(e.Argv[3]));
                        oaudio.fadeAll(parseInt(e.Argv[3]))
                    }
                    this.fadeFps = e.Argv[3] ? parseInt(e.Argv[3]) : 0
                }
            } else {
                if (e.Argv[1] == "1") {
                    tv.canvas.fadeOut(5);
                    this.fadeFps = 5
                } else {
                    this.fadeFps = 0
                }
            }
            submitWebLogStory(parseInt(e.Argv[0]), i.storyName);
            return true
        }
        ;
        this.finish = function() {
            return a
        }
        ;
        this.update = function() {
            if (this.fadeFps == 0) {
                tv.storyList.currentStory.jumpStory(parseInt(e.Argv[0]), function() {
                    a = true
                })
            }
            this.fadeFps--
        }
    }
    ;
    this.ISkipStory = function(s, n) {
        var r = s.Argv[0];
        var o = s.Argv[1];
        var h = false;
        this.init = function() {
            h = false;
            if (r === "1") {
                for (var t = 0; t < tv.canvas.message.length; t++) {
                    tv.canvas.message[t].msgBoxFadeOut()
                }
                tv.system.rwFile.autoSave(s);
                n.jumpStory(parseInt(o), function() {
                    h = true
                })
            } else {
                if (s.Argv[1] === "0") {
                    for (var e = n.pos; e < n.story.length; e++) {
                        var i = n.story[e];
                        if (i.Code == 2062 && i.Argv[0] === "0" && i.Argv[1] === "1") {
                            var a = e + 1;
                            n.jumpToIndex(a);
                            h = true;
                            break
                        }
                    }
                }
                h = true
            }
            return true
        }
        ;
        this.finish = function() {
            return h
        }
        ;
        this.update = function() {}
    }
    ;
    this.ISCUIJumpStory = function(e, i) {
        var a = false;
        this.init = function() {
            a = false;
            for (var t = 0; t < tv.canvas.message.length; t++) {
                tv.canvas.message[t].msgBoxFadeOut()
            }
            tv.system.rwFile.autoSave(e);
            tv.storyList.currentStory.jumpStory(parseInt(e.Argv[0]), function() {
                if (i.isCui && tv.scene instanceof SCUI) {
                    tv.scene.dispose();
                    tv.scene = new SGame
                }
                tv.canvas.stopShack();
                tv.canvas.stopFlash();
                tv.canvas.startWeather(0);
                tv.canvas.SCUIJumpfadeOut();
                a = true
            });
            submitWebLogStory(parseInt(e.Argv[0]), i.storyName);
            return true
        }
        ;
        this.finish = function() {
            return a
        }
        ;
        this.update = function() {}
    }
    ;
    this.IVar = function(n, t) {
        var r = false;
        this.init = function() {
            var t = this;
            if (n.Argv[2] == 5 && serverTime == -1) {
                getServerTime(function() {
                    t.initEvent()
                })
            } else {
                this.initEvent()
            }
        }
        ;
        this.initEvent = function() {
            var t = convertValueOperationData(n.Argv);
            var e = getValue(t.firstValueData);
            var i = t.useIndex ? getSystemValue(false, t.index) - 1 : t.index;
            var a = getSystemValue(t.isExValue, i);
            var s = getAns(a, t.equalType, e);
            setSystemValue(t.isExValue, i, s);
            r = true
        }
        ;
        this.finish = function() {
            return r
        }
        ;
        this.update = function() {}
    }
    ;
    this.IBackTitle = function(t, e) {
        this.fadeOutTime = 0;
        this.init = function() {
            if (t.Argv[0] && t.Argv[0] == "1") {
                this.fadeOutTime = parseInt(t.Argv[1]) ? parseInt(t.Argv[1]) : 0
            }
            if (this.fadeOutTime) {
                this.maskContainer = new OContainer(gGameWidth,gGameHeight);
                SAL_setElementIndex(g, this.maskContainer.element, 1e5);
                this.maskContainer.setPosition(gGameX, 0);
                this.maskContainer.setBlockTouch(true);
                oaudio.fadeAll(this.fadeOutTime);
                tv.canvas.fadeOut(this.fadeOutTime);
                if (tv.scene instanceof SCUI) {
                    tv.scene.fadeScene(this.fadeOutTime, false, false)
                }
            }
            return false
        }
        ;
        this.update = function() {
            this.fadeOutTime -= 1
        }
        ;
        this.finish = function() {
            if (this.fadeOutTime <= 0 && !e.isEnd) {
                tv.scene.dispose();
                this.maskContainer && this.maskContainer.dispose();
                backToMainMenu();
                e.isEnd = true;
                e.event = null
            }
            return false
        }
    }
    ;
    this.ILoopBreak = function(n, r) {
        this.init = function() {
            var t = null;
            var e = 0;
            t = r.auxFetchLoopinfo();
            if (parseInt(n.Argv[0]) == 0) {
                return false
            }
            var i = 0;
            for (var a = r.pos; a < r.story.length; a++) {
                var s = r.story[a];
                if (s.Code == 203) {
                    i++;
                    if (i == parseInt(n.Argv[0])) {
                        r.jumpToIndex(a + 1);
                        break
                    }
                    e = a
                } else if (s.Code == 202) {
                    i--
                }
                if (a >= r.story.length - 1) {
                    r.jumpToIndex(e + 1);
                    break
                }
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IWait = function(t, e) {
        var i = 0;
        this.init = function() {
            i = parseInt(t.Argv[0]);
            if (tv.scene instanceof SGame && i >= 30) {
                if (!tv.canvas.message[tv.canvas.msgIndex].isRoll) {
                    tv.canvas.message[tv.canvas.msgIndex].msgBoxFadeOut()
                }
            }
            if (i <= 0) {
                i = 1
            }
            return false
        }
        ;
        this.update = function() {
            i -= 1
        }
        ;
        this.finish = function() {
            if (onTouchLong && i > 1) {
                i = 1
            }
            return i <= 0
        }
    }
    ;
    this.IIfChoice = function(t, e) {
        this.init = function() {
            e.auxFetchIfinfo();
            e.jumpToOverCodeIndex(201, e.story[e.pos].Indent);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IButtonDifChoose = function(t, e) {
        this.init = function() {
            e.jumpToOverCodeIndex(205, t.Indent - 1)
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IVarEx = function(n, t) {
        var r = false;
        this.init = function() {
            var t = this;
            if (n.Argv[2] == 5 && serverTime == -1) {
                getServerTime(function() {
                    t.initEvent()
                })
            } else {
                this.initEvent()
            }
        }
        ;
        this.initEvent = function() {
            var t = convertValueOperationData(n.Argv, true);
            var e = getValue(t.firstValueData);
            var i = t.useIndex ? getSystemValue(false, t.index) - 1 : t.index;
            var a = getSystemValue(t.isExValue, i);
            var s = getAns(a, t.equalType, e);
            setSystemValue(t.isExValue, i, s);
            tv.system.varsEx.saveExData();
            r = true
        }
        ;
        this.finish = function() {
            return r
        }
        ;
        this.update = function() {}
    }
    ;
    this.ICallMenu = function(s, t) {
        isSCUI = true;
        var n = false;
        stopSpeedRead();
        this.init = function() {
            var t = parseInt(s.Argv[0]);
            var e = s.Argv[1] ? parseInt(s.Argv[1]) : 0;
            switch (t) {
            case 10001:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SMenu(e);
                break;
            case 10002:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SReplay(e);
                break;
            case 10003:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SCG(false,e);
                break;
            case 10004:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SBGM(false,e);
                break;
            case 10005:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SSavefile(false,true,e);
                break;
            case 10006:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SSavefile(false,false,e);
                break;
            case 10007:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.scene = new SSystem(false,e);
                break;
            case 10008:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                try {
                    if (Configuration.isQQ) {
                        return false
                    } else {
                        exitGameCallback()
                    }
                } catch (t) {}
                SAL_exit();
                break;
            case 10009:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                tv.system.autoRun = !tv.system.autoRun;
                tv.scene = new SGame;
                break;
            case 10010:
                if (Configuration.isQQ) {
                    // hintMessage.setHint("商城未开启!");
                    return
                }
                var i = function t() {
                    if (hasFileItem("data/mallnew.bin")) {
                        tv.scene = new SGameNewMall(e)
                    } else if (hasFileItem("data/mall.bin")) {
                        tv.scene = new SGameMall(e)
                    }
                };
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                if (!Configuration.isTT) {
                    i()
                } else {
                    SAL_Login(function() {
                        refreshAfterLogin();
                        i()
                    }, function() {
                        tv.scene = new SGame
                    })
                }
                break;
            case 10012:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                if (hasFileItem("data/malllimite.bin")) {
                    tv.scene = new SGameTimeMall(e)
                }
                break;
            case 10013:
                if (hasFileItem("data/welfare.bin") && tv.gameWelfateBin.isOpen) {
                    if (tv.scene instanceof SCUI)
                        tv.scene.dispose();
                    tv.scene = new SGameWelfare(e)
                } else {
                    n = true
                }
                break;
            case 10014:
                if (tv.scene instanceof SCUI)
                    tv.scene.dispose();
                if (hasFileItem("data/name.bin")) {
                    tv.scene = new SGameName(e,s.Argv[3],parseInt(s.Argv[4]))
                }
                break;
            default:
                if (t > 1e4) {
                    return false
                }
                var a = tv.data.System.Cuis[t];
                if (!a.isLoaded) {
                    a.loadEventData()
                }
                if (a.loadEvent.length <= 0 && a.afterEvent.length <= 0 && a.controls.length <= 0) {
                    n = true;
                    break
                } else {
                    if (tv.scene instanceof SCUI) {
                        tv.scene.dispose();
                        tv.scene.Build(t, e)
                    } else {
                        tv.scene = new SCUI(t,e);
                        break
                    }
                }
            }
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            if (tv.scene instanceof SGame || n || Configuration.isQQ) {
                return true
            } else {
                return false
            }
        }
    }
    ;
    this.IString = function(t, e) {
        this.e = t;
        this.m = e;
        this.init = function() {
            tv.system.string.setVar(parseInt(this.e.Argv[0]), this.getTrueString(this.e.Argv[1]));
            return false
        }
        ;
        this.getTrueString = function(t) {
            t = utils.TextAnalysis(t);
            var e = utils.madeString(t, 0, this.e.Code, true);
            return e
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IAdvData = function(o, t) {
        var h = false;
        this.init = function() {
            var t = convertValueOperationData(o.Argv);
            var e = getValue(t.firstValueData);
            if (o.Argv[6] > -1) {
                var i = getValue(t.secondValueData);
                var a = getAns(e, t.operationType, i);
                e = a
            }
            var s = t.useIndex ? getSystemValue(false, t.index) - 1 : t.index;
            var n = getSystemValue(t.isExValue, s);
            var r = getAns(n, t.equalType, e);
            setSystemValue(t.isExValue, s, r);
            h = true
        }
        ;
        this.finish = function() {
            return h
        }
        ;
        this.update = function() {}
    }
    ;
    this.IMustSaveRead = function(a, t) {
        var r = false;
        this.cloudData = {};
        this.init = function() {
            var s = this;
            operationFrame.loadShot();
            tv.system.rwFile.autoSave(a);
            var i = GloableData.getInstance().isFreeLimit || this.getIsCloud();
            var n = parseInt(a.Argv[1]);
            if (a.Argv[0] == "0") {
                t.isMustSave = true;
                if (i) {
                    r = true;
                    sLoading.showMask();
                    operationFrame.getossKey(operationFrame.getCaptureSaveFile("cloud" + n), n, false, function(t, e) {
                        var i = operationFrame.DeParseFrameInfo(n, true);
                        if (!i) {
                            return
                        }
                        i.Thumbnail.cloudImageUrl = e;
                        var a = {};
                        a["" + n] = i;
                        cloudProxy.upSaveCloudData(a, function(t) {
                            sLoading.hideMask();
                            r = true;
                            if (t.status != 1) {// hintMessage.setHint("网络异常1，请检查网络后重新加载游玩此段剧情")
                            } else {
                                s.cloudData["" + n] = i
                            }
                        })
                    }, function() {
                        // hintMessage.setHint("网络异常2，请检查网络后重新加载游玩此段剧情");
                        sLoading.hideMask()
                    })
                } else {
                    r = true;
                    operationFrame.DeParseFrameInfo(n)
                }
            } else if (a.Argv[0] == "1") {
                var e = function t(e) {
                    if (e) {
                        operationFrame.ParseFrameInfo(n, e, function() {
                            if (a.Argv[2] == "1" && !i) {
                                SAL_removeStorage(GloableData.getInstance().savekey + a.Argv[1])
                            }
                            r = true;
                            tv.scene.dispose();
                            tv.scene = new SGame
                        })
                    } else {
                        r = true
                    }
                };
                if (i) {
                    cloudProxy.downSaveData(function(t) {
                        if (parseInt(t.status) == 1) {
                            if (t.data && t.data != "") {
                                s.cloudData = JSON.parse(t.data);
                                e(s.cloudData[a.Argv[1]])
                            }
                        }
                        if (a.Argv[2] == "1") {
                            cloudProxy.deleteCloudData(a.Argv[1])
                        }
                    }, function() {// hintMessage.setHint("网络异常3，请检查网络后重新加载游玩此段剧情")
                    })
                } else {
                    operationFrame.getLocalCloudData(parseInt(a.Argv[1]), e)
                }
            }
        }
        ;
        this.getIsCloud = function() {
            var t = "20220729";
            if (first_pub_time) {
                return parseInt(first_pub_time) >= parseInt(t)
            }
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            t.isMustSave = false;
            return r
        }
    }
    ;
    this.ICallAD = function(t, e) {
        this.isFinish = false;
        this.init = function() {
            var t = this;
            SAL_showADVideo(function() {
                e.jumpToBranchIndex(231, e.story[e.pos].Indent, 0);
                t.isFinish = true
            }, function() {
                e.jumpToBranchIndex(231, e.story[e.pos].Indent, 1);
                t.isFinish = true
            }, JSON.stringify({
                wIndex: gIndex,
                adType: 2
            }));
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            return this.isFinish
        }
    }
    ;
    this.IAdContent = function(t, e) {
        this.init = function() {
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            e.jumpToOverCodeIndex(232, t.Indent - 1);
            return true
        }
    }
    ;
    this.IAdEnd = function(t, e) {
        this.init = function() {
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.ICallSubStory = function(i, t) {
        var a = false;
        this.init = function() {
            tv.data.getStory(parseInt(i.Argv[0]), this.initSubStory.bind(this));
            return true
        }
        ;
        this.finish = function() {
            return a
        }
        ;
        this.update = function() {}
        ;
        this.initSubStory = function(t) {
            var e = new IMain;
            e.callJump(t);
            tv.storyList.addStory(e);
            tv.system.rwFile.autoSave(i);
            a = true
        }
    }
    ;
    this.ICWeather = function(e, t) {
        this.init = function() {
            var t = parseInt(e.Argv[0]);
            tv.canvas.startWeather(t)
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IShake = function(a, t) {
        this.init = function() {
            var t = parseInt(a.Argv[0]);
            var e = parseInt(a.Argv[1]);
            if (parseInt(a.Argv[3]) <= 0) {
                var i = 1
            } else {
                var i = localProjectPath.length > 0 ? parseInt(a.Argv[3]) : parseInt(a.Argv[3]) / 2
            }
            tv.canvas.startShack(t, e, a.Argv[2] == "1" ? -1 : i);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IFlash = function(i, t) {
        this.init = function() {
            if (parseInt(i.Argv[1]) <= 0) {
                return true
            }
            var t = i.Argv[0].split(",");
            var e = localProjectPath.length > 0 ? parseInt(i.Argv[1]) : parseInt(i.Argv[1]) / 2;
            tv.canvas.startFlash(new OColorVal(parseInt(t[0]),parseInt(t[1]),parseInt(t[2]),255), e);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IBGMAdd = function(t, e) {
        this.init = function() {
            tv.system.other.addBGM(parseInt(t.Argv[0]));
            tv.system.other.saveData();
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.ICGAdd = function(a, t) {
        var s = true;
        this.init = function() {
            tv.system.other.addCG(parseInt(a.Argv[0]));
            tv.system.other.saveData();
            if (s) {
                s = tv.data.System.CG.cglist[a.Argv[0]] && !tv.data.System.CG.cglist[a.Argv[0]].cgpath.IsNil()
            }
            if (s) {
                var t = tv.data.System.CG.cglist[a.Argv[0]].cgpath.name;
                var e = tv.data.System.CG.cglist[a.Argv[0]].message;
                var i = fileListFato("Graphics/Background/" + t);
                if (!i) {
                    return true
                }
                tv.scene = new TempSCG(e,t)
            }
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            return tv.scene instanceof SGame || !s
        }
    }
    ;
    this.ISimpleEffect = function(h) {
        this.init = function() {
            var t = parseInt(h.Argv[0]);
            var e = tv.canvas.GamePictrue[t];
            if (!e) {
                return true
            }
            if (GloableData.getInstance().isMobile() && !getMobileVer(filterAVer)) {
                return false
            }
            var i;
            var a = {
                type: getFilterType(3, parseInt(h.Argv[1])),
                strength: this.getStrength(parseInt(h.Argv[2]), parseInt(h.Argv[1])),
                duration: h.Argv[4] == "0" ? parseInt(h.Argv[5]) : parseInt(h.Argv[5]) * 60,
                isLoop: h.Argv[3] == "1" ? -1 : 1,
                deltaTime: 1
            };
            if (isFilterLayer(e)) {
                var s = e.index;
                var n = e.materialData;
                var r = e.maskPath;
                e.dispose();
                tv.canvas.GameFilter.splice(tv.canvas.GameFilter.indexOf(e), 1);
                e = new OBitmap("");
                tv.canvas.GamePictrue[s] = e;
                tv.canvas.viewport.addChild(e);
                tv.canvas.viewport.setChildIndex(e, s);
                e.setMirror(n.mirror);
                e.setPosition(n.offsetX, n.offsetY);
                e.setAlpha(n.alpha);
                e.setScale(n.zoomX, n.zoomY);
                e.setUrl(r)
            }
            var o = getLayerAttribute(h, e);
            i = initMaterialData(null, o, a);
            e.setMask("", i)
        }
        ;
        this.getStrength = function(t, e) {
            switch (e) {
            case 2:
                t /= 100;
                break;
            case 3:
                t /= 100;
                break;
            case 4:
                t = 1 - t / 100;
                break
            }
            return t
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IShowPic = function(i, t) {
        var f = false;
        var a;
        var s = "";
        var n = "";
        var l;
        var r = function t(e, i) {
            var a = parseInt(e.Argv[0]);
            var s = tv.canvas.GamePictrue[a];
            if (s instanceof CAnimation || s instanceof CChatLayer) {
                s.dispose();
                s = null
            }
            if (s instanceof CFilterLayer) {
                s.dispose();
                var n = tv.canvas.GameFilter.indexOf(s);
                tv.canvas.GameFilter.splice(n, 1);
                s = null
            }
            if (!s) {
                s = new OBitmap("");
                tv.canvas.GamePictrue[a] = s;
                tv.canvas.viewport.addChild(s);
                tv.canvas.viewport.setChildIndex(s, a)
            }
            var r = getLayerAttribute(e);
            s.stopAction();
            var o = function t() {
                s.setMirror(r.mirror);
                s.setPosition(r.x, r.y);
                s.setAlpha(r.alpha);
                s.setScale(r.zoom_x, r.zoom_y);
                f = true;
                s.successCB = function() {}
            };
            if (s.url == i) {
                o();
                if (GloableData.getInstance().isMobile() && !getMobileVer(filterAVer)) {
                    f = true
                } else {
                    if (e.Argv[13] == 1) {
                        var h = e.Argv.slice(13);
                        l = initMaterialData(h, r);
                        s.setMask("", l)
                    } else if (!e.Argv[13] || e.Argv[13] == 0) {
                        s.setMask("", null)
                    }
                }
            } else {
                s.successCB = o;
                s.failCB = function() {
                    f = true
                }
                ;
                s.setUrl(i);
                if (GloableData.getInstance().isMobile() && !getMobileVer(filterAVer)) {
                    f = true
                } else {
                    if (e.Argv[13] == 1) {
                        var h = e.Argv.slice(13);
                        l = initMaterialData(h, r);
                        s.setMask("", l)
                    } else if (!e.Argv[13] || e.Argv[13] == 0) {
                        s.setMask("", null)
                    }
                }
            }
        };
        var o = function c(t, e, i) {
            if (!e) {
                return
            }
            tv.canvas.chearAllLayer();
            var a = parseInt(t.Argv[0]);
            var s = t.Argv.slice(13);
            var n = tv.canvas.GamePictrue[a];
            if (n) {
                n.dispose();
                if (n instanceof CFilterLayer) {
                    var r = tv.canvas.GameFilter.indexOf(n);
                    tv.canvas.GameFilter.splice(r, 1)
                }
                n = null
            }
            n = new CFilterLayer;
            tv.canvas.GamePictrue[a] = n;
            tv.canvas.GameFilter.push(n);
            var r = tv.canvas.GameFilter.indexOf(n);
            var o = getFilterEffectiveLayer(s, a);
            var h = getLayerAttribute(t);
            var l = initMaterialData(s, h);
            var u = e;
            n.index = a;
            n.effectiveLayer = o;
            n.materialData = l;
            n.maskImg = u;
            n.maskPath = i;
            if (JSON.stringify(tv.canvas.LayerMap) == "{}") {
                tv.canvas.initFilterInfo()
            } else {
                tv.canvas.resetFilterInfo()
            }
            tv.canvas.setFilterInfo(o, r);
            tv.canvas.renderFilter();
            f = true
        };
        this.init = function() {
            if (!i) {
                f = true;
                return
            }
            var t = false;
            if (i.Argv.length > 11) {
                t = i.Argv[11] == "1"
            } else {
                t = false
            }
            if (t) {
                s = "Graphics/Other/" + utils.madeString(tv.system.string.getVar(parseInt(i.Argv[12])), 0, i.Code)
            } else {
                s = "Graphics/" + i.Argv[1]
            }
            n = fileListFato(s);
            var e = SAL_checkSRCPreloaded(g, n);
            if (n && !e) {
                SAL_preload(g, [n], function(t) {
                    a = t;
                    return f
                });
                return f
            }
            if (GloableData.getInstance().isMobile() && !getMobileVer(filterAVer)) {
                r(i, s)
            } else {
                if (i.Argv.length <= 13 || i.Argv[13] != 2) {
                    r(i, s)
                } else {
                    o(i, n, s)
                }
            }
        }
        ;
        this.finish = function() {
            return f
        }
        ;
        this.update = function() {
            if (a == 1) {
                if (GloableData.getInstance().isMobile() && !getMobileVer(filterAVer)) {
                    r(i, s)
                } else {
                    if (i.Argv.length <= 13 || i.Argv[13] != 2) {
                        r(i, s)
                    } else {
                        o(i, n, s)
                    }
                }
            }
        }
    }
    ;
    this.IDisposePic = function(i, t) {
        this.init = function() {
            var t = parseInt(i.Argv[0]);
            var e = tv.canvas.GamePictrue[t];
            if (e) {
                e.dispose()
            }
            if (e instanceof CFilterLayer) {
                tv.canvas.GameFilter.splice(tv.canvas.GameFilter.indexOf(e), 1);
                tv.canvas.initFilterInfo();
                tv.canvas.resetFilterInfo();
                tv.canvas.chearAllLayer();
                tv.canvas.renderFilter()
            }
            delete tv.canvas.GamePictrue[t];
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IMovePic = function(h, t) {
        this.init = function() {
            var t = tv.canvas.GamePictrue[parseInt(h.Argv[0])];
            if (!t) {
                return false
            }
            var e = getLayerAttribute(h);
            if ((h.Argv.length <= 13 || h.Argv[13] == 0) && !isFilterLayer(t)) {
                this.moveLayer(t, e);
                return false
            }
            if (GloableData.getInstance().isMobile() && !getMobileVer(filterAVer)) {
                this.moveLayer(t, e);
                return false
            }
            var i = h.Argv.slice(13);
            var a = initMaterialData(i, e);
            if (isFilterLayer(t)) {
                if (h.Argv[13] == 2) {
                    if (t.diffMaterialData(a) && !onTouchLong && !tv.system.quickRun && e.frames > 0) {
                        t.isUpdatingMaterial = true;
                        t.originalMaterialData = JSON.parse(JSON.stringify(t.materialData));
                        t.duration = h.Argv[9];
                        t.materialData = a;
                        t.getMaterialDeltaValue();
                        var s = parseInt(h.Argv[0]);
                        var i = h.Argv.slice(13);
                        t.effectiveLayer = getFilterEffectiveLayer(i, s)
                    } else {
                        t.materialData = a
                    }
                } else {
                    var n = t.index;
                    var r = t.materialData;
                    t.dispose();
                    tv.canvas.GameFilter.splice(tv.canvas.GameFilter.indexOf(t), 1);
                    t = new OBitmap("");
                    tv.canvas.GamePictrue[n] = t;
                    tv.canvas.viewport.addChild(t);
                    tv.canvas.viewport.setChildIndex(t, n);
                    t.setMirror(r.mirror);
                    t.setPosition(r.offsetX, r.offsetY);
                    t.setAlpha(r.alpha);
                    t.setScale(r.zoomX, r.zoomY);
                    t.setUrl("Graphics/" + h.Argv[1]);
                    t.setMask("", a);
                    this.moveLayer(t, e)
                }
            } else {
                if (h.Argv[13] == 2) {
                    var o = t.imageUrl;
                    this.setFilter(h, o, true);
                    t = tv.canvas.GamePictrue[parseInt(h.Argv[0])];
                    if (t.diffMaterialData(a) && !onTouchLong && !tv.system.quickRun && e.frames > 0) {
                        t.isUpdatingMaterial = true;
                        t.originalMaterialData = JSON.parse(JSON.stringify(t.materialData));
                        t.duration = h.Argv[9];
                        t.materialData = a;
                        t.getMaterialDeltaValue()
                    } else {
                        t.materialData = a
                    }
                } else {
                    if (t.diffMaterialData(a) && !onTouchLong && !tv.system.quickRun && e.frames > 0 && t.materialData) {
                        t.isUpdatingMaterial = true;
                        t.originalMaterialData = JSON.parse(JSON.stringify(t.materialData));
                        t.maskDuration = h.Argv[9];
                        t.materialData = a;
                        t.getMaterialDeltaValue()
                    }
                    t.setMask("", a);
                    this.moveLayer(t, e)
                }
            }
            return false
        }
        ;
        this.setFilter = function(t, e) {
            var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            if (!e) {
                return
            }
            tv.canvas.chearAllLayer();
            var a = parseInt(t.Argv[0]);
            var s = t.Argv.slice(13);
            var n = tv.canvas.GamePictrue[a];
            var l = i ? getLayerAttribute(t, n) : getLayerAttribute(t);
            if (n) {
                n.dispose();
                if (n instanceof CFilterLayer) {
                    var r = tv.canvas.GameFilter.indexOf(n);
                    tv.canvas.GameFilter.splice(r, 1)
                }
                n = null
            }
            n = new CFilterLayer;
            tv.canvas.GamePictrue[a] = n;
            tv.canvas.GameFilter.push(n);
            var r = tv.canvas.GameFilter.indexOf(n);
            var o = getFilterEffectiveLayer(s, a);
            var h = e;
            var c = initMaterialData(s, l);
            n.index = a;
            n.effectiveLayer = o;
            n.materialData = c;
            n.maskImg = h ? h : fileListFato("Graphics/" + t.Argv[1]);
            n.maskPath = "Graphics/" + t.Argv[1];
            if (JSON.stringify(tv.canvas.LayerMap) == "{}") {
                tv.canvas.initFilterInfo()
            } else {
                tv.canvas.resetFilterInfo()
            }
            tv.canvas.setFilterInfo(o, r);
            tv.canvas.renderFilter()
        }
        ;
        this.moveLayer = function(t, e) {
            if (!onTouchLong && !tv.system.quickRun && e.frames > 0) {
                t.fadeTo(e.alpha, e.frames);
                t.moveTo(e.x, e.y, e.frames);
                t.scaleTo(e.zoom_x, e.zoom_y, e.frames);
                t.setMirror(e.mirror)
            } else {
                t.setAlpha(e.alpha);
                t.setPosition(e.x, e.y);
                t.setScale(e.zoom_x, e.zoom_y);
                t.setMirror(e.mirror)
            }
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IRotatePic = function(o, t) {
        this.init = function() {
            var t = tv.canvas.GamePictrue[parseInt(o.Argv[0])];
            if (!t) {
                return false
            }
            var e = parseInt(o.Argv[1]) ? tv.system.vars.getVar(parseInt(o.Argv[2])) : parseInt(o.Argv[2]);
            e = parseInt(e) * 1e3 / 60;
            if (e <= 0) {
                e = 1
            }
            var i = parseInt(o.Argv[3]) ? tv.system.vars.getVar(parseInt(o.Argv[4])) : parseInt(o.Argv[4]);
            var a = parseInt(o.Argv[6]);
            var s = o.Argv[7].split(",");
            var n = s[0] ? s[0] : 0;
            var r = s[1] ? s[1] : 0;
            t.rotateImage(i, e, n, r, false, a);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.preLoadPic = function(a, t) {
        var s = true;
        var n = new Array;
        this.init = function() {
            s = false;
            var t = a.Argv[0].split("|");
            sVLoadImg.show();
            var e = "";
            for (var i = 0; i < t.length; i++) {
                if (t[i].toLowerCase().indexOf(".oaf") > -1) {
                    continue
                }
                e = fileListFato(t[i]);
                if (e && e.indexOf("mp3") == -1 && n.indexOf(e) < 0) {
                    n.push(e)
                }
            }
            SAL_preload(g, n, function(t) {
                if (t > 0) {
                    sVLoadImg.updateProcess(t)
                }
                s = t == 1
            }, 11);
            if (a.Argv[0].indexOf("oaf") > -1) {
                sVLoadImg.updateProcess(1);
                s = true
            }
        }
        ;
        this.finish = function() {
            return s
        }
        ;
        this.update = function() {}
    }
    ;
    this.IShowFrameImg = function(t, e) {
        this.init = function() {
            this.IShowDynamicPic(t, e).init()
        }
        ;
        this.finish = function() {
            return true
        }
        ;
        this.update = function() {}
    }
    ;
    this.IShowDynamicPic = function(c, t) {
        var u = false;
        var f = "";
        var d;
        this.init = function() {
            if (!c || c.Argv.length == 0) {
                u = true;
                return
            }
            var t = parseInt(c.Argv[0]);
            var e = c.Argv[14].split("|");
            var i = "";
            if (c.Argv.length >= 16 && c.Argv[15]) {
                i = c.Argv[15]
            }
            var a = false;
            if (c.Argv.length > 11) {
                a = c.Argv[11] == "1"
            } else {
                a = false
            }
            if (a) {
                f = "Graphics/Other/" + utils.madeString(tv.system.string.getVar(parseInt(c.Argv[12])), 0, c.Code)
            } else {
                f = "Graphics/" + c.Argv[1]
            }
            var s = null;
            if (tv.oaf2Data.hasOwnProperty(f.toLowerCase() + "x")) {
                s = tv.oaf2Data[f.toLowerCase() + "x"]
            } else if (tv.oaf2Data.hasOwnProperty(f.toLowerCase())) {
                s = tv.oaf2Data[f.toLowerCase()]
            }
            d = this.initSpriteAttribute(c);
            var n = tv.canvas.GamePictrue[t];
            if (n) {
                if (n instanceof CAnimation && n.path == f && s) {
                    n.stopAction();
                    n.buildAnimation(s, e, i)
                } else {
                    n.dispose();
                    n = null
                }
            }
            if (!n) {
                if (s) {
                    n = new CAnimation(s.MaxWidth,s.MaxHeight);
                    tv.canvas.viewport.setChildIndex(n, t);
                    n.loadData(f, e, i)
                } else {
                    n = new OBitmap;
                    tv.canvas.viewport.setChildIndex(n, t);
                    n.setUrl("graphics/" + c.Argv[13].toLowerCase())
                }
                tv.canvas.GamePictrue[t] = n
            }
            n.setPosition(d.x, d.y);
            n.setScale(d.zoomX, d.zoomY);
            n.setAlpha(d.alpha);
            n.setMirror(d.mirror);
            if (c.Argv.length > 16 && c.Argv[16] != 2) {
                if (c.Argv[16] == 1) {
                    var r = this.initMaterialData(c, d);
                    n.setMask("", r)
                }
                u = true
            } else if (c.Argv.length > 16 && c.Argv[16] == 2) {}
        }
        ;
        this.setFilter = function() {
            tv.canvas.chearAllLayer();
            var t = parseInt(c.Argv[0]);
            var e = tv.canvas.GamePictrue[t];
            var i = null;
            if (e && e instanceof CAnimation) {
                i = e
            } else {
                e.dispose();
                if (e instanceof CFilterLayer) {
                    var a = tv.canvas.GameFilter.indexOf(e);
                    tv.canvas.GameFilter.splice(a, 1)
                }
                e = null
            }
            e = new CFilterLayer;
            tv.canvas.GamePictrue[t] = e;
            tv.canvas.GameFilter.push(e);
            var a = tv.canvas.GameFilter.indexOf(e);
            var s;
            var n = c.Argv[18] == 1;
            if (n) {
                s = c.Argv[19].split(",")
            } else {
                s = new Array;
                for (var r = 0; r < t; r++) {
                    s[r] = r.toString()
                }
            }
            if (s.indexOf(t.toString()) > -1) {
                s.splice(s.indexOf(t.toString()), 1)
            }
            var o = this.initMaterialData(c, d);
            var h = f;
            var l = i;
            e.index = t;
            e.effectiveLayer = s;
            e.materialData = o;
            e.maskImg = h;
            e.maskElement = l;
            if (JSON.stringify(tv.canvas.LayerMap) == "{}") {
                tv.canvas.initFilterInfo()
            } else {
                tv.canvas.resetFilterInfo()
            }
            tv.canvas.setFilterInfo(s, a);
            tv.canvas.renderFilter();
            u = true
        }
        ;
        this.initMaterialData = function(t, e) {
            var i = getFilterType(parseInt(t.Argv[16]), parseInt(t.Argv[17]));
            if (i < 0) {
                return false
            }
            var a = t.Argv[17].split(",");
            return {
                type: i,
                name: "Hue",
                duration: -1,
                offsetX: e.x,
                offsetY: e.y,
                zoomX: e.zoomX,
                zoomY: e.zoomY,
                alpha: e.alpha,
                mirror: e.mirror,
                r: a.length >= 5 ? parseInt(a[0]) / 100 : -1,
                g: a.length >= 5 ? parseInt(a[1]) / 100 : -1,
                b: a.length >= 5 ? parseInt(a[2]) / 100 : -1,
                gray: a.length >= 5 ? parseInt(a[3]) / 100 : -1,
                hue: a.length >= 5 ? parseInt(a[4]) : -1
            }
        }
        ;
        this.initSpriteAttribute = function(t) {
            var e, i;
            if (t.Argv[2] == "1") {
                e = tv.system.vars.getVar(parseInt(t.Argv[3]));
                i = tv.system.vars.getVar(parseInt(t.Argv[4]))
            } else {
                e = parseInt(t.Argv[3]);
                i = parseInt(t.Argv[4])
            }
            var a = parseFloat(t.Argv[5]) / 100;
            var s = parseFloat(t.Argv[6]) / 100;
            var n = parseFloat(t.Argv[7]);
            var r = t.Argv[8] == "1";
            return {
                x: e,
                y: i,
                zoomX: a,
                zoomY: s,
                alpha: n / 255,
                mirror: r
            }
        }
        ;
        this.finish = function() {
            return true
        }
        ;
        this.update = function() {}
    }
    ;
    this.IStartBGM = function(i, t) {
        this.init = function() {
            var t = i.Argv[1] == "" ? "80" : i.Argv[1];
            if (i.Argv[0] == "") {
                oaudio.bgmFade(1);
                return false
            }
            var e = "Audio/" + i.Argv[0];
            if (i.Argv[4] && i.Argv[4] == "1") {
                oaudio.fadeBGM(e, 0, parseInt(t), parseInt(i.Argv[5]))
            } else {
                oaudio.playBGM(e, parseInt(t))
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IStartSE = function(i, t) {
        this.init = function() {
            var t = i.Argv[1];
            if (t == "") {
                t = "80"
            }
            if (i.Argv[0] == "") {
                oaudio.stopSE();
                return false
            }
            var e = fileListFato("Audio/" + i.Argv[0], "se path not exist.");
            if (e) {
                if (i.Argv[4] && i.Argv[4] == "1") {
                    oaudio.fadeSE(e, 0, parseInt(t), parseInt(i.Argv[5]))
                } else {
                    oaudio.playSE(e, parseInt(t))
                }
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IStartVoice = function(i, t) {
        this.init = function() {
            var t = i.Argv[1];
            if (t == "") {
                t = "80"
            }
            if (i.Argv[0] == "") {
                oaudio.stopVoice(1);
                return false
            }
            var e = fileListFato("Audio/" + i.Argv[0], "voice path not exist.");
            if (e) {
                if (i.Argv[4] && i.Argv[4] == "1") {
                    oaudio.fadeVoice(e, 0, parseInt(t), parseInt(i.Argv[5]))
                } else {
                    oaudio.playVoice(e, parseInt(t))
                }
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IStartBGS = function(i, t) {
        this.init = function() {
            var t = i.Argv[1];
            if (t == "") {
                t = "80"
            }
            if (i.Argv[0] == "") {
                oaudio.bgsFade(1);
                return false
            }
            var e = "Audio/" + i.Argv[0];
            if (i.Argv[4] && i.Argv[4] == "1") {
                oaudio.fadeBGS(e, 0, parseInt(t), parseInt(i.Argv[5]))
            } else {
                oaudio.playBGS(e, parseInt(t))
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IFadeBGM = function(t, e) {
        this.init = function() {
            oaudio.bgmFade(parseInt(t.Argv[0]) * FPS);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IStopSE = function(t, e) {
        this.init = function() {
            if (t.Argv[0]) {
                oaudio.seFade(parseInt(t.Argv[0]) * FPS)
            } else {
                oaudio.stopSE()
            }
            return true
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IStopVoice = function(t, e) {
        this.init = function() {
            if (t.Argv[0]) {
                oaudio.voiceFade(parseInt(t.Argv[0]) * FPS)
            } else {
                oaudio.stopVoice()
            }
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IFadeBGS = function(t, e) {
        this.init = function() {
            oaudio.bgsFade(parseInt(t.Argv[0]) * FPS);
            return false
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    this.IBubbleMode = function(y, t) {
        this.init = function() {
            var t = new DChatData;
            var e = y.Argv[0];
            var i = y.Argv[1];
            var a = y.Argv[2];
            var s = y.Argv[3];
            var n = y.Argv[4];
            var r = y.Argv[5];
            var c = y.Argv[6];
            if (tv.DataVer <= 104) {
                t.Modify({
                    id: e,
                    turn: i,
                    keep: a,
                    startX: s,
                    startY: n,
                    width: r,
                    height: c,
                    opacity: 1
                })
            } else {
                var u = y.Argv[7];
                var f = y.Argv[8];
                var d = y.Argv[9];
                var m = y.Argv[10];
                var g = y.Argv[11];
                var v = y.Argv[12];
                var p = y.Argv[13];
                var S = y.Argv[14];
                var o = y.Argv[15] / 255;
                if (isNaN(o)) {
                    o = 0
                }
                t.Modify({
                    id: e,
                    turn: i,
                    keep: a,
                    startX: s,
                    startY: n,
                    width: r,
                    height: c,
                    msg: u,
                    areaID: v,
                    areaLeft: m,
                    areaRight: g,
                    areaUp: f,
                    areaDown: d,
                    zoomX: p,
                    zoomY: S,
                    opacity: o
                })
            }
            if (t.keep == "0") {
                tv.canvas.clearChatData([t.id])
            }
            var h = parseInt(t.id);
            if (tv.DataVer <= 104) {
                h += tv.canvas.OLD_CHAT_START
            }
            if (tv.canvas.GamePictrue[h]) {
                var I = tv.canvas.GamePictrue[h];
                var w = tv.canvas.GameFilter.indexOf(I);
                tv.canvas.GamePictrue[h].dispose();
                if (w > -1) {
                    tv.canvas.GameFilter.splice(w, 1)
                }
                delete tv.canvas.GamePictrue[h]
            }
            if (t.turn == "1") {
                var l = new CChatLayer(t);
                tv.canvas.GamePictrue[h] = l;
                tv.canvas.viewport.setChildIndex(l, h);
                if (tv.canvas.chatData[h] && tv.canvas.chatData[h].length > 0) {
                    l.addChatItemList(tv.canvas.chatData[h])
                }
            }
            return true
        }
        ;
        this.finish = function() {
            return true
        }
    }
    ;
    var v = 10;
    this.ISendBubble = function(d, t) {
        var m;
        var g = void 0;
        this.init = function() {
            v = 10;
            if (tv.system.autoRun) {
                v = 60
            }
            if (tv.system.quickRun || onTouchLong) {
                v = 10
            }
            var t = new DChatItem;
            if (tv.DataVer <= 104) {
                var e = d.Argv[0];
                var i = d.Argv[1];
                var a = d.Argv[2];
                var s = d.Argv[3];
                var n = d.Argv[4];
                var r = d.Argv[5];
                var o = d.Argv[6];
                var h = d.Argv[7];
                t.Modify({
                    id: e,
                    pos: i,
                    framePic: a,
                    type: s,
                    name: n,
                    head: r,
                    content: o,
                    size: h
                })
            } else {
                var e = d.Argv[0];
                var s = d.Argv[3];
                var o = d.Argv[6];
                var h = d.Argv[7];
                var c = d.Argv[11];
                var u = d.Argv[12];
                t.Modify({
                    id: e,
                    type: s,
                    content: o,
                    size: h,
                    characterID: c,
                    picPath: u
                })
            }
            g = parseInt(t.id);
            var f = g;
            if (tv.DataVer <= 104) {
                g += tv.canvas.OLD_CHAT_START
            }
            var l = tv.canvas.GamePictrue[g];
            m = !l;
            if (l && l instanceof CChatLayer) {
                l.preLoadItem(t, function() {
                    tv.canvas.addChatData(f, t);
                    l.addChatItem(t, tv.DataVer > 104);
                    tv.system.rwFile.autoSave(d);
                    m = true
                })
            } else {
                m = true
            }
            if (tv.canvas.GameFilter.length > 0) {
                tv.canvas.renderFilter()
            }
            return true
        }
        ;
        this.update = function() {
            v--
        }
        ;
        this.finish = function() {
            if (!m) {
                return false
            }
            var t = tv.canvas.GamePictrue[g];
            if (!t) {
                return true
            }
            var e = false;
            if (tv.system.quickRun || onTouchLong || tv.system.autoRun) {
                e = v <= 0
            } else {
                e = onClick()
            }
            if (e) {
                if (d.Argv[3] == "1") {
                    try {
                        showMessageCallback({
                            message: utils.getShowText(d.Argv[6])
                        })
                    } catch (t) {}
                }
            }
            return e
        }
    }
    ;
    this.IHpLock = function(t, e) {
        this.lock_id = t.Argv[0];
        this.hpNumber = t.Argv[1];
        this.isFinish = false;
        this.init = function() {
            if (Configuration.isH5) {
                return true
            } else {
                if (Configuration.enablePurchase) {
                    return true
                }
                if (tv.canvas.Share) {
                    tv.canvas.Share.setVisible(true);
                    tv.canvas.Share.showContent(0);
                    tv.canvas.Share.shareCallback = function() {// hintMessage.setHint("体力锁解锁成功!")
                    }
                }
                return false
            }
        }
        ;
        this.update = function() {
            if (Configuration.isH5) {} else {
                if (!Configuration.enablePurchase) {
                    if (tv.canvas.Share && !tv.canvas.Share.isFinish() && onClick() && !tv.canvas.Share.visible) {
                        tv.canvas.Share.setVisible(true);
                        tv.canvas.Share.showContent(0);
                        tv.canvas.Share.shareCallback = function() {// hintMessage.setHint("剧情解锁成功!")
                        }
                    }
                }
            }
        }
        ;
        this.finish = function() {
            if (Configuration.isH5) {
                return true
            } else {
                return Configuration.enablePurchase || tv.canvas.Share && tv.canvas.Share.isFinish()
            }
        }
    }
    ;
    this.IStoryLock = function(t, e) {
        this.itemPurchased = false;
        this.checkingData = false;
        this.init = function() {
            var t = this;
            if (Configuration.isH5) {
                if (GloableData.getInstance().isWXmini || GloableData.getInstance().isFreeLimit || GloableData.getInstance().isLightDay || GloableData.getInstance().isLightVIP) {
                    this.itemPurchased = true
                } else {
                    this.checkingData = true;
                    sLoading.showMask();
                    refreshItemPrice(function() {
                        GloableData.getInstance().loadMallAllItems(function() {
                            t.checkingData = false;
                            sLoading.hideMask()
                        })
                    })
                }
            } else if (Configuration.isQQ) {
                this.itemPurchased = true
            }
            return false
        }
        ;
        this.update = function() {
            if (Configuration.isQQ || this.checkingData) {
                return
            }
            if (Configuration.isH5 || Configuration.enablePurchase) {
                if (!this.itemPurchased && !isMallLock) {
                    this.itemPurchased = this.checkItemStatus(t.Argv[0]);
                    if (!this.itemPurchased) {
                        tv.scene = new SMallLock(t.Argv[0])
                    }
                }
            } else {
                if (tv.canvas.Share && !tv.canvas.Share.isFinish() && onClick() && !tv.canvas.Share.visible) {
                    tv.canvas.Share.setVisible(true);
                    tv.canvas.Share.showContent(1);
                    tv.canvas.Share.shareCallback = function() {// hintMessage.setHint("剧情解锁成功!")
                    }
                }
            }
        }
        ;
        this.finish = function() {
            if (Configuration.isH5 || Configuration.enablePurchase || Configuration.isQQ) {
                return this.itemPurchased
            } else {
                return tv.canvas.Share && tv.canvas.Share.isFinish()
            }
        }
        ;
        this.checkItemStatus = function(t) {
            var e = GloableData.getInstance().getItemPurchaseInfoById(t);
            return e != null && e.max > 0
        }
    }
    ;
    this.IStartVideo = function(n, t) {
        this.video = SALVideo();
        this.init = function() {
            if (n.Argv[0] == "") {
                return false
            }
            tv.canvas.viewport.setChildIndex(this.video, 100);
            var t = fileListFato("graphics/" + n.Argv[0], "bgs path not exist.");
            var e, i, a, s;
            if (parseInt(n.Argv[1]) == 1) {
                e = tv.system.vars.getVar(parseInt(n.Argv[2]));
                i = tv.system.vars.getVar(parseInt(n.Argv[3]))
            } else {
                e = parseInt(n.Argv[2]);
                i = parseInt(n.Argv[3])
            }
            SAL_setPosition(this.video, e, i);
            if (parseInt(n.Argv[4]) == 1) {
                a = tv.system.vars.getVar(parseInt(n.Argv[5]));
                s = tv.system.vars.getVar(parseInt(n.Argv[6]))
            } else {
                a = parseInt(n.Argv[5]);
                s = parseInt(n.Argv[6])
            }
            SAL_setElementSize(this.video, a, s);
            if (t) {
                SAL_playVideo(this.video, t)
            }
            return false
        }
        ;
        this.update = function() {}
        ;
        this.finish = function() {
            var t = SAL_VideoFinish(this.video);
            if (t) {
                this.video && SAL_destroyElement(this.video)
            }
            return t
        }
    }
}

function getOriginalChoicePos(t) {
    var e = t.pos;
    var i = -1;
    var a = null;
    var s = -1;
    var n;
    for (n = e - 1; n >= 0; n--) {
        if (t.story[n].Code == 108 || t.story[n].Code == 212) {
            a = t.story[n];
            s = n;
            break
        }
    }
    if (a != null) {
        if (a.Code == 108) {
            var r = false;
            for (n = s - 1; n >= 0; n--) {
                r = t.story[n].Code == 101 || t.story[n].Code == 1010 || t.story[n].Code == 1011;
                if (r && a.Indent - 1 == t.story[n].Indent) {
                    i = n;
                    break
                }
            }
        } else if (a.Code == 212) {
            for (n = s - 1; n >= 0; n--) {
                if (t.story[n].Code == 204 && a.Indent - 1 == t.story[n].Indent) {
                    i = n;
                    break
                }
            }
        }
    }
    return i
}

function submitWebLogChoice(t, e, i, c) {
    if (localProjectPath || clientType == 3 || clientType == 6) {
        return
    }
    var a = "剧情段: " + "[" + e.storyName + "]";
    for (var s = e.pos - 1; s >= 0; s--) {
        var n = e.story[s];
        if (n && n.Code == 100) {
            a += n.Argv[2];
            break
        }
    }
    var r = {
        op: 51,
        cindex: i,
        eindex: (e.storyId & 65535) << 16 | e.pos & 65535,
        ecode: t,
        ctext: encodeURIComponent(c),
        storyname: encodeURIComponent(e.storyName),
        storyid: e.storyId,
        guid: guid,
        version: ver,
        username: "",
        gname: encodeURIComponent(tv.data.projectName),
        status: 3,
        ref: "h5",
        token: GloableData.getInstance().userData.token,
        uid: 0,
        channel: channelName,
        neartext: encodeURIComponent(a)
    };
    if (!tv.data.projectName) {
        r.gname = ""
    }
    if (Configuration.isH5) {
        var o = "";
        var u = countServer.createUuid();
        var f = serverTime.timestramp;
        r.nonce = u;
        r.timestamp = f;
        var h = Object.keys(r).sort().reverse();
        for (var l = 0; l < h.length; l++) {
            o += r[h[l]] && decodeURIComponent(r[h[l]].toString())
        }
        r.sign = md5(o + "t_16b4a01f45313e88");
        serverAjax.submitWebLog(r)
    }
}

function submitWebLogStory(t, e) {
    if (localProjectPath || clientType == 3 || clientType == 6) {
        return true
    }
    var i = {
        op: 4,
        gindex: gIndex,
        guid: guid,
        version: ver,
        storyid: t,
        username: "",
        gname: encodeURIComponent(tv.data.projectName),
        storyname: encodeURIComponent(e),
        status: 3,
        ref: "h5",
        token: GloableData.getInstance().userData.token,
        channel: channelName,
        uid: 0
    };
    if (!tv.data.projectName) {
        i.gname = ""
    }
    var a = "";
    var s = countServer.createUuid();
    var n = serverTime.timestramp;
    i.nonce = s;
    i.timestamp = n;
    var r = Object.keys(i).sort().reverse();
    for (var o = 0; o < r.length; o++) {
        a += i[r[o]] && decodeURIComponent(i[r[o]].toString())
    }
    i.sign = md5(a + "t_16b4a01f45313e88");
    serverAjax.submitWebLog(i)
}

function getServerTimeByType(t) {
    if (localProjectPath) {
        return getLocalTimeByType(t)
    }
    var e = 0;
    switch (t) {
    case 0:
        e = parseInt(serverTime.year);
        break;
    case 1:
        e = parseInt(serverTime.month);
        break;
    case 2:
        e = parseInt(serverTime.day);
        break;
    case 3:
        if (serverTime.week == "0") {
            e = 7
        } else {
            e = parseInt(serverTime.week)
        }
        break;
    case 4:
        e = parseInt(serverTime.hour);
        break;
    case 5:
        e = parseInt(serverTime.minute);
        break;
    case 6:
        e = parseInt(serverTime.second);
        break;
    case 7:
        e = parseInt(serverTime.timestramp);
        break
    }
    return e
}

function getLocalTimeByType(t) {
    var e = new Date;
    var i = 0;
    switch (t) {
    case 0:
        i = e.getFullYear();
        break;
    case 1:
        i = e.getMonth() + 1;
        break;
    case 2:
        i = e.getDate();
        break;
    case 3:
        if (e.getDay() == 0) {
            i = "7"
        } else {
            i = e.getDay()
        }
        break;
    case 4:
        i = e.getHours();
        break;
    case 5:
        i = e.getMinutes();
        break;
    case 6:
        i = e.getSeconds();
        break;
    case 7:
        {
            i = parseInt(Date.now() / 1e3);
            break
        }
    }
    return i
}

function SGame() {
    this.init = function() {
        tv.CUIFromIndex = -1;
        if (!fastImg) {
            fastImg = SALSprite();
            SAL_setElementIndex(g, fastImg, 9600);
            SAL_setPosition(fastImg, gGameX, 0)
        }
    }
    ;
    this.update = function() {
        if (sVLoadImg && sVLoadImg.isLoad) {
            if (gLoadAssets && gLoadAssets.bloadAssets) {
                gLoadAssets.update()
            }
        }
        if (gLoadAssets && gLoadAssets.bloadAssets) {
            return
        }
        tv.storyList.update();
        tv.canvas.update()
    }
    ;
    this.dispose = function() {}
    ;
    this.init()
}
var isNew = false;
var srcLists = [speedUpIcon0, speedUpIcon1, speedUpIcon2, speedUpIcon3, speedUpIcon4, speedUpIcon5, speedUpIcon6, speedUpIcon7, speedUpIcon8];

function LoadAssets() {
    var S = new Array;
    var f = false;
    this.bloadAssets = false;
    this.curLoadScene = "";
    var e = -1;
    this.pos_story = 1;
    this.otherSceneUI = {
        SMenu: false,
        SReplay: false,
        SSavefile: false,
        SSystem: false,
        SBGM: false,
        SCG: false,
        NewMall: false,
        SFlowerAd: false,
        Mall: false,
        STitle: false,
        TimeMall: false,
        Welfare: false,
        Name: false
    };
    var n = "";
    this.curBarValue = 0;
    this.startBarValue = 0;
    this.endBarValue = 1;
    this.sendTimer = 0;
    var d = {
        notDisturb: 0,
        getBlockInfo: .3,
        getADInfo: .5,
        getGameInfo: .6,
        preLoadRes: .7,
        getGUID: 1,
        getAddictionTime: 1.5,
        getGameAllStutas: 1.6,
        getMapBin: 2,
        getGameBinMap: 3,
        getGameBin: 4,
        getFontData: 5,
        preLoadCanvas: 6,
        getTimeMallBin: 6.5,
        getNewMallBin: 7,
        getWekfareBin: 7.5,
        getNameBin: 7.6,
        getSession: 8,
        preLoadImg: 9,
        preLoadCanvasCommon: 10
    };
    if (Configuration.isH5) {
        this.currentState = d.getBlockInfo
    } else {
        this.currentState = d.getADInfo
    }
    this.errNum = 0;
    this.startLoad = true;
    this.srcListPreloadFinish = true;
    this.splashStartTime = Date.now();
    this.splashLog = "";
    this.update = function() {
        var e = this;
        if (!this.srcListPreloadFinish) {
            return
        }
        switch (this.currentState) {
        case d.getBlockInfo:
            this.splashLog = "current step: " + this.currentState;
            if (clientType != 3 && GloableData.getInstance().isMobile()) {
                this.currentState = d.notDisturb;
                this.checkBlockInfo()
            } else {
                this.currentState = d.getGameInfo
            }
            break;
        case d.getGameInfo:
            this.currentState = d.notDisturb;
            this.curBarValue = .04;
            this.getGameInfo();
            break;
        case d.preLoadRes:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .05;
            this.preLoadRes();
            break;
        case d.getADInfo:
            this.splashLog = "current step: " + this.currentState;
            if (!isNeedPreventEnter && GloableData.getInstance().userData.isLogin && GloableData.getInstance().userData.vip_level > 0 && GloableData.getInstance().userData.screen_game_ad > 0) {
                this.setSplashProcess(null)
            } else if (!Configuration.isH5 || clientType == 1 || clientType == 3 || clientType == 6 || clientType == 5) {
                this.setSplashProcess(null)
            } else {
                this.currentState = d.notDisturb;
                this.checkADStatus()
            }
            break;
        case d.getGUID:
            if (isNeedPreventEnter) {
                return
            }
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .1;
            if (localProjectPath && localProjectPath.length > 0) {
                this.currentState = d.getGameBin
            } else if (guid && guid.length > 0) {
                this.currentState = d.getAddictionTime
            } else {
                serverAjax.getGUIDInfo(this.getGameGUIDCallback.bind(this))
            }
            break;
        case d.getAddictionTime:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .15;
            if (clientType == 3 || clientType == 6 || clientType == 1 && reviewing == 1) {
                this.currentState = d.getGameAllStutas
            } else {
                refreshAddictionPreventionTime(this.getAddictionTimeCallBack.bind(this))
            }
            break;
        case d.getGameAllStutas:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .16;
            if (clientType == 3 || clientType == 6 || clientType == 1 && reviewing == 1) {
                this.currentState = d.getMapBin
            } else {
                this.getGameAllStutas()
            }
            break;
        case d.getMapBin:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .2;
            var t = webConfig.M_RESOURCE_SERVER_URL + "web/" + guid + "/" + ver + "/Map_32.bin";
            var i = webConfig.M_RESOURCE_SERVER_URL + "web/" + guid + "/" + ver + "/Map.bin";
            if (SAL_checkSRCPreloaded(g, t)) {
                this.readLocalMapData(t)
            } else if (SAL_checkSRCPreloaded(g, i)) {
                this.readLocalMapData(i)
            } else {
                serverAjax.getMapBin(this.getMapCallback.bind(this))
            }
            break;
        case d.getGameBinMap:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .3;
            this.getGamebinMap();
            if (clientType != 3 && clientType != 6) {
                this.createInvestigateImageList()
            }
            break;
        case d.getGameBin:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .4;
            this.sendTimer = Date.now();
            var a = fileListFato("data/game.bin");
            var c = SAL_checkSRCPreloaded(g, a);
            if (c) {
                isNew = false
            } else {
                isNew = game_bin_path != -1
            }
            if (isNew) {
                a = fileListFato("game00.bin")
            }
            new ORead(a,this.getGameBinCallback.bind(this));
            break;
        case d.getFontData:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .5;
            this.sendTimer = Date.now();
            BitmapFont.getInstance().init(this.getFontDataCallback.bind(this));
            if (clientType == 6) {
                fontSimple = SAL_setBitmapFont(g, null, [M_IMG_SERVER_URL_V2 + "font/FZLBFW.TTF"], function() {
                    SAL_log("load ttf finish")
                }, false)
            }
            break;
        case d.getTimeMallBin:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .55;
            if (hasFileItem("data/malllimite.bin")) {
                var s = fileListFato("data/malllimite.bin");
                if (s) {
                    new ORead(s,this.getTimeMallBinCallback.bind(this))
                }
            } else {
                this.currentState = d.getNewMallBin
            }
            break;
        case d.getNewMallBin:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .6;
            if (hasFileItem("data/mallnew.bin")) {
                var n = fileListFato("data/mallnew.bin");
                if (n) {
                    new ORead(n,this.getNewMallBinCallback.bind(this))
                } else {
                    this.currentState = d.getWekfareBin
                }
            } else if (hasFileItem("data/mall.bin")) {
                var r = fileListFato("data/mall.bin");
                if (r) {
                    new ORead(r,function(t) {
                        e.getMallBinCallBack(t)
                    }
                    )
                } else {
                    this.currentState = d.getWekfareBin
                }
            } else {
                this.currentState = d.getWekfareBin
            }
            break;
        case d.getWekfareBin:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .65;
            if (hasFileItem("data/welfare.bin")) {
                var o = fileListFato("data/welfare.bin");
                if (o) {
                    new ORead(o,this.getWelfareBinCallback.bind(this))
                } else {
                    this.currentState = d.getNameBin
                }
            } else {
                this.currentState = d.getNameBin
            }
            break;
        case d.getNameBin:
            this.splashLog = "current step: " + this.currentState;
            this.currentState = d.notDisturb;
            this.curBarValue = .66;
            if (hasFileItem("data/name.bin")) {
                var h = fileListFato("data/name.bin");
                if (h) {
                    new ORead(h,this.getNameBinCallback.bind(this))
                } else {
                    this.currentState = d.preLoadCanvas
                }
            } else {
                this.currentState = d.preLoadCanvas
            }
            break;
        case d.preLoadCanvas:
            this.splashLog = "current step: " + this.currentState;
            this.startBarValue = .7;
            this.endBarValue = .88;
            this.currentState = d.notDisturb;
            this.curBarValue = .7;
            this.preLoadCanvasImg();
            break;
        case d.preLoadCanvasCommon:
            this.splashLog = "current step: " + this.currentState;
            this.startBarValue = .88;
            this.endBarValue = .98;
            this.currentState = d.notDisturb;
            this.curBarValue = .88;
            this.preLoadCanvasCommonImg();
            break;
        case d.getSession:
            if (Configuration.isH5) {
                this.getWmod()
            } else {
                this.currentState = d.notDisturb;
                this.curBarValue = .98;
                this.getSession(function() {
                    e.currentState = d.preLoadImg
                })
            }
            break;
        case d.preLoadImg:
            this.splashLog = "current step: " + this.currentState;
            this.curBarValue = 1;
            sLoading = new SLoading;
            this.currentState = d.notDisturb;
            f = true;
            break;
        case d.notDisturb:
            break
        }
        if (this.startLoad) {
            if (this.curLoadScene && this.curLoadScene.length > 0) {
                this.curLoadScene == "SCUI" ? this.SCUILoad() : this.otherUILoad()
            } else if (tv.scene instanceof SGame) {}
            this.startLoad = false
        }
        if (f) {
            if (isLoadExData) {
                if (sVLoadImg) {
                    sVLoadImg.updateProcess(1)
                }
                if (splash) {
                    splash.setProgress(1)
                } else {
                    this.endScene()
                }
            }
        }
        if (sVLoadImg) {
            sVLoadImg.updateProcess(this.curBarValue)
        }
        if (splash) {
            splash.setProgress(this.curBarValue);
            var u = (new Date).getTime();
            if (this.sendTimer > 0 && u - this.sendTimer > 1e4 && !f) {
                splash.tips.setText("若加载时间较长，请耐心等待或在APP右下角-我的-设置中，点击清理缓存重试");
                var l = parseInt(splash.tips.textWidth);
                splash.imgurl ? splash.tips.setPosition((gGameWidth - l) / 2, splash.pbg.y + 50) : splash.tips.setPosition((gGameWidth - l) / 2, splash.pbg.y + 60);
                this.sendTimer = 0
            }
            if (!isNeedPreventEnter && this.splashStartTime > 0 && Date.now() - this.splashStartTime > 2e4 && !f) {
                serverAjax.uploadLog(this.splashLog);
                this.splashStartTime = 0
            }
        }
    }
    ;
    this.getWmod = function() {
        if (groupid && !GloableData.getInstance().groupID) {
            GloableData.getInstance().groupID = groupid;
            this.loadGroupBin(groupid)
        } else {
            this.currentState = d.preLoadImg
        }
    }
    ;
    this.loadWmodModBin = function(t, e) {
        var i = this;
        var a = webConfig.WMOD_RES_SERVER_URL + "modbin/" + t + "/debug/" + ver + "/" + md5(t);
        GloableData.getInstance().wmodUseType = "wmod";
        new ORead(a,function(t) {
            i.loadWmodBinComplete(t)
        }
        )
    }
    ;
    this.loadWmodBinComplete = function(t) {
        var e = new DWmodData(t);
        if (e.id) {
            GloableData.getInstance().wmodList.set(e.id, e);
            countServer.submitAllFlow(t.length, 1, GloableData.getInstance().groupID, e.id)
        }
    }
    ;
    this.wmodNum = 0;
    this.loadGroupBin = function(t) {
        var o = this;
        GloableData.getInstance().wmodUseType = "group";
        var e = webConfig.WMOD_RES_SERVER_URL + "groupbin/" + t + "/online/" + groupVer + "/group.bin";
        if (!GloableData.getInstance().wmodGroup) {
            GloableData.getInstance().wmodGroup = new Dictionary
        }
        var i = function t(e) {
            var i = [];
            for (var a = 0; a < e.list.length; a++) {
                var s = e.list[a].roleName;
                GloableData.getInstance().wmodGroup.set(s, e.list[a].wmodId);
                var n = webConfig.WMOD_RES_SERVER_URL + e.list[a].modUrl;
                if (!(i.indexOf(n) > -1)) {
                    i.push(webConfig.WMOD_RES_SERVER_URL + e.list[a].modUrl)
                }
            }
            for (var r = 0; r < i.length; r++) {
                new ORead(i[r],function(t) {
                    o.wmodNum++;
                    o.loadWmodBinComplete(t);
                    if (o.wmodNum == i.length) {}
                }
                )
            }
            o.currentState = d.preLoadImg
        };
        serverAjax.sendGetAjaxJSON(e, i, function() {
            o.currentState = d.preLoadImg
        })
    }
    ;
    this.getGameGUIDCallback = function(t, e) {
        if (parseInt(t) == 200) {
            if (e && e.data && e.data.game) {
                guid = e.data.game.guid;
                ver = timerPublish ? publishVersion : e.data.game.cur_version;
                refreshGameInfo();
                this.errNum = 0;
                if (Configuration.isH5) {
                    this.currentState = d.getAddictionTime
                } else {
                    this.currentState = d.getMapBin
                }
            }
        } else {
            this.errNum++;
            if (this.errNum <= 5) {
                var i = this;
                SAL_setTimeout(function() {
                    serverAjax.getGUIDInfo(i.getGameGUIDCallback.bind(i))
                }, 3e3)
            } else {
                SAL_alert("资源加载失败!");
                this.errNum = 0
            }
        }
    }
    ;
    this.getAddictionTimeCallBack = function(t, e) {
        if (parseInt(t) == 200 && e && e.data) {
            updateAddictionPreventionTime(e.data)
        }
        this.currentState = d.getGameAllStutas
    }
    ;
    this.getMapCallback = function(t, e) {
        if (parseInt(t) == 200 && e && e.data) {
            var i = e.data;
            for (var a = 0; a < i.length; a++) {
                var s = new o(i[a],1);
                var n = s.fileName;
                fileList[n] = s;
                if (quality == 31) {
                    s.initSize()
                }
                if (!md5Map.hasOwnProperty(s.md5)) {
                    md5Map[s.md5] = s
                }
            }
            game_bin_path = "web/" + guid + "/" + ver + "/Game_mini.bin";
            this.currentState = d.getGameBinMap
        } else {
            this.errNum++;
            if (this.errNum <= 5) {
                var r = this;
                SAL_setTimeout(function() {
                    SAL_log("获取mapBin失败,尝试重新获取，第" + r.errNum + "次");
                    serverAjax.getMapBin(r.getMapCallback.bind(r))
                }, 3e3)
            } else {
                SAL_alert("获取mapBin失败!");
                this.errNum = 0
            }
        }
    }
    ;
    this.readLocalMapData = function(t) {
        var e = function(t) {
            if (t == null) {
                game_bin_path = -1;
                this.currentState = d.getGameBin
            } else {
                this.getGameBinMapCallback(t)
            }
        }
        .bind(this);
        new ORead(t,e,false)
    }
    ;
    this.getGamebinMap = function() {
        var t = webConfig.M_RESOURCE_SERVER_URL + game_bin_path + "?v=" + Date.now();
        var e = function(t) {
            if (t == null) {
                game_bin_path = -1;
                this.currentState = d.getGameBin
            } else {
                this.getGameBinMapCallback(t)
            }
        }
        .bind(this);
        new ORead(t,e,false)
    }
    ;
    this.createInvestigateImageList = function() {
        var t = function t(e, i) {
            if (e == 200) {
                if (!i.data || i.data.length <= 0) {
                    return
                }
                for (var a = 0; a < i.data.length; a++) {
                    var s = i.data[a];
                    var n = s[s.length - 1];
                    investigateImageList.push(n)
                }
            }
        };
        serverAjax.sendGetAjaxJSON(webConfig.GET_INVESTIGATE_IMAGE + "?gindex=" + gIndex + "&version=" + ver + "&uid=" + GloableData.getInstance().userData.uid, t, t)
    }
    ;
    this.getGameBinMapCallback = function(t) {
        var e = t.readInt32();
        for (var i = 0; i < e; i++) {
            var a = new r(t,0);
            var s = a.fileName;
            fileList[s] = a
        }
        this.currentState = d.getGameBin
    }
    ;
    this.getGameBinCallback = function(t) {
        if (t.convertToString(t.read(6)) == "ORGDAT") {
            tv.data = new DMain(t);
          //  tv.data.getAllS();
            tv.storyList = new IStoryList;
            tv.inter = new IMain;
            tv.system = new DGameSystem;
            tv.adInfo = new DAdInfo(tv.data.System.SaveData.max);
            tv.storyList.addStory(tv.inter);
            gGameHeight = parseInt(tv.data.Headr.GHeight);
            gGameWidth = parseInt(tv.data.Headr.GWidth);
            this.pos_story = tv.data.System.StartStoryId;
            e = -1;
            SALlocalStorage.getItem("adInfo", function(t) {
                if (t) {
                    tv.adInfo.loadADInfo(t)
                }
                this.currentState = d.getFontData
            }
            .bind(this))
        }
    }
    ;
    this.getTimeMallBinCallback = function(t) {
        tv.gameTimeMall = new DTimeMall(t);
        this.currentState = d.getNewMallBin
    }
    ;
    this.getNewMallBinCallback = function(t) {
        tv.gameNewMall = new DNewMall(t);
        this.currentState = d.getWekfareBin
    }
    ;
    this.getMallBinCallBack = function(t) {
        tv.gameMallBin = new DMall(t);
        this.currentState = d.getWekfareBin
    }
    ;
    this.getWelfareBinCallback = function(t) {
        tv.gameWelfateBin = new DWelfare(t);
        this.currentState = d.getNameBin
    }
    ;
    this.getNameBinCallback = function(t) {
        tv.gameNameBin = new DName(t);
        this.currentState = d.preLoadCanvas
    }
    ;
    this.getFontDataCallback = function() {
        this.currentState = d.getTimeMallBin
    }
    ;
    this.parsePreloadList = function(t) {
        switch (parseInt(t.Code)) {
        case 400:
            var e = false;
            if (t.Argv.length > 11) {
                e = t.Argv[11] == "1"
            } else {
                e = false
            }
            if (e) {
                this.addTask("Graphics/Other/" + utils.madeString(tv.system.string.getVar(parseInt(t.Argv[12])), 0, t.Code))
            } else {
                this.addTask("Graphics/" + t.Argv[1])
            }
            break;
        case 100:
            if (t.Argv[3].length > 0) {
                this.addTask("Graphics/Face/" + t.Argv[3])
            }
            if (t.Argv[16]) {
                var i = t.Argv[16].split("|");
                var c = i[0].split(",");
                if (c[0] == 1) {
                    this.addTask("Graphics/UI/" + c[1])
                }
                if (i[4]) {
                    var u = i[4].split(",");
                    if (u[0] == 1) {
                        this.addTask("Graphics/UI/" + u[1])
                    }
                }
            }
            break;
        case 1010:
            this.addTask("Graphics/other/" + t.Argv[5]);
            this.addTask("Graphics/other/" + t.Argv[6]);
            break;
        case 1011:
            var f = t.Argv[0];
            var d = {};
            var m = t.Argv[9] == "1";
            var a = m ? t.Argv[10] : "";
            a = "Graphics/UI/" + a;
            var g = t.Argv[14] == "1";
            if (g) {
                for (var s = 0; s < f; ++s) {
                    if (t.Argv[17 + s * 3]) {
                        d[s] = t.Argv[17 + s * 3].split(",")[0];
                        var n = tv.data.System.Buttons[d[s]];
                        this.addTask("Graphics/Button/" + n.image1);
                        this.addTask("Graphics/Button/" + n.image2)
                    }
                }
            }
            this.addTask(a);
            break;
        case 219:
            var a = t.Argv[4] ? t.Argv[4] : "";
            if (a != "") {
                a = "Graphics/UI/" + a;
                this.addTask(a)
            }
            break;
        case 221:
            var r = tv.data.chatCharacter.GetChatCharacterByID(t.Argv[11]);
            if (r && r.facePath && r.facePath != "") {
                this.addTask("Graphics/face/" + r.facePath)
            }
            if (r && r.bgPath && r.bgPath != "") {
                this.addTask("Graphics/UI/" + r.bgPath)
            }
            if (t.Argv[3] == 2) {
                if (t.Argv[12] != "") {
                    this.addTask("Graphics/chat/" + t.Argv[12])
                }
            }
            break;
        case 406:
            if (t.Argv.length && t.Argv[1].indexOf(".oaf") > -1) {
                var a = ("Graphics/" + t.Argv[1]).toLowerCase() + "x";
                if (a.length > 0 && tv.oaf2Data.hasOwnProperty(a)) {
                    var o = tv.oaf2Data[a];
                    var h;
                    if (o.bg && o.bg.length > 0) {
                        h = convertMD5ToCDNPath(o.bg);
                        if (h && S.indexOf(h) < 0) {
                            S.push(h)
                        }
                    }
                    for (var l = 0; l < o.imageList.length; l++) {
                        h = convertMD5ToCDNPath(o.imageList[l]);
                        if (h && S.indexOf(h) < 0) {
                            S.push(h)
                        }
                    }
                }
            }
            break;
        case 204:
            for (var s = 0; s < t.Argv.length; s++) {
                var v = t.Argv[s].split(",");
                var p = new DButtonIndex(v);
                var n = tv.data.System.Buttons[p.index];
                this.addTask("Graphics/Button/" + n.image1);
                this.addTask("Graphics/Button/" + n.image2)
            }
            break;
        case 112:
            if (parseInt(t.Argv[0]) == 1) {
                this.loadFloat()
            }
            break;
        case 4062:
            var a = ("Graphics/" + t.Argv[1]).toLowerCase();
            if (a.length > 0 && tv.oaf2Data.hasOwnProperty(a)) {
                var o = tv.oaf2Data[a];
                if (o.bgpath && o.bgpath.length > 0) {
                    S.push(o.bgpath)
                }
                for (var l = 0; l < o.picList.length; l++) {
                    this.addTask("Graphics/Oafs/" + o.picList[l])
                }
            }
            break
        }
    }
    ;
    this.preLoad = function(t) {
        if (!t) {
            return false
        }
        this.bloadAssets = true;
        for (var e = 0; e < t.length; e++) {
            this.parsePreloadList(t[e])
        }
        S = this.transformUrl();
        if (S && S.length > 0 && S.length < 200) {
            if (S.length > 5) {
                sVLoadImg.show()
            }
            SAL_preload(g, S, this.checkStoryPreLoadFinish.bind(this));
            S = [];
            return true
        } else {
            tv.storyList.currentStory.isCanRun = true;
            f = true;
            S = [];
            return false
        }
    }
    ;
    this.transformUrl = function() {
        var t = [];
        for (var e = 0; e < S.length; e++) {
            var i = S[e];
            if (S[e].toLowerCase().indexOf("graphics") != -1) {
                i = fileListFato(S[e])
            }
            if (i && !SAL_checkSRCPreloaded(g, i)) {
                t.push(i)
            }
        }
        return t
    }
    ;
    this.checkStoryPreLoadFinish = function(t) {
        this.curBarValue = this.startBarValue + t * (1 - this.startBarValue);
        if (t == 1 || t == -1) {
            f = true;
            tv.storyList.currentStory.isCanRun = true
        }
    }
    ;
    this.checkPreLoadFinish = function(t) {
        this.curBarValue = this.startBarValue + t * (1 - this.startBarValue);
        if (t == 1 || t == -1) {
            f = true
        }
    }
    ;
    this.endScene = function() {
        f = false;
        this.curBarValue = 0;
        this.startBarValue = 0;
        this.bloadAssets = false;
        this.startLoad = true;
        if (this.curLoadScene && this.curLoadScene.length > 0) {
            tv.scene.init();
            this.curLoadScene = ""
        } else if (tv.scene instanceof LoadAssets) {
            tv.scene = new SStart
        }
    }
    ;
    this.getSession = function(n) {
        if (Configuration.isTT) {
            SAL_checkSession(function(t) {
                if (t) {
                    n && n();
                    tv.getFlower()
                } else {
                    var e = null;
                    var i = function t() {
                        if (e) {
                            e.dispose();
                            e = null
                        }
                        n && n()
                    };
                    var a = function t() {
                        i();
                        tv.getFlower()
                    };
                    var s = function t() {
                        i()
                    };
                    e = new SInGameConfirm("是否登录？\n不登录可能会错过重要剧情哦！","登录","取消",a,s)
                }
            })
        } else {
            n && n()
        }
    }
    ;
    this.isNeedLoad = function() {
        this.bloadAssets = false;
        if (this.curLoadScene.length > 0) {
            if (this.curLoadScene == "SCUI") {
                this.bloadAssets = true
            } else {
                if (this.otherSceneUI[this.curLoadScene] != null && this.otherSceneUI[this.curLoadScene] == false) {
                    n = this.curLoadScene;
                    this.otherSceneUI[this.curLoadScene] = true;
                    this.bloadAssets = true
                }
            }
        } else {
            if (tv.scene instanceof SGame) {} else if (tv.scene instanceof LoadAssets) {
                this.bloadAssets = true
            }
        }
        if (!this.bloadAssets) {
            this.curLoadScene = ""
        }
        return this.bloadAssets
    }
    ;
    this.childPicLoad = function(t) {
        if (t == null) {
            return
        }
        for (var e = 0; e < t.events.length; e++) {
            var i = t.events[e];
            if (i.Code == 400) {
                var a = false;
                if (i.Argv.length > 11) {
                    a = i.Argv[11] == "1"
                } else {
                    a = false
                }
                if (a) {
                    this.addTask("Graphics/Other/" + utils.madeString(tv.system.string.getVar(parseInt(i.Argv[12])), 0, i.Code))
                } else {
                    this.addTask("Graphics/" + i.Argv[1])
                }
            }
            if (i.Code == 251) {
                var s = tv.data.getStory(i.Argv[0]);
                if (!s) {
                    this.childPicLoad(s)
                } else {
                    break
                }
            }
            if (i.Code == 100) {
                if (i.Argv[3].length > 0) {
                    this.addTask("Graphics/Face/" + i.Argv[3])
                }
                if (i.Argv[16]) {
                    var n = i.Argv[16].split("|");
                    var r = n[0].split(",");
                    if (r[0] == 1) {
                        this.addTask("Graphics/UI/" + r[1])
                    }
                }
            }
        }
    }
    ;
    this.scuiCallback = null;
    this.sBtnList = [];
    this.sImageList = [];
    this.SCUILoad = function(t) {
        var i = this;
        this.SCUILoadTask(t);
        S = this.transformUrl();
        f = false;
        if (S.length > 5 && this.scuiCallback == null) {
            sVLoadImg.show()
        }
        var e = function t(e) {
            if (e == 1) {
                i.scuiCallback && i.scuiCallback();
                i.scuiCallback = null
            }
        };
        SAL_preload(g, S, this.scuiCallback ? e : this.checkPreLoadFinish.bind(this), tv.data.System.MenuIndex == tv.CUIFromIndex ? 1 : 3);
        S = []
    }
    ;
    this.SCUILoadTask = function(c) {
        var t = tv.data.System.Cuis[tv.CUIFromIndex];
        if (!t) {
            return
        }
        if (!t.isLoaded) {
            t.loadEventData()
        }
        this.scuiCallback = c;
        var e = [];
        var i = [];
        var u = [t.afterEvent, t.afterEvent];
        for (var a = 0; a < t.controls.length; ++a) {
            var s = t.controls[a];
            switch (s.type) {
            case 0:
                {
                    var n = s.isUserIndex ? tv.system.vars.getVar(s.index) - 1 : s.index;
                    if (n == -1) {
                        n = tv.data.System.Buttons.length - 1
                    }
                    if (s.isUserIndex) {
                        e.push(s.index)
                    }
                    var r = tv.data.System.Buttons[n];
                    if (r) {
                        this.addTask("Graphics/Button/" + r.image1);
                        this.addTask("Graphics/Button/" + r.image2)
                    }
                    break
                }
            case 2:
                {
                    if (s.isUserIndex && s.image1.length > 0) {
                        var o = utils.madeString(s.image1);
                        if (o) {
                            this.addTask("Graphics/Other/" + o)
                        }
                    }
                    break
                }
            case 3:
                {
                    var h = s.isUserString ? tv.system.string.getVar(s.stringIndex) : s.image1;
                    if (h != "") {
                        var l = "Graphics/Other/" + h;
                        l = l.replace("//", "/");
                        l = l.replace("\\\\", "/");
                        l = l.replace("\\", "/");
                        this.addTask(l)
                    }
                    if (s.isUserString) {
                        i.push(s.stringIndex)
                    }
                    break
                }
            case 4:
                {
                    this.addTask("Graphics/Other/" + s.image1);
                    this.addTask("Graphics/Other/" + s.image2);
                    break
                }
            }
        }
        this.sBtnList = e;
        this.sImageList = i
    }
    ;
    this.SCUINeedLoadTask = function(t) {
        var e = S;
        this.SCUILoadTask(t);
        S = this.transformUrl();
        var i = S.length > 0;
        S = e;
        return i
    }
    ;
    this.SCUIBtnEventLoad = function(t, c) {
        var e = [];
        var i = [];
        var u = this.sImageList;
        var f = this.sBtnList;
        for (var a = 0; a < t.length; a++) {
            var s = t[a];
            if (s.Code == 207) {
                for (var n = 0; n < f.length; n++) {
                    if (s.Argv[0] == f[n] + "") {
                        if (e.indexOf(s.Argv[3]) == -1) {
                            e.push(s.Argv[3])
                        }
                    }
                }
            }
            if (s.Code == 215) {
                for (var r = 0; r < u.length; r++) {
                    if (s.Argv[0] == u[r] + "") {
                        if (i.indexOf(s.Argv[1]) == -1) {
                            i.push(s.Argv[1])
                        }
                    }
                }
            }
        }
        for (var o = 0; o < e.length; o++) {
            var h = tv.data.System.Buttons[e[o]];
            if (h) {
                this.addTask("Graphics/Button/" + h.image1);
                this.addTask("Graphics/Button/" + h.image2)
            }
        }
        for (var l = 0; l < i.length; l++) {
            this.addTask(utils.madeString(i[l]))
        }
        var d = function t(e) {
            if (e == 1 || e == -1) {
                c && c()
            }
        };
        S = this.transformUrl();
        SAL_preload(g, S, d, tv.data.System.MenuIndex == tv.CUIFromIndex ? 1 : 3);
        S = []
    }
    ;
    this.SCUIEventPicLoad = function(t, c, u) {
        var e = [];
        var i = [];
        for (var a = 0; a < t.length; a++) {
            for (var s = 0; s < t[a].length; s++) {
                var n = t[a][s];
                if (n.Code == 215) {
                    for (var r = 0; r < u.length; r++) {
                        if (n.Argv[0] == u[r] + "") {
                            if (i.indexOf(n.Argv[1]) == -1) {
                                i.push(n.Argv[1])
                            }
                        }
                    }
                }
                if (n.Code == 207) {
                    for (var o = 0; o < c.length; o++) {
                        if (n.Argv[0] == c[o] + "") {
                            if (e.indexOf(n.Argv[3]) == -1) {
                                e.push(n.Argv[3])
                            }
                        }
                    }
                }
            }
        }
        for (var f = 0; f < e.length; f++) {
            var d = tv.data.System.Buttons[e[f]];
            this.addTask("Graphics/Button/" + d.image1);
            this.addTask("Graphics/Button/" + d.image2)
        }
        var m = [];
        for (var h = 0; h < i.length; h++) {
            var g = i[h].indexOf("v[");
            if (g != -1) {
                var v = i[h].substring(0, g - 1);
                for (var l in fileList) {
                    if (fileList[l].fileName.indexOf(v) != -1) {
                        if (m.indexOf(fileList[l].fileName) == -1) {
                            m.push(fileList[l].fileName);
                            this.addTask(fileList[l].fileName)
                        }
                    }
                }
            } else {
                this.addTask(i[h])
            }
        }
    }
    ;
    this.otherUILoad = function() {
        var t = void 0
          , e = void 0
          , i = void 0;
        var a = new Array;
        var s = true;
        switch (n) {
        case "SMenu":
            t = tv.data.System.GameMenu;
            if (!t.backImage.IsNil()) {
                this.addTask("Graphics/UI/" + t.backImage)
            }
            a = t.buttons;
            break;
        case "SReplay":
            t = tv.data.System.Replay;
            if (!t.backimage.IsNil()) {
                this.addTask("Graphics/UI/" + t.backimage)
            }
            a.push(t.closeButton);
            break;
        case "SSavefile":
            t = tv.data.System.SaveData;
            this.addTask("Graphics/Background/" + tv.data.System.Title.titleImagle);
            if (!t.backimage.IsNil()) {
                this.addTask("Graphics/UI/" + t.backimage)
            }
            a.push(t.closeButton);
            a.push(t.backButton);
            break;
        case "SSystem":
            t = tv.data.System.Setting;
            if (!t.backimage.IsNil()) {
                this.addTask("Graphics/UI/" + t.backimage)
            }
            if (t.ShowBGM || t.ShowSE || t.ShowVoice) {
                if (!t.barNone.IsNil()) {
                    this.addTask("Graphics/UI/" + t.barNone)
                }
                if (!t.barMove.IsNil()) {
                    this.addTask("Graphics/UI/" + t.barMove)
                }
            }
            a.push(t.closeButton);
            a.push(t.TitleButton);
            if (t.SHowAuto) {
                a.push(t.AutoOn);
                a.push(t.AutoOff)
            }
            if (t.ShowFull) {
                a.push(t.fullButton);
                a.push(t.winButton)
            }
            break;
        case "SBGM":
            t = tv.data.System.BGM;
            if (!t.backimage.IsNil()) {
                this.addTask("Graphics/UI/" + t.backimage)
            }
            a.push(t.closeButton);
            a.push(t.selectButton);
            break;
        case "SCG":
            t = tv.data.System.CG;
            if (!t.backimage.IsNil()) {
                this.addTask("Graphics/UI/" + t.backimage)
            }
            a.push(t.closeButton);
            a.push(t.backButton);
            break;
        case "STitle":
            t = tv.data.System.Title;
            if (!t.titleImagle.IsNil()) {
                this.addTask("Graphics/Background/" + t.titleImagle)
            }
            for (i = 0; i < t.buttons.length; ++i) {
                a.push(t.buttons[i])
            }
            break;
        case "SFloat":
            this.loadFloat();
            s = false;
            break;
        case "NewMall":
            this.loadNewMall();
            break;
        case "SFlowerAd":
            this.loadFlowerAd();
            break;
        case "Mall":
            this.loadMall();
            break;
        case "TimeMall":
            this.loadTimeMall();
            break;
        case "Welfare":
            this.loadWelfare();
            break;
        case "Name":
            this.loadName();
            break
        }
        for (i = 0; i < a.length; i++) {
            e = tv.data.System.Buttons[a[i].index];
            if (!e.image1.IsNil()) {
                this.addTask("Graphics/Button/" + e.image1)
            }
            if (!e.image2.IsNil()) {
                this.addTask("Graphics/Button/" + e.image2)
            }
        }
        f = false;
        n = "";
        if (S.length > 0) {
            sVLoadImg.show()
        }
        S = this.transformUrl();
        SAL_preload(g, S, this.checkPreLoadFinish.bind(this), s ? 1 : 4);
        S = []
    }
    ;
    this.loadFloat = function() {
        var n = this;
        var t = tv.data.DFloatButton;
        for (var e = 0; e < t.length; e++) {
            for (var i = 0; i < t[e].DFloatItem.length; i++) {
                var r = t[e].DFloatItem[i];
                switch (r.type) {
                case 0:
                    {
                        var a = r.isUserString ? tv.system.string.getVar(r.indexOfStr) : r.image;
                        var s = "Graphics/Other/" + a;
                        this.addTask(s);
                        break
                    }
                case 3:
                    {
                        var o = r.image;
                        var h = r.imageForBar;
                        var l = "Graphics/Other/" + o;
                        var c = "Graphics/Other/" + h;
                        this.addTask(l);
                        this.addTask(c);
                        break
                    }
                case 4:
                    {
                        var u = function() {
                            var i = r.image.split(":")[0];
                            var t = r.imageForBar;
                            var e = "Graphics/Other/" + t;
                            n.addTask(e);
                            if (i) {
                                var a = ("Graphics/oafs/" + i).toLowerCase();
                                var s = fileListFato(("Graphics/oafs/" + i).toLowerCase());
                                if (s && tv.oaf2Data[a] == undefined) {
                                    tv.oaf2Data[a] = 0;
                                    new ORead(s,function(t) {
                                        var e = new DAnimation(t);
                                        if (e.load) {
                                            tv.oaf2Data[("Graphics/oafs/" + i).toLowerCase()] = e
                                        }
                                    }
                                    )
                                }
                            }
                            return "break"
                        }();
                        if (u === "break")
                            break
                    }
                }
            }
        }
    }
    ;
    this.loadNewMall = function() {
        var i = tv.gameNewMall;
        if (!i) {
            return
        }
        S.push(autoSaveMaskPath);
        if (!i.backPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.backPic)
        }
        if (!i.viewItemPortPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.viewItemPortPic)
        }
        if (!i.halfPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.halfPic)
        }
        if (!i.flowerPic.IsNil()) {
            this.addTask(i.flowerPicUrl)
        }
        if (i.isOaf && i.oafInfo && i.oafInfo.oafName) {
            var c = fileListFato(("Graphics/oafs/" + i.oafInfo.oafName + ".oaf2").toLowerCase());
            if (c) {
                new ORead(c,function(t) {
                    var e = new DAnimation(t);
                    if (e.load) {
                        tv.oaf2Data[("Graphics/oafs/" + i.oafInfo.oafName + ".oaf2").toLowerCase()] = e
                    }
                }
                )
            }
        }
        var t = tv.data.System.Buttons[i.closeBtn.index];
        if (t && !t.image1.IsNil()) {
            this.addTask("Graphics/Button/" + t.image1)
        }
        if (t && !t.image2.IsNil()) {
            this.addTask("Graphics/Button/" + t.image2)
        }
        var e = tv.data.System.Buttons[i.getAllBtn.index];
        if (e && !e.image1.IsNil()) {
            this.addTask("Graphics/Button/" + e.image1)
        }
        if (e && !e.image2.IsNil()) {
            this.addTask("Graphics/Button/" + e.image2)
        }
        var u = i.goodList.goodCount;
        for (var f = 0; f < u; f++) {
            var a = i.goodList.goods[f];
            if (!a.itemViewBg.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemViewBg)
            }
            if (!a.itemPic.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemPic)
            }
            if (!a.itemPicBg.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemPicBg)
            }
            if (!a.itemEnablePic.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemEnablePic)
            }
            if (!a.itemDisabledPic.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemDisabledPic)
            }
            var s = tv.data.System.Buttons[a.itemCommityBtn.index];
            if (s && !s.image1.IsNil()) {
                this.addTask("Graphics/Button/" + s.image1)
            }
            if (s && !s.image2.IsNil()) {
                this.addTask("Graphics/Button/" + s.image2)
            }
        }
        var n = i.goodDetailPage;
        if (!n.bg.IsNil()) {
            this.addTask("Graphics/UI/" + n.bg)
        }
        if (!n.itemPicBg.IsNil()) {
            this.addTask("Graphics/UI/" + n.itemPicBg)
        }
        if (!n.varIndexPic.IsNil()) {
            this.addTask("Graphics/UI/" + n.varIndexPic)
        }
        var r = tv.data.System.Buttons[n.addBtn.index];
        if (r && !r.image1.IsNil()) {
            this.addTask("Graphics/Button/" + r.image1);
            this.addTask("Graphics/Button/" + r.image2)
        }
        if (r && !r.image2.IsNil()) {
            this.addTask("Graphics/Button/" + r.image2)
        }
        var o = tv.data.System.Buttons[n.minusBtn.index];
        if (o && !o.image1.IsNil()) {
            this.addTask("Graphics/Button/" + o.image1)
        }
        if (o && !o.image2.IsNil()) {
            this.addTask("Graphics/Button/" + o.image2)
        }
        var h = tv.data.System.Buttons[n.confirmBtn.index];
        if (!h.image1.IsNil()) {
            this.addTask("Graphics/Button/" + h.image1)
        }
        if (!h.image2.IsNil()) {
            this.addTask("Graphics/Button/" + h.image2)
        }
        var l = tv.data.System.Buttons[n.cancaleBtn.index];
        if (!l.image1.IsNil()) {
            this.addTask("Graphics/Button/" + l.image1)
        }
        if (!l.image2.IsNil()) {
            this.addTask("Graphics/Button/" + l.image2)
        }
    }
    ;
    this.loadTimeMall = function() {
        var i = tv.gameTimeMall;
        if (!i) {
            return
        }
        S.push(autoSaveMaskPath);
        if (!i.backPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.backPic)
        }
        if (!i.halfPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.halfPic)
        }
        if (!i.flowerPic.IsNil()) {
            this.addTask(i.flowerPicUrl)
        }
        if (i.isOaf && i.oafInfo && i.oafInfo.oafName) {
            var c = fileListFato(("Graphics/oafs/" + i.oafInfo.oafName + ".oaf2").toLowerCase());
            if (c) {
                new ORead(c,function(t) {
                    var e = new DAnimation(t);
                    if (e.load) {
                        tv.oaf2Data[("Graphics/oafs/" + i.oafInfo.oafName + ".oaf2").toLowerCase()] = e
                    }
                }
                )
            }
        }
        var t = tv.data.System.Buttons[i.closeBtn.index];
        if (t && !t.image1.IsNil()) {
            this.addTask("Graphics/Button/" + t.image1)
        }
        if (t && !t.image2.IsNil()) {
            this.addTask("Graphics/Button/" + t.image2)
        }
        var e = tv.data.System.Buttons[i.tipBtn.index];
        if (e && !e.image1.IsNil()) {
            this.addTask("Graphics/Button/" + e.image1)
        }
        if (e && !e.image2.IsNil()) {
            this.addTask("Graphics/Button/" + e.image2)
        }
        var u = i.goodList.goodCount;
        for (var f = 0; f < u; f++) {
            var a = i.goodList.goods[f];
            if (!a.itemViewBg.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemViewBg)
            }
            if (!a.itemPic.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemPic)
            }
            if (!a.itemPicBg.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemPicBg)
            }
            if (!a.itemEnablePic.IsNil()) {
                this.addTask("Graphics/UI/" + a.itemEnablePic)
            }
            var s = tv.data.System.Buttons[a.itemCommityBtn.index];
            if (s && !s.image1.IsNil()) {
                this.addTask("Graphics/Button/" + s.image1)
            }
            if (s && !s.image2.IsNil()) {
                this.addTask("Graphics/Button/" + s.image2)
            }
        }
        var n = i.goodDetailPage;
        if (!n.bg.IsNil()) {
            this.addTask("Graphics/UI/" + n.bg)
        }
        if (!n.itemPicBg.IsNil()) {
            this.addTask("Graphics/UI/" + n.itemPicBg)
        }
        if (!n.varIndexPic.IsNil()) {
            this.addTask("Graphics/UI/" + n.varIndexPic)
        }
        var r = tv.data.System.Buttons[n.addBtn.index];
        if (r && !r.image1.IsNil()) {
            this.addTask("Graphics/Button/" + r.image1)
        }
        if (r && !r.image2.IsNil()) {
            this.addTask("Graphics/Button/" + r.image2)
        }
        var o = tv.data.System.Buttons[n.minusBtn.index];
        if (o && !o.image1.IsNil()) {
            this.addTask("Graphics/Button/" + o.image1)
        }
        if (o && !o.image2.IsNil()) {
            this.addTask("Graphics/Button/" + o.image2)
        }
        var h = tv.data.System.Buttons[n.confirmBtn.index];
        if (!h.image1.IsNil()) {
            this.addTask("Graphics/Button/" + h.image1)
        }
        if (!h.image2.IsNil()) {
            this.addTask("Graphics/Button/" + h.image2)
        }
        var l = tv.data.System.Buttons[n.cancaleBtn.index];
        if (!l.image1.IsNil()) {
            this.addTask("Graphics/Button/" + l.image1)
        }
        if (!l.image2.IsNil()) {
            this.addTask("Graphics/Button/" + l.image2)
        }
    }
    ;
    this.loadWelfare = function() {
        var i = tv.gameWelfateBin;
        if (!i) {
            return
        }
        S.push(autoSaveMaskPath);
        if (!i.backPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.backPic)
        }
        if (!i.halfPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.halfPic)
        }
        if (!i.flowerPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.flowerPic)
        }
        if (i.isOaf && i.oafInfo && i.oafInfo.oafName) {
            var t = fileListFato(("Graphics/oafs/" + i.oafInfo.oafName + ".oaf2").toLowerCase());
            if (t) {
                new ORead(t,function(t) {
                    var e = new DAnimation(t);
                    if (e.load) {
                        tv.oaf2Data[("Graphics/oafs/" + i.oafInfo.oafName + ".oaf2").toLowerCase()] = e
                    }
                }
                )
            }
        }
        if (!i.itemBg.IsNil()) {
            this.addTask("Graphics/UI/" + i.itemBg)
        }
        if (!i.canGetItemIcon.IsNil()) {
            this.addTask("Graphics/UI/" + i.canGetItemIcon)
        }
        if (!i.getItemIconPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.getItemIconPic)
        }
        if (!i.getItemPic.IsNil()) {
            this.addTask("Graphics/UI/" + i.getItemPic)
        }
        var e = tv.data.System.Buttons[i.singBtn.index];
        if (e && !e.image1.IsNil()) {
            this.addTask("Graphics/Button/" + e.image1)
        }
        if (e && !e.image2.IsNil()) {
            this.addTask("Graphics/Button/" + e.image2)
        }
        var a = tv.data.System.Buttons[i.closeBtn.index];
        if (a && !a.image1.IsNil()) {
            this.addTask("Graphics/Button/" + a.image1)
        }
        if (a && !a.image2.IsNil()) {
            this.addTask("Graphics/Button/" + a.image2)
        }
        var s = i.welfareLength;
        for (var n = 0; n < s; n++) {
            var r = i.welfareDetailList[n];
            if (!r.detailBg.IsNil()) {
                this.addTask("Graphics/UI/" + r.detailBg)
            }
            for (var o = 0; o < r.itemNumber; o++) {
                var h = r.goodList[o];
                if (!h.itemPic.IsNil()) {
                    this.addTask("Graphics/UI/" + h.itemPic)
                }
            }
        }
    }
    ;
    this.loadName = function() {
        var t = tv.gameNameBin;
        if (!t) {
            return
        }
        S.push(autoSaveMaskPath);
        if (!t.backPic.IsNil()) {
            this.addTask("Graphics/UI/" + t.backPic)
        }
        this.addTaskButtonImage(t.textBtn.index);
        this.addTaskButtonImage(t.confirmBtn.index);
        this.addTaskButtonImage(t.randomBtn.index);
        this.addTaskButtonImage(t.upBtn.index);
        this.addTaskButtonImage(t.netxBtn.index);
        if (!t.inputBg.IsNil()) {
            this.addTask("Graphics/UI/" + t.inputBg)
        }
        if (!t.inputFocusBg.IsNil()) {
            this.addTask("Graphics/UI/" + t.inputFocusBg)
        }
        if (t.deleteBtn) {
            this.addTaskButtonImage(t.deleteBtn.index)
        }
    }
    ;
    this.addTaskButtonImage = function(t) {
        var e = tv.data.System.Buttons[t];
        if (e && !e.image1.IsNil()) {
            this.addTask("Graphics/Button/" + e.image1)
        }
        if (e && !e.image2.IsNil()) {
            this.addTask("Graphics/Button/" + e.image2)
        }
    }
    ;
    this.loadFlowerAd = function() {
        S.push(rewardBtnAlreadyGot);
        S.push(rewardBtnCanBeGet);
        S.push(rewardBtnCannotBeGet);
        S.push(rewardFlower1);
        S.push(rewardFlower2);
        S.push(rewardFlower3);
        S.push(rewardItemBGAlreadyGot);
        S.push(rewardItemBGCanBeGet);
        S.push(rewardClose)
    }
    ;
    this.loadMall = function() {
        var t = tv.gameMallBin;
        if (t == null) {
            return
        }
        S.push(autoSaveMaskPath);
        if (!t.bgPic.IsNil()) {
            this.addTask("Graphics/UI/" + t.bgPic)
        }
        if (!t.rightPic.IsNil()) {
            this.addTask("Graphics/Half/" + t.rightPic)
        }
        if (!t.flowerPic.IsNil()) {
            this.addTask(t.flowerPicUrl)
        }
        var e = tv.data.System.Buttons[t.payBtn.index];
        if (!e.image1.IsNil()) {
            this.addTask("Graphics/Button/" + e.image1)
        }
        if (!e.image2.IsNil()) {
            this.addTask("Graphics/Button/" + e.image2)
        }
        var i = tv.data.System.Buttons[t.rewardAuthorBtn.index];
        if (!i.image1.IsNil()) {
            this.addTask("Graphics/Button/" + i.image1)
        }
        if (!i.image2.IsNil()) {
            this.addTask("Graphics/Button/" + i.image2)
        }
        var a = tv.data.System.Buttons[t.closeBtn.index];
        if (!a.image1.IsNil()) {
            this.addTask("Graphics/Button/" + a.image1)
        }
        if (!a.image2.IsNil()) {
            this.addTask("Graphics/Button/" + a.image2)
        }
        var s = t.itemNumber;
        for (var n = 0; n < s; n++) {
            var r = t.items[n];
            if (!r.itemBgPic.IsNil()) {
                this.addTask("Graphics/UI/" + r.itemBgPic.name)
            }
            if (!r.itemPicBG.IsNil()) {
                this.addTask("Graphics/UI/" + r.itemPicBG)
            }
            if (!r.itemPic.IsNil()) {
                this.addTask("Graphics/UI/" + r.itemPic)
            }
            if (!r.itemEnable.IsNil()) {
                this.addTask("Graphics/UI/" + r.itemEnablePic)
            }
            if (!r.itemDisabled.IsNil()) {
                this.addTask("Graphics/UI/" + r.itemDisabledPic)
            }
            var o = tv.data.System.Buttons[r.itemBuyBtn.index];
            if (!o.image1.IsNil()) {
                this.addTask("Graphics/Button/" + o.image1)
            }
            if (!o.image2.IsNil()) {
                this.addTask("Graphics/Button/" + o.image2)
            }
        }
    }
    ;
    this.preLoadCanvasImg = function() {
        var t = new Array;
        var e = void 0
          , i = void 0
          , a = void 0;
        e = tv.data.System.MessageBox;
        a = fileListFato("Graphics/UI/" + e.Talk.backimage);
        s(t, a);
        a = fileListFato("Graphics/UI/" + e.Name.backimage);
        s(t, a);
        if (e.faceInMessageBox()) {
            a = fileListFato("Graphics/UI/" + e.Talk.FaceBorderImage);
            s(t, a)
        }
        if (e.ChoiceButtonIndex >= 0 && e.ChoiceButtonIndex < tv.data.System.Buttons.length) {
            i = tv.data.System.Buttons[e.ChoiceButtonIndex];
            a = fileListFato("Graphics/Button/" + i.image1);
            s(t, a);
            a = fileListFato("Graphics/Button/" + i.image2);
            s(t, a)
        }
        a = fileListFato("graphics/other/ad/bg.png");
        s(t, a);
        a = fileListFato("graphics/other/ad/icon.png");
        s(t, a);
        a = fileListFato("graphics/other/ad/cancel.png");
        s(t, a);
        a = fileListFato("graphics/other/ad/confirm.png");
        s(t, a);
        a = fileListFato("graphics/other/ad/play.png");
        s(t, a);
        if (clientType == 1) {
            s(t, wmMallCloseMenu);
            s(t, wmMallSwitchWZMenu);
            s(t, wmMallSwitchXHMenu)
        }
        SAL_preload(g, t, function(t) {
            if (t > 0) {
                this.curBarValue = this.startBarValue + t * (this.endBarValue - this.startBarValue)
            }
            if (t == 1) {
                this.currentState = d.preLoadCanvasCommon
            }
        }
        .bind(this), 1)
    }
    ;
    this.preLoadCanvasCommonImg = function() {
        var t = new Array;
        t.push(chatHeadBaseMap);
        if (GloableData.getInstance().isMobile() || !GloableData.getInstance().isScreenHorizontal() || isM) {
            logoPath = logoPathAndroid;
            logoPathFocus = logoPathFocusAndroid;
            logoPathLimit = logoPathFocusAndroidLimit;
            menuPath = menuPathAndroid;
            menuPathFocus = menuPathFocusAndroid;
            if (gGameWidth >= 1280) {
                sysmenuOpenMenu = M_IMG_SERVER_URL_V2 + "newSysmenu/open_menu_2.png";
                sysmenuCloseMenu = M_IMG_SERVER_URL_V2 + "newSysmenu/close_menu_2.png";
                mobileMenuPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_menu_2.png";
                mobileMenuPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/game_menu_pitch_2.png";
                mobileLogoPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu_2.png";
                mobileLogoPathLimit = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu_limit2.png";
                mobileLogoPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_game_menu_pitch_2.png";
                mobileCollectPath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_collect_2.png";
                mobileCollectPathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_collect_pitch_2.png";
                mobileSharePath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_share_2.png";
                mobileSharePathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_share_pitch_2.png";
                mobileEvaluatePath = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_evaluate_2.png";
                mobileEvaluatePathFocus = M_IMG_SERVER_URL_V2 + "newSysmenu/mobile_evaluate_pitch_2.png"
            }
            if (gGameX) {
                t.push(sysmenuOpenMenu, sysmenuCloseMenu);
                t.push(mobileMenuPath, mobileMenuPathFocus);
                t.push(mobileLogoPath, mobileLogoPathFocus, mobileLogoPathLimit);
                t.push(mobileCollectPath, mobileCollectPathFocus);
                t.push(mobileSharePath, mobileSharePathFocus);
                t.push(mobileEvaluatePath, mobileEvaluatePathFocus)
            }
        }
        t.push(menuPath);
        t.push(menuPathFocus);
        t.push(logoPath);
        t.push(logoPathFocus);
        t.push(logoPathLimit);
        t.push(autoSaveMaskPath);
        t.push(autoSaveBgPath);
        t.push(autoSaveJxPath);
        t.push(autoSaveKsPath);
        t.push(localSave);
        t.push(localSaveFocus);
        t.push(cloudSave);
        t.push(cloudSaveFocus);
        t.push(flowerForSave);
        t.push(commonMessageBg);
        t.push(commonMessageLine);
        t.push(commonMessageIcon);
        t.push(commonMessageLeftBtn);
        t.push(commonMessageRightBtn);
        t.push(commonMessageAloneBtn);
        t.push(commonMessageSuccenBg);
        if (!Configuration.isH5) {
            t.push(shareImage);
            t.push(shareTopTip);
            t.push(shareSure);
            t.push(shareClose);
            t.push(shareIconURL1)
        }
        t.push(adCountDownBG);
        t.push(investigateReplace[gGameWidth]);
        t.push(speedUpIcon0, speedUpIcon1, speedUpIcon2, speedUpIcon3, speedUpIcon4, speedUpIcon5, speedUpIcon6, speedUpIcon7, speedUpIcon8);
        t.push(ROTATE_LOADING_URL);
        t.push(autoSaveMaskPath);
        t.push(addictionPreventionTitleBgPath);
        t.push(addictionPreventionContentBgPath);
        t.push(hpErrorIcon);
        t.push(SHOP_LOCK_BG);
        t.push(SHOP_LOCK_CLOSE);
        t.push(LOGO_URL);
        if (Configuration.isH5 && !isM && !isIE && GloableData.getInstance().isMobile()) {
            t.push(logoCGURL)
        }
        t.push(timeMallTiptIcon);
        t.push(timeMallTipBg);
        t.push(timeMallMark);
        t.push(timeMallMarkBig);
        t.push(TRAIL_READING_BUTTON_W_FIRST);
        t.push(TRAIL_READING_BUTTON_W_LAST);
        t.push(TRAIL_READING_BUTTON_T_FIRST);
        t.push(TRAIL_READING_BUTTON_T_LAST);
        t.push(TRAIL_READING_BUUTON_CANCEL);
        t.push(TRAIL_READING_BUUTON_QUESTION_MARK);
        SAL_preload(g, t, function(t) {
            this.curBarValue = this.startBarValue + t * (this.endBarValue - this.startBarValue);
            if (t == 1) {
                sVLoadImg = new SVLoad;
                tv.canvas = new CMain;
                this.currentState = d.getSession;
                addEvent()
            }
        }
        .bind(this), 1, true)
    }
    ;
    this.addTask = function(t) {
        if (!t || t.substring(t.length - 4) == ".mp4") {
            return
        }
        if (t && !S.contains(t)) {
            S.push(t)
        }
    }
    ;

    function r(t, e) {
        this.fileName = t.readString().toLowerCase().replace(/\/\/+/g, "/");
        this.fileSize = t.readInt32();
        this.md5 = t.readString();
        if (e == 1 && quality == 31) {
            this.info = t.readString();
            this.obj = {};
            this.initSize = function() {
                if (this.info == 0) {
                    this.obj.w = -1;
                    this.obj.h = -1
                } else {
                    var t = this.info.split(",")[1];
                    var e = t.split("x");
                    this.obj.w = e[0];
                    this.obj.h = e[1]
                }
            }
        }
        this.url = function() {
            if (investigateImageList.length > 0) {
                if (investigateImageList.indexOf(this.md5) > -1) {
                    var t = investigateReplace[gGameWidth] ? investigateReplace[gGameWidth] : "";
                    return t
                }
            }
            return convertMD5ToCDNPath(this.md5)
        }
    }

    function o(t, e) {
        this.fileName = t[0].toLowerCase().replace(/\/\/+/g, "/");
        this.fileSize = t[1];
        this.md5 = t[2];
        if (e == 1 && quality == 31) {
            this.info = t[3] ? t[3] : "";
            this.obj = {
                w: -1,
                h: -1
            }
        }
        this.initSize = function() {
            if (this.info.length <= 0) {
                this.obj.w = -1;
                this.obj.h = -1
            } else {
                var t = this.info.split(",")[1];
                var e = t.split("x");
                this.obj.w = e[0];
                this.obj.h = e[1]
            }
        }
        ;
        this.url = function() {
            if (investigateImageList.length > 0) {
                if (investigateImageList.indexOf(this.md5) > -1) {
                    var t = investigateReplace[gGameWidth] ? investigateReplace[gGameWidth] : "";
                    return t
                }
            }
            return convertMD5ToCDNPath(this.md5)
        }
    }
    this.customPreload = function(t, e) {
        sVLoadImg.show();
        SAL_preload(g, t, function(t) {
            sVLoadImg.updateProcess(t);
            if (t == 1) {
                e && e()
            }
        }, 1, true)
    }
    ;
    this.dispose = function() {
        S = null;
        this.otherSceneUI = null;
        d = null
    }
    ;

    function s(t, e) {
        if (t && e) {
            t.push(e)
        }
    }
    this.popupVersionWarning = function() {
        var c = 360;
        var t = 260;
        var u = [10, 10, 52, 10];
        var f = -52;
        var d = -20;
        var m = 145;
        var v = 46;
        var e = SALContainer(gGameWidth, gGameHeight);
        SAL_setElementIndex(g, e, 11e4);
        SAL_setPosition(e, gGameX, 0);
        var i = SALSprite(autoSaveMaskPath);
        SAL_addElement(e, i);
        SAL_setElementBlockTouch(i, true);
        SAL_addTouchDown(i, function() {});
        SAL_addTouchUp(i, function() {});
        SAL_addTouchMove(i, function() {});
        SAL_addClick(i, function() {});
        SAL_setElementSize(i, gGameWidth, gGameHeight);
        var a = SALSprite(autoSaveBgPath);
        SAL_addElement(e, a);
        SAL_ninePartDivide(a, u, c, t);
        SAL_setPosition(a, (gGameWidth - c) / 2, (gGameHeight - t) / 2);
        var s = gGameHeight / 2 + f;
        var n = SALText("您的APP版本过低，可能会导致无法");
        SAL_addElement(e, n);
        var r = SAL_getTextSize(n);
        SAL_setPosition(n, (gGameWidth - r[0]) / 2, s);
        SAL_setTextColor(n, SALColor(0, 0, 0, 255));
        s += Math.round(r[1] * 1.2);
        var o = SALText("在线看，为避免影响正常体验，");
        SAL_addElement(e, o);
        r = SAL_getTextSize(o);
        SAL_setPosition(o, (gGameWidth - r[0]) / 2, s);
        SAL_setTextColor(o, SALColor(0, 0, 0, 255));
        s += Math.round(r[1] * 1.2);
        var h = SALText("请更新APP后再试~");
        SAL_addElement(e, h);
        r = SAL_getTextSize(h);
        SAL_setPosition(h, (gGameWidth - r[0]) / 2, s);
        SAL_setTextColor(h, SALColor(0, 0, 0, 255));
        var l = SALButton(autoSaveJxPath, autoSaveJxPath, "好的");
        SAL_addElement(e, l);
        SAL_setPosition(l, (gGameWidth - m) / 2, (gGameHeight + t) / 2 - v + d);
        SAL_setTextFontSize(l, 18);
        SAL_setTextColor(l, SALColor(255, 255, 255, 255));
        SAL_addClick(l, function() {
            SAL_destroyElement(e)
        })
    }
    ;
    this.checkADStatus = function() {
        var e = this;
        var t = 0;
        if (isM) {
            t = 4
        } else if (GloableData.getInstance().isIos()) {
            t = 1
        } else if (GloableData.getInstance().isMobile()) {
            t = 2
        }
        var i = webConfig.GAT_AD_List + "?plat=" + t + (gGameWidth > gGameHeight ? "" : "&vertical=1") + "&gindex=" + gIndex;
        serverAjax.sendGetAjaxJSON(i, function(t) {
            e.setSplashProcess(t)
        }, function() {
            e.setSplashProcess(null)
        })
    }
    ;
    this.checkBlockInfo = function() {
        var i = function() {
            this.currentState = d.getGameInfo
        }
        .bind(this);
        serverAjax.sendGetAjaxJSON(webConfig.GET_ENGINE_BLOCK_SWITCH, function(t) {
            if (t && t.data) {
                var e = t.data;
                isNeedPreventEnter = e && e.status ? e.status : false
            }
            i()
        }, function() {
            i()
        })
    }
    ;
    this.getGameInfo = function() {
        serverAjax.sendGetAjaxJSON(webConfig.GAME_GET_GAME_INFO + "?gindex=" + gIndex, function(t) {
            if (t.status == 1) {
                first_pub_time = t.data.game.first_pub_time
            }
        });
        this.currentState = d.preLoadRes
    }
    ;
    this.getGameAllStutas = function() {
        var t = this;
        this.getLimitFreeStatus(function() {
            t.currentState = d.getMapBin
        })
    }
    ;
    this.getLimitFreeStatus = function(e) {
        if (clientType != 0) {
            e && e();
            return
        }
        var t = webConfig.GET_LIMIT_FREE_STATUS;
        if (GloableData.getInstance().isMobile()) {
            t = webConfig.GET_APP_LIMIT_FREE_STATUS
        }
        var i = {
            gindex: gIndex,
            token: GloableData.getInstance().userData.token
        };
        serverAjax.sendGetAjaxJSONPForM(t, function(t) {
            if (t.status == 1) {
                GloableData.getInstance().isFreeLimitStatus = t.data.status
            }
            e && e()
        }, function() {
            e && e()
        }, i)
    }
    ;
    this.preLoadRes = function() {
        var e = this;
        var t = [];
        t.push(addictionPreventionContentBgPath);
        t.push(addictionPreventionTitleBgPath);
        t.push(autoSaveJxPath);
        t.push(autoSaveKsPath);
        var i = function t() {
            e.currentState = d.getADInfo
        };
        SAL_preload(g, t, function(t) {
            if (t == 1) {
                i && i()
            }
        }, 1, true)
    }
    ;
    this.setSplashProcess = function(t) {
        var e = "";
        var i = "";
        if (t && t != -1e4 && parseInt(t.status) == 1) {
            e = t.data.ad.adurl;
            if (GloableData.getInstance().isMobile()) {
                i = t.data.ad.mobile_img_url
            } else {
                i = t.data.ad.imgurl
            }
        }
        if (isNeedPreventEnter) {
            splash.blockViewShow(i)
        } else {
            splash.loadAss(i, e)
        }
        this.currentState = d.getGUID
    }
}

function FailMessageUI(t) {
    var e = this;
    this.container = SALContainer(gGameWidth, gGameHeight);
    SAL_addElement(g, this.container);
    SAL_setElementIndex(g, this.container, 15e3);
    SAL_setPosition(this.container, gGameX, 0);
    this.back = null;
    this.closeBtn = null;
    this.bg = null;
    this.icon = null;
    this.button = null;
    this.itemText = null;
    this.callBack = t;
    this.init = function() {
        var t = this;
        var e = {
            x: gGameWidth - 390 >> 1,
            y: gGameHeight - 300 >> 1
        };
        this.bg = createImage(SHOP_LOCK_BG, e, {
            w: 390,
            h: 300
        }, this.container);
        var i = {
            x: gGameWidth - 72 >> 1,
            y: e.y + 36
        };
        this.icon = createImage(SHOP_FAIL_ICON, i, {
            w: 72,
            h: 72
        }, this.container);
        var a = {
            text: this.textMsg,
            font: "微软雅黑",
            fontColor: SALColor(0, 0, 0, 255),
            fontSize: 18
        };
        this.itemText = createText(a);
        this.addChild(this.itemText);
        var s = SAL_getTextSize(this.itemText);
        var n = {
            x: gGameWidth - s[0] >> 1,
            y: i.y + 72 + 24
        };
        this.textPos = n;
        SAL_setPosition(this.itemText, n.x, n.y);
        this.button = SALButton(autoSaveKsPath, autoSaveKsPath, "好的");
        this.addChild(this.button);
        var r = {
            x: gGameWidth - 186 >> 1,
            y: e.y + 300 - 45 - 35
        };
        SAL_setElementSize(this.button, 186, 45);
        SAL_setPosition(this.button, r.x, r.y);
        SAL_setTextFontSize(this.button, 26);
        SAL_setTextColor(this.button, SALColor(0, 0, 0, 255));
        SAL_setElementBlockTouch(this.button, true);
        SAL_addTouchDown(this.button, function() {});
        SAL_addTouchUp(this.button, function() {});
        SAL_addTouchMove(this.button, function() {});
        SAL_addClick(this.button, function() {
            t.dispose();
            t.callBack && t.callBack()
        })
    }
    ;
    this.update = function(t) {
        SAL_resetElement(this.itemText, t);
        var e = SAL_getTextSize(this.itemText);
        SAL_setPosition(this.itemText, gGameWidth - e[0] >> 1, this.textPos.y)
    }
    ;
    this.dispose = function() {
        this.container && SAL_destroyElement(this.container);
        this.back && SAL_destroyElement(this.back);
        this.closeBtn && SAL_destroyElement(this.closeBtn);
        this.bg && SAL_destroyElement(this.bg);
        this.icon && SAL_destroyElement(this.icon);
        this.button && SAL_destroyElement(this.button);
        this.itemText && SAL_destroyElement(this.itemText)
    }
    ;
    this.addChild = function(t) {
        SAL_addElement(this.container, t)
    }
    ;
    var i = [SHOP_LOCK_BG, SHOP_FAIL_ICON];
    SAL_preload(g, i, function(t) {
        if (t == 1) {
            e.init()
        }
    }, 5, true)
}
